import{_ as t,c as a,a as o,o as p}from"./app-Ulsq_P74.js";const r={};function c(s,e){return p(),a("div",null,e[0]||(e[0]=[o('<p>前端低代码在最近的这两年，不少的公司或技术团队都对此青睐有佳，并各自实现了各自的低代码平台。</p><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>前端低代码，是指 无需代码或者仅需少量的代码，即可生成可交互的应用。</p><p>这个概念的兴起，期望于能够更快的去构建、部署新的应用，并降低门槛，让非技术开发人员也能够构建新的应用。</p><h2 id="为什么做低代码" tabindex="-1"><a class="header-anchor" href="#为什么做低代码"><span>为什么做低代码</span></a></h2><p>传统的应用开发从启动到发布的过程，大致的流程如下：</p><div style="text-align:center;"><p><img src="//assets.processon.com/chart_image/6320a2fb637689341d579d34.png" alt="low-code-1"></p></div><p>在这个过程中，我们需要花费大量的时间用于 代码开发 -&gt; 测试 这个过程，在这个过程，还需要根据项目大小，组织多个开发人员、测试人员等参与到项目中，包括制定开发规范、测试规范等。</p><p>而对于某些场景的应用，可能整个应用的生命周期相对较短，多个应用之间存在着类似的功能、需求、设计等等，然而在传统的项目开发中， 我们仍然需要按照上述的流程，完整的走一遍，才能正式发布上线，这无疑会花费大量的时间。一般我们会通过抽离重复的功能、需求、UI等为 独立的库、组件等，在新项目中实现复用，从而减少开发时间，然而这并不能对项目的发布速度有质的提升。</p><p>而对于一些小型企业，或者个体经营户，期望做一个线上应用，但并没有多余的资金资源去组建一个开发团队，对购买服务器、上线应用等更是一知半解，成为了制约他们发展的一道坎。</p><p>对于这些场景、存在的问题，需要需要一种方案，能够实现快速的实现从创建项目到发布部署为可访问的项目，并且能够面向更广泛的用户群体。 这成为了一个非常具有市场潜力的需求。</p><h2 id="如何做低代码" tabindex="-1"><a class="header-anchor" href="#如何做低代码"><span>如何做低代码</span></a></h2><p>对于一个前端应用，通常由多个页面组成，在现代前端开发中，我们将页面拆分为一个个组件来进行组合：</p><p><img src="//assets.processon.com/chart_image/6320ccbf1efad46b0aa9d631.png" alt="low code 1"></p><p>在 前端低代码 中，我们同样的，可以通过 组件来组装页面，通过可视化的交互方式，将组件拖拽到 页面容器中， 这种交互方式相对来说更加适用于更多的群体。</p><p><img src="//assets.processon.com/chart_image/6320d1830e3e743f58315ed7.png" alt="low code 2"></p><p>同时，需要提供能够对组件进行编辑状态的能力，以支持应用的个性化配置。</p><p><img src="//assets.processon.com/chart_image/6321b4420e3e743f5833bbc8.png" alt="low code 3"></p><p>在初步确定好 基础的功能、交互方式后，就可以围绕它们，来完善 实现低代码平台的技术方案。</p><hr><p>初步明确的，我们需要 通过 <strong>组件</strong> 来组装 应用，围绕这一块，需要实现：</p><ul><li>低代码组件的规范：开发规范、接入规范；</li><li>用于承载组件、组装组件并渲染的应用容器；</li><li>组件的状态的更新与保存；</li></ul>',22)]))}const i=t(r,[["render",c],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/article/ecdgrife/","title":"浅谈前端低代码","lang":"zh-CN","frontmatter":{"title":"浅谈前端低代码","createTime":"2022/09/13 08:15:38","author":"pengzhanbo","tags":["javascript","development"],"permalink":"/article/ecdgrife/","description":"前端低代码在最近的这两年，不少的公司或技术团队都对此青睐有佳，并各自实现了各自的低代码平台。 前言 前端低代码，是指 无需代码或者仅需少量的代码，即可生成可交互的应用。 这个概念的兴起，期望于能够更快的去构建、部署新的应用，并降低门槛，让非技术开发人员也能够构建新的应用。 为什么做低代码 传统的应用开发从启动到发布的过程，大致的流程如下： low-co...","draft":true,"head":[["meta",{"property":"og:url","content":"https://wlg.us.kg/article/ecdgrife/"}],["meta",{"property":"og:site_name","content":"WBlog"}],["meta",{"property":"og:title","content":"浅谈前端低代码"}],["meta",{"property":"og:description","content":"前端低代码在最近的这两年，不少的公司或技术团队都对此青睐有佳，并各自实现了各自的低代码平台。 前言 前端低代码，是指 无需代码或者仅需少量的代码，即可生成可交互的应用。 这个概念的兴起，期望于能够更快的去构建、部署新的应用，并降低门槛，让非技术开发人员也能够构建新的应用。 为什么做低代码 传统的应用开发从启动到发布的过程，大致的流程如下： low-co..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"//assets.processon.com/chart_image/6320a2fb637689341d579d34.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"pengzhanbo"}],["meta",{"property":"article:tag","content":"javascript"}],["meta",{"property":"article:tag","content":"development"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"浅谈前端低代码\\",\\"image\\":[\\"//assets.processon.com/chart_image/6320a2fb637689341d579d34.png\\",\\"//assets.processon.com/chart_image/6320ccbf1efad46b0aa9d631.png\\",\\"//assets.processon.com/chart_image/6320d1830e3e743f58315ed7.png\\",\\"//assets.processon.com/chart_image/6321b4420e3e743f5833bbc8.png\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pengzhanbo\\"}]}"]]},"headers":[],"readingTime":{"minutes":2.76,"words":827},"git":{},"autoDesc":true,"filePathRelative":"blog/10.开发/浅谈前端低代码.md","categoryList":[{"id":"126ac9","sort":10000,"name":"blog"},{"id":"884b3f","sort":10,"name":"开发"}]}');export{i as comp,l as data};
