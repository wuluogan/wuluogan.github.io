import{_ as o,c as t,a as i,o as a}from"./app-Ulsq_P74.js";const c={};function n(r,e){return a(),t("div",null,e[0]||(e[0]=[i('<div class="hint-container tip"><p class="hint-container-title">提问</p><ol><li>什么是事件循环？</li><li>什么是宏任务和微任务？</li><li>事件循环的执行步骤？</li></ol></div><p>参阅 <a href="/article/browser-event-loop">Event Loop 浏览器端的事件循环</a></p><h2 id="什么是-event-loop" tabindex="-1"><a class="header-anchor" href="#什么是-event-loop"><span>什么是 Event-Loop ？</span></a></h2><p>Event-Loop 是一个执行模型，在 <a href="https://html.spec.whatwg.org/multipage/webappapis.html#event-loops" target="_blank" rel="noopener noreferrer">html5规范</a> 中进行了浏览器端的 Event-Loop 的明确定义。</p><h2 id="宏任务与微任务" tabindex="-1"><a class="header-anchor" href="#宏任务与微任务"><span>宏任务与微任务</span></a></h2><p>javascript 有两种异步任务，分别是<code>宏任务</code>和<code>微任务</code></p><h3 id="宏任务" tabindex="-1"><a class="header-anchor" href="#宏任务"><span>宏任务</span></a></h3><p>宏任务，<code>macro task</code>，也叫 <code>tasks</code>，一些异步任务的回调会依次进入 <code>macro task queue</code>，等待后续被调用。</p><p>这些异步任务包括：</p><ul><li>setTimeout</li><li>setInterval</li><li>setImmediate (Node独有)</li><li>requestAnimationFrame (浏览器独有)</li><li>I/O</li><li>UI rendering</li></ul><h3 id="微任务" tabindex="-1"><a class="header-anchor" href="#微任务"><span>微任务</span></a></h3><p>微任务， <code>micro task</code>, 也叫 <code>jobs</code>，另一些异步任务的回调会依次进入<code>micro task queue</code>，等待后续被调用。</p><p>这些异步任务包括：</p><ul><li>process.nextTick(Node独有)</li><li>Promise</li><li>Object.observe</li><li>MutationObserver</li></ul><h2 id="事件循环-event-loop" tabindex="-1"><a class="header-anchor" href="#事件循环-event-loop"><span>事件循环 Event Loop</span></a></h2><ol><li>执行全局 <code>script</code> 代码，这些代码有一些是同步语句，有一些是异步语句（如： setTimeout）；</li><li>全局<code>script</code>同步代码执行完毕后，调用栈Stack会清空；</li><li>从微任务<code>micro task queue</code> 中取出位于队首的任务，放入调用栈Stack中执行，执行完后<code>micro task queue</code>长度减一；</li><li>继续取出微任务<code>micro task queue</code>位于队首的任务，放入调用栈Stack中执行， 以此类推，直到把<code>micro task queue</code>中的所有任务都执行完毕。<strong>注意，如果在执行micro task的过程中，产生了<code>micro task</code>那么会加入到队列的末尾，也会在这个周期被调用执行</strong>；</li><li><code>micro task</code>中的所有无人都执行完毕，此时 <code>micro task queue</code> 为空队列，调用栈Stack也为空；</li><li>取出宏队列 <code>macro task queue</code> 中位于队首的任务，放入Stack中执行；</li><li>执行完毕后，调用栈Stack为空；</li><li>重复第3-7个步骤；</li><li>以此继续循环重复；</li></ol><div class="hint-container important"><p class="hint-container-title">重点</p><ol><li>宏任务<code>marco task</code> 一次只从队列中取出一个任务执行，执行后就去执行微任务队列中的任务；</li><li>微任务队列中所有的任务都会依次取出来执行，直到<code>micro task queue</code>为空， 且当前微任务执行过程中产生新的<code>micro task</code>，也会加入到当前<code>micro task queue</code>;</li><li><code>UI Rendering</code>由浏览器自定判断决定执行节点。但是只要执行<code>UI Rendering</code>，它的节点是在执行完所有 <code>micro task</code>之后，下一个<code>macro task</code>之前，紧跟着执行<code>UI Rendering</code></li></ol></div>',17)]))}const d=o(c,[["render",n],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/interview-question/7y6d3oqt/","title":"事件循环","lang":"zh-CN","frontmatter":{"title":"事件循环","createTime":"2022/04/17 06:18:33","author":"pengzhanbo","permalink":"/interview-question/7y6d3oqt/","description":"提问 什么是事件循环？ 什么是宏任务和微任务？ 事件循环的执行步骤？ 参阅 Event Loop 浏览器端的事件循环 什么是 Event-Loop ？ Event-Loop 是一个执行模型，在 html5规范 中进行了浏览器端的 Event-Loop 的明确定义。 宏任务与微任务 javascript 有两种异步任务，分别是宏任务和微任务 宏任务 宏任...","head":[["meta",{"property":"og:url","content":"https://wlg.us.kg/interview-question/7y6d3oqt/"}],["meta",{"property":"og:site_name","content":"WBlog"}],["meta",{"property":"og:title","content":"事件循环"}],["meta",{"property":"og:description","content":"提问 什么是事件循环？ 什么是宏任务和微任务？ 事件循环的执行步骤？ 参阅 Event Loop 浏览器端的事件循环 什么是 Event-Loop ？ Event-Loop 是一个执行模型，在 html5规范 中进行了浏览器端的 Event-Loop 的明确定义。 宏任务与微任务 javascript 有两种异步任务，分别是宏任务和微任务 宏任务 宏任..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"pengzhanbo"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"事件循环\\",\\"image\\":[\\"\\"],\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"pengzhanbo\\"}]}"]]},"headers":[],"readingTime":{"minutes":2.17,"words":650},"git":{},"autoDesc":true,"filePathRelative":"notes/面试题/浏览器/事件循环.md"}');export{d as comp,s as data};
