"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1814],{2244:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(9729);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}},6566:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"dev/java/SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236","title":"SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236","description":"\u80cc\u666f\u4e0e\u9700\u6c42","source":"@site/docs/dev/java/SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236.md","sourceDirName":"dev/java","slug":"/dev/java/SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236","permalink":"/en/docs/dev/java/SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/dev/java/SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236.md","tags":[],"version":"current","frontMatter":{}}');var s=r(5813),i=r(2244);const a={},o="SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236",c={},l=[{value:"\u80cc\u666f\u4e0e\u9700\u6c42",id:"\u80cc\u666f\u4e0e\u9700\u6c42",level:2},{value:"\u8bbe\u8ba1\u601d\u8def",id:"\u8bbe\u8ba1\u601d\u8def",level:2},{value:"\u6280\u672f\u8bbe\u8ba1",id:"\u6280\u672f\u8bbe\u8ba1",level:4},{value:"\u6280\u672f\u9009\u578b",id:"\u6280\u672f\u9009\u578b",level:4},{value:"\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0",id:"\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0",level:2},{value:"\u786c\u4ef6\u6307\u7eb9\u83b7\u53d6",id:"\u786c\u4ef6\u6307\u7eb9\u83b7\u53d6",level:4},{value:"RSA\u52a0\u5bc6\u5de5\u5177\u7c7b",id:"rsa\u52a0\u5bc6\u5de5\u5177\u7c7b",level:4},{value:"\u8bb8\u53ef\u8bc1\u6570\u636e\u6a21\u578b",id:"\u8bb8\u53ef\u8bc1\u6570\u636e\u6a21\u578b",level:4},{value:"\u8bb8\u53ef\u8bc1\u670d\u52a1\u6838\u5fc3\u903b\u8f91",id:"\u8bb8\u53ef\u8bc1\u670d\u52a1\u6838\u5fc3\u903b\u8f91",level:4},{value:"REST API\u63a5\u53e3\u8bbe\u8ba1",id:"rest-api\u63a5\u53e3\u8bbe\u8ba1",level:2},{value:"\u5e94\u7528\u573a\u666f\u4e0e\u96c6\u6210",id:"\u5e94\u7528\u573a\u666f\u4e0e\u96c6\u6210",level:2},{value:"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u683c\u5f0f",id:"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u683c\u5f0f",level:4},{value:"\u529f\u80fd\u6743\u9650\u63a7\u5236",id:"\u529f\u80fd\u6743\u9650\u63a7\u5236",level:4},{value:"Web\u7ba1\u7406\u754c\u9762",id:"web\u7ba1\u7406\u754c\u9762",level:3},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"springboot-\u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236",children:"SpringBoot \u5b9e\u73b0\u8bb8\u53ef\u8bc1\u63a7\u5236"})}),"\n",(0,s.jsx)(n.h2,{id:"\u80cc\u666f\u4e0e\u9700\u6c42",children:"\u80cc\u666f\u4e0e\u9700\u6c42"}),"\n",(0,s.jsx)(n.p,{children:"\u5728\u8f6f\u4ef6\u5f00\u53d1\u548c\u5546\u4e1a\u5316\u8fc7\u7a0b\u4e2d\uff0c\u8bb8\u53ef\u8bc1\u63a7\u5236\u662f\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u6280\u672f\u9700\u6c42\u3002\u65e0\u8bba\u662f\u4f01\u4e1a\u7ea7\u7ba1\u7406\u7cfb\u7edf\u3001\u684c\u9762\u5e94\u7528\u8f6f\u4ef6\uff0c\u8fd8\u662fSaaS\u670d\u52a1\uff0c\u90fd\u9700\u8981\u5bf9\u8f6f\u4ef6\u7684\u4f7f\u7528\u8303\u56f4\u3001\u529f\u80fd\u6743\u9650\u548c\u65f6\u95f4\u9650\u5236\u8fdb\u884c\u6709\u6548\u7ba1\u63a7\u3002"}),"\n",(0,s.jsxs)(n.p,{children:["\u8bb8\u53ef\u8bc1\u7cfb\u7edf\u7684\u6838\u5fc3\u4ef7\u503c\u5728\u4e8e\uff1a ",(0,s.jsx)(n.strong,{children:"\u4fdd\u62a4\u77e5\u8bc6\u4ea7\u6743"}),"\uff1a\u9632\u6b62\u8f6f\u4ef6\u88ab\u975e\u6cd5\u590d\u5236\u548c\u5206\u53d1"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u5546\u4e1a\u6a21\u5f0f\u652f\u6491"}),"\uff1a\u652f\u6301\u6309\u529f\u80fd\u3001\u6309\u65f6\u95f4\u7684\u5dee\u5f02\u5316\u5b9a\u4ef7"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u7528\u6237\u7ba1\u7406"}),"\uff1a\u7cbe\u786e\u63a7\u5236\u6388\u6743\u7528\u6237\u548c\u4f7f\u7528\u8303\u56f4"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u5408\u89c4\u8981\u6c42"}),"\uff1a\u6ee1\u8db3\u4f01\u4e1a\u5bf9\u8f6f\u4ef6\u8d44\u4ea7\u7ba1\u7406\u7684\u9700\u6c42"]}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u6587\u5c06\u4ecb\u7ecd\u4e00\u4e2a\u57fa\u4e8eSpring Boot + RSA2048\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u8bb8\u53ef\u8bc1\u63a7\u5236\u7cfb\u7edf\u5b9e\u73b0\u65b9\u6848\uff0c\u5177\u5907\u786c\u4ef6\u7ed1\u5b9a\u3001\u529f\u80fd\u6743\u9650\u63a7\u5236\u7b49\u3002"}),"\n",(0,s.jsx)(n.h2,{id:"\u8bbe\u8ba1\u601d\u8def",children:"\u8bbe\u8ba1\u601d\u8def"}),"\n",(0,s.jsx)(n.h4,{id:"\u6280\u672f\u8bbe\u8ba1",children:"\u6280\u672f\u8bbe\u8ba1"}),"\n",(0,s.jsx)(n.p,{children:"\u8bb8\u53ef\u8bc1\u7cfb\u7edf\u91c7\u7528\u975e\u5bf9\u79f0\u52a0\u5bc6\u7684\u8bbe\u8ba1\u601d\u8def\uff1a\u5382\u5546\u4f7f\u7528\u79c1\u94a5\u5bf9\u8bb8\u53ef\u8bc1\u4fe1\u606f\u8fdb\u884c\u6570\u5b57\u7b7e\u540d\uff0c\u5ba2\u6237\u7aef\u4f7f\u7528\u5bf9\u5e94\u7684\u516c\u94a5\u9a8c\u8bc1\u7b7e\u540d\u7684\u771f\u5b9e\u6027\u3002\u8fd9\u79cd\u67b6\u6784\u7684\u4f18\u52bf\u5728\u4e8e\uff1a"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"1. \u5b89\u5168\u6027\u9ad8"}),"\uff1a\u79c1\u94a5\u7531\u5382\u5546\u4e25\u683c\u4fdd\u7ba1\uff0c\u516c\u94a5\u53ef\u4ee5\u968f\u8f6f\u4ef6\u5206\u53d1\uff0c\u5373\u4f7f\u516c\u94a5\u6cc4\u9732\u4e5f\u65e0\u6cd5\u4f2a\u9020\u8bb8\u53ef\u8bc1"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"2. \u90e8\u7f72\u7b80\u5355"}),"\uff1a\u65e0\u9700\u989d\u5916\u7684\u8bb8\u53ef\u8bc1\u670d\u52a1\u5668\uff0c\u652f\u6301\u79bb\u7ebf\u9a8c\u8bc1"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"3. \u6269\u5c55\u6027\u5f3a"}),"\uff1a\u53ef\u4ee5\u7075\u6d3b\u6dfb\u52a0\u5404\u79cd\u9a8c\u8bc1\u89c4\u5219\u548c\u6743\u9650\u63a7\u5236"]}),"\n",(0,s.jsx)(n.h4,{id:"\u6280\u672f\u9009\u578b",children:"\u6280\u672f\u9009\u578b"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u540e\u7aef\u6280\u672f\u6808"}),"\uff1a"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Spring Boot 3.x\uff1a\u63d0\u4f9b\u5b8c\u6574\u7684Web\u670d\u52a1\u6846\u67b6\u548c\u4f9d\u8d56\u6ce8\u5165"}),"\n",(0,s.jsx)(n.li,{children:"Java Security API\uff1a\u5229\u7528JDK\u5185\u7f6e\u7684RSA\u52a0\u5bc6\u7b97\u6cd5\u5b9e\u73b0"}),"\n",(0,s.jsx)(n.li,{children:"Jackson\uff1a\u5904\u7406JSON\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u5316"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"\u524d\u7aef\u6280\u672f\u6808"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u539f\u751fJavaScript\uff1a\u65e0\u6846\u67b6\u4f9d\u8d56\uff0c\u4fdd\u6301\u8f7b\u91cf\u7ea7"}),"\n",(0,s.jsx)(n.li,{children:"TailwindCSS\uff1a\u5feb\u901f\u6784\u5efa\u73b0\u4ee3\u5316UI\u754c\u9762"}),"\n",(0,s.jsx)(n.li,{children:"RESTful API\uff1a\u6807\u51c6\u5316\u7684\u524d\u540e\u7aef\u4ea4\u4e92"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u52a0\u5bc6\u7b97\u6cd5"}),"\uff1a"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"RSA2048\uff1a\u8db3\u591f\u5b89\u5168\u7684\u975e\u5bf9\u79f0\u52a0\u5bc6\u5f3a\u5ea6"}),"\n",(0,s.jsx)(n.li,{children:"SHA256withRSA\uff1a\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5"}),"\n",(0,s.jsx)(n.li,{children:"Base64\uff1a\u7b7e\u540d\u7ed3\u679c\u7f16\u7801\u683c\u5f0f"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0",children:"\u6838\u5fc3\u529f\u80fd\u5b9e\u73b0"}),"\n",(0,s.jsx)(n.h4,{id:"\u786c\u4ef6\u6307\u7eb9\u83b7\u53d6",children:"\u786c\u4ef6\u6307\u7eb9\u83b7\u53d6"}),"\n",(0,s.jsx)(n.p,{children:"\u786c\u4ef6\u7ed1\u5b9a\u662f\u8bb8\u53ef\u8bc1\u7cfb\u7edf\u7684\u91cd\u8981\u5b89\u5168\u7279\u6027\uff0c\u901a\u8fc7\u83b7\u53d6\u4e3b\u677f\u5e8f\u5217\u53f7\u5b9e\u73b0\u8bbe\u5907\u552f\u4e00\u6027\u8bc6\u522b\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@Component \npublic class HardwareUtil { \n \n    private static final Logger logger = LoggerFactory.getLogger(HardwareUtil.class); \n \n    /** \n     * \u83b7\u53d6\u4e3b\u677f\u5e8f\u5217\u53f7\uff0c\u652f\u6301Windows\u548cLinux\u7cfb\u7edf \n     */ \n    public String getMotherboardSerial() { \n        String os = System.getProperty("os.name").toLowerCase(); \n \n        try { \n            if (os.contains("windows")) { \n                return getWindowsMotherboardSerial(); \n            } else if (os.contains("linux")) { \n                return getLinuxMotherboardSerial(); \n            } else { \n                logger.warn("\u4e0d\u652f\u6301\u7684\u64cd\u4f5c\u7cfb\u7edf: {}", os); \n                return "UNKNOWN"; \n            } \n        } catch (Exception e) { \n            logger.error("\u83b7\u53d6\u4e3b\u677f\u5e8f\u5217\u53f7\u5931\u8d25", e); \n            return "UNKNOWN"; \n        } \n    } \n \n    /** \n     * Windows\u7cfb\u7edf\u901a\u8fc7WMI\u547d\u4ee4\u83b7\u53d6\u4e3b\u677f\u5e8f\u5217\u53f7 \n     */ \n    private String getWindowsMotherboardSerial() throws Exception { \n        Process process = Runtime.getRuntime().exec("wmic baseboard get serialnumber"); \n        BufferedReader reader = new BufferedReader( \n            new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8) \n        ); \n \n        String line; \n        while ((line = reader.readLine()) != null) { \n            line = line.trim(); \n            if (!line.isEmpty() && !line.equals("SerialNumber")) { \n                logger.debug("Windows\u4e3b\u677f\u5e8f\u5217\u53f7: {}", line); \n                return line; \n            } \n        } \n \n        reader.close(); \n        process.waitFor(); \n        return "UNKNOWN"; \n    } \n \n    /** \n     * Linux\u7cfb\u7edf\u901a\u8fc7dmidecode\u547d\u4ee4\u83b7\u53d6\u4e3b\u677f\u5e8f\u5217\u53f7 \n     */ \n    private String getLinuxMotherboardSerial() throws Exception { \n        try { \n            // \u4f18\u5148\u4f7f\u7528dmidecode\u547d\u4ee4 \n            Process process = Runtime.getRuntime().exec("sudo dmidecode -s baseboard-serial-number"); \n            BufferedReader reader = new BufferedReader( \n                new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8) \n            ); \n \n            String line = reader.readLine(); \n            reader.close(); \n            process.waitFor(); \n \n            if (line != null && !line.trim().isEmpty() && !line.contains("Not Specified")) { \n                logger.debug("Linux\u4e3b\u677f\u5e8f\u5217\u53f7: {}", line.trim()); \n                return line.trim(); \n            } \n \n            // \u5907\u9009\u65b9\u6848\uff1a\u8bfb\u53d6\u7cfb\u7edf\u6587\u4ef6 \n            return getLinuxMotherboardFromSys(); \n \n        } catch (Exception e) { \n            logger.error("dmidecode\u547d\u4ee4\u6267\u884c\u5931\u8d25", e); \n            return getLinuxMotherboardFromSys(); \n        } \n    } \n \n    /** \n     * \u4ece/sys/class/dmi/id/board_serial\u6587\u4ef6\u8bfb\u53d6\u4e3b\u677f\u5e8f\u5217\u53f7 \n     */ \n    private String getLinuxMotherboardFromSys() { \n        try { \n            Process process = Runtime.getRuntime().exec("cat /sys/class/dmi/id/board_serial"); \n            BufferedReader reader = new BufferedReader( \n                new InputStreamReader(process.getInputStream(), StandardCharsets.UTF_8) \n            ); \n \n            String line = reader.readLine(); \n            reader.close(); \n            process.waitFor(); \n \n            if (line != null && !line.trim().isEmpty()) { \n                logger.debug("Linux\u4e3b\u677f\u5e8f\u5217\u53f7(\u4ecesys\u8bfb\u53d6): {}", line.trim()); \n                return line.trim(); \n            } \n \n        } catch (Exception e) { \n            logger.warn("\u4ece/sys\u6587\u4ef6\u8bfb\u53d6\u5931\u8d25", e); \n        } \n \n        return "UNKNOWN"; \n    } \n \n    /** \n     * \u83b7\u53d6\u7cfb\u7edf\u4fe1\u606f\u6458\u8981\uff0c\u7528\u4e8e\u8c03\u8bd5\u548c\u5c55\u793a \n     */ \n    public String getSystemInfo() { \n        return String.format("\u64cd\u4f5c\u7cfb\u7edf: %s %s, \u67b6\u6784: %s, \u4e3b\u677f\u5e8f\u5217\u53f7: %s", \n            System.getProperty("os.name"), \n            System.getProperty("os.version"), \n            System.getProperty("os.arch"), \n            getMotherboardSerial() \n        ); \n    } \n} \n'})}),"\n",(0,s.jsx)(n.p,{children:"\u8fd9\u4e2a\u5b9e\u73b0\u7684\u5173\u952e\u70b9"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u5f02\u5e38\u5904\u7406"}),'\uff1a\u83b7\u53d6\u5931\u8d25\u65f6\u8fd4\u56de"UNKNOWN"\u800c\u4e0d\u662f\u629b\u51fa\u5f02\u5e38\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u7a33\u5b9a\u6027']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u591a\u91cd\u5907\u9009"}),"\uff1aLinux\u4e0b\u4f18\u5148\u4f7f\u7528dmidecode\uff0c\u5931\u8d25\u65f6\u5c1d\u8bd5\u8bfb\u53d6sys\u6587\u4ef6"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u7f16\u7801\u5904\u7406"}),"\uff1a\u7edf\u4e00\u4f7f\u7528UTF-8\u7f16\u7801\u907f\u514d\u4e71\u7801\u95ee\u9898"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u65e5\u5fd7\u8bb0\u5f55"}),"\uff1a\u8be6\u7ec6\u8bb0\u5f55\u83b7\u53d6\u8fc7\u7a0b\uff0c\u4fbf\u4e8e\u95ee\u9898\u6392\u67e5"]}),"\n",(0,s.jsx)(n.h4,{id:"rsa\u52a0\u5bc6\u5de5\u5177\u7c7b",children:"RSA\u52a0\u5bc6\u5de5\u5177\u7c7b"}),"\n",(0,s.jsx)(n.p,{children:"RSA\u52a0\u5bc6\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u5b89\u5168\u57fa\u77f3\uff0c\u9700\u8981\u63d0\u4f9b\u5bc6\u94a5\u751f\u6210\u3001\u7b7e\u540d\u3001\u9a8c\u7b7e\u7b49\u5b8c\u6574\u529f\u80fd\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@Component \npublic class RSAUtil { \n \n    private static final Logger logger = LoggerFactory.getLogger(RSAUtil.class); \n    private static final String ALGORITHM = "RSA"; \n    private static final String SIGNATURE_ALGORITHM = "SHA256withRSA"; \n    private static final int KEY_SIZE = 2048; \n \n    /** \n     * \u751f\u6210RSA\u5bc6\u94a5\u5bf9 \n     */ \n    public KeyPair generateKeyPair() throws Exception { \n        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(ALGORITHM); \n        keyGen.initialize(KEY_SIZE); \n        KeyPair keyPair = keyGen.generateKeyPair(); \n        logger.info("RSA\u5bc6\u94a5\u5bf9\u751f\u6210\u6210\u529f\uff0c\u5bc6\u94a5\u957f\u5ea6: {} bits", KEY_SIZE); \n        return keyPair; \n    } \n \n    /** \n     * \u4f7f\u7528\u79c1\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u6570\u5b57\u7b7e\u540d \n     */ \n    public String sign(String data, PrivateKey privateKey) throws Exception { \n        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM); \n        signature.initSign(privateKey); \n        signature.update(data.getBytes(StandardCharsets.UTF_8)); \n        byte[] signedBytes = signature.sign(); \n        String result = Base64.getEncoder().encodeToString(signedBytes); \n        logger.debug("\u6570\u636e\u7b7e\u540d\u5b8c\u6210\uff0c\u539f\u59cb\u6570\u636e\u957f\u5ea6: {}, \u7b7e\u540d\u957f\u5ea6: {}", data.length(), result.length()); \n        return result; \n    } \n \n    /** \n     * \u4f7f\u7528\u516c\u94a5\u9a8c\u8bc1\u6570\u5b57\u7b7e\u540d \n     */ \n    public boolean verify(String data, String signatureBase64, PublicKey publicKey) throws Exception { \n        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM); \n        signature.initVerify(publicKey); \n        signature.update(data.getBytes(StandardCharsets.UTF_8)); \n        byte[] signatureBytes = Base64.getDecoder().decode(signatureBase64); \n        boolean isValid = signature.verify(signatureBytes); \n        logger.debug("\u7b7e\u540d\u9a8c\u8bc1\u7ed3\u679c: {}", isValid ? "\u901a\u8fc7" : "\u5931\u8d25"); \n        return isValid; \n    } \n \n    /** \n     * \u5c06\u79c1\u94a5\u8f6c\u6362\u4e3aPEM\u683c\u5f0f\u5b57\u7b26\u4e32 \n     */ \n    public String privateKeyToPem(PrivateKey privateKey) { \n        String encoded = Base64.getEncoder().encodeToString(privateKey.getEncoded()); \n        return "-----BEGIN PRIVATE KEY-----\\n" + \n                formatBase64String(encoded) + \n                "\\n-----END PRIVATE KEY-----"; \n    } \n \n    /** \n     * \u5c06\u516c\u94a5\u8f6c\u6362\u4e3aPEM\u683c\u5f0f\u5b57\u7b26\u4e32 \n     */ \n    public String publicKeyToPem(PublicKey publicKey) { \n        String encoded = Base64.getEncoder().encodeToString(publicKey.getEncoded()); \n        return "-----BEGIN PUBLIC KEY-----\\n" + \n                formatBase64String(encoded) + \n                "\\n-----END PUBLIC KEY-----"; \n    } \n \n    /** \n     * \u4ecePEM\u683c\u5f0f\u5b57\u7b26\u4e32\u52a0\u8f7d\u79c1\u94a5 \n     */ \n    public PrivateKey loadPrivateKeyFromPem(String pemContent) throws Exception { \n        String privateKeyPEM = pemContent \n                .replaceAll("-----\\\\w+ PRIVATE KEY-----", "") \n                .replaceAll("\\\\s", ""); \n \n        byte[] decoded = Base64.getDecoder().decode(privateKeyPEM); \n        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(decoded); \n        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM); \n        return keyFactory.generatePrivate(spec); \n    } \n \n    /** \n     * \u4ecePEM\u683c\u5f0f\u5b57\u7b26\u4e32\u52a0\u8f7d\u516c\u94a5 \n     */ \n    public PublicKey loadPublicKeyFromPem(String pemContent) throws Exception { \n        String publicKeyPEM = pemContent \n                .replaceAll("-----\\\\w+ PUBLIC KEY-----", "") \n                .replaceAll("\\\\s", ""); \n \n        byte[] decoded = Base64.getDecoder().decode(publicKeyPEM); \n        X509EncodedKeySpec spec = new X509EncodedKeySpec(decoded); \n        KeyFactory keyFactory = KeyFactory.getInstance(ALGORITHM); \n        return keyFactory.generatePublic(spec); \n    } \n \n    /** \n     * \u683c\u5f0f\u5316Base64\u5b57\u7b26\u4e32\uff0c\u6bcf64\u4e2a\u5b57\u7b26\u6362\u884c \n     */ \n    private String formatBase64String(String base64) { \n        StringBuilder formatted = new StringBuilder(); \n        for (int i = 0; i < base64.length(); i += 64) { \n            formatted.append(base64, i, Math.min(i + 64, base64.length())).append("\\n"); \n        } \n        return formatted.toString().trim(); \n    } \n} \n'})}),"\n",(0,s.jsx)(n.h4,{id:"\u8bb8\u53ef\u8bc1\u6570\u636e\u6a21\u578b",children:"\u8bb8\u53ef\u8bc1\u6570\u636e\u6a21\u578b"}),"\n",(0,s.jsx)(n.p,{children:"\u8bb8\u53ef\u8bc1\u5b9e\u4f53\u7c7b\u5b9a\u4e49\u4e86\u8bb8\u53ef\u8bc1\u5305\u542b\u7684\u6240\u6709\u4fe1\u606f\u5b57\u6bb5\uff0c\u4f7f\u7528Jackson\u6ce8\u89e3\u63a7\u5236JSON\u5e8f\u5217\u5316\u987a\u5e8f\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@JsonPropertyOrder({"subject", "issuedTo", "hardwareId", "expireAt", "features"}) \npublic class License { \n \n    private String subject;        // \u8f6f\u4ef6\u4ea7\u54c1\u540d\u79f0 \n    private String issuedTo;       // \u8bb8\u53ef\u8bc1\u6388\u6743\u5bf9\u8c61 \n    private String hardwareId;     // \u7ed1\u5b9a\u7684\u786c\u4ef6\u6307\u7eb9 \n \n    @JsonFormat(pattern = "yyyy-MM-dd") \n    private LocalDate expireAt;    // \u8bb8\u53ef\u8bc1\u5230\u671f\u65f6\u95f4 \n \n    private List<String> features; // \u6388\u6743\u7684\u529f\u80fd\u6a21\u5757\u5217\u8868 \n    private String signature;      // \u6570\u5b57\u7b7e\u540d\uff08\u5e8f\u5217\u5316\u65f6\u6392\u9664\uff09 \n \n    public License() {} \n \n    public License(String subject, String issuedTo, String hardwareId, \n                   LocalDate expireAt, List<String> features) { \n        this.subject = subject; \n        this.issuedTo = issuedTo; \n        this.hardwareId = hardwareId; \n        this.expireAt = expireAt; \n        this.features = features; \n    } \n \n    // \u5b8c\u6574\u7684getter\u548csetter\u65b9\u6cd5 \n    public String getSubject() { return subject; } \n    public void setSubject(String subject) { this.subject = subject; } \n \n    public String getIssuedTo() { return issuedTo; } \n    public void setIssuedTo(String issuedTo) { this.issuedTo = issuedTo; } \n \n    public String getHardwareId() { return hardwareId; } \n    public void setHardwareId(String hardwareId) { this.hardwareId = hardwareId; } \n \n    public LocalDate getExpireAt() { return expireAt; } \n    public void setExpireAt(LocalDate expireAt) { this.expireAt = expireAt; } \n \n    public List<String> getFeatures() { return features; } \n    public void setFeatures(List<String> features) { this.features = features; } \n \n    public String getSignature() { return signature; } \n    public void setSignature(String signature) { this.signature = signature; } \n \n    @Override \n    public String toString() { \n        return "License{" + \n                "subject=\'" + subject + \'\\\'\' + \n                ", issuedTo=\'" + issuedTo + \'\\\'\' + \n                ", hardwareId=\'" + hardwareId + \'\\\'\' + \n                ", expireAt=" + expireAt + \n                ", features=" + features + \n                \'}\'; \n    } \n} \n'})}),"\n",(0,s.jsx)(n.h4,{id:"\u8bb8\u53ef\u8bc1\u670d\u52a1\u6838\u5fc3\u903b\u8f91",children:"\u8bb8\u53ef\u8bc1\u670d\u52a1\u6838\u5fc3\u903b\u8f91"}),"\n",(0,s.jsx)(n.p,{children:"\u8bb8\u53ef\u8bc1\u670d\u52a1\u662f\u6574\u4e2a\u7cfb\u7edf\u7684\u4e1a\u52a1\u6838\u5fc3\uff0c\u8d1f\u8d23\u8bb8\u53ef\u8bc1\u7684\u751f\u6210\u548c\u9a8c\u8bc1\u903b\u8f91\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@Service \npublic class LicenseService { \n \n    private static final Logger logger = LoggerFactory.getLogger(LicenseService.class); \n \n    @Autowired \n    private RSAUtil rsaUtil; \n \n    @Autowired \n    private HardwareUtil hardwareUtil; \n \n    @Autowired \n    private ObjectMapper objectMapper; \n \n    /** \n     * \u751f\u6210\u8bb8\u53ef\u8bc1\u6587\u4ef6 \n     */ \n    public String generateLicense(License license, PrivateKey privateKey) throws Exception { \n        // \u81ea\u52a8\u586b\u5145\u786c\u4ef6\u6307\u7eb9 \n        if (license.getHardwareId() == null || license.getHardwareId().isEmpty()) { \n            String hardwareId = hardwareUtil.getMotherboardSerial(); \n            license.setHardwareId(hardwareId); \n            logger.info("\u81ea\u52a8\u83b7\u53d6\u786c\u4ef6\u6307\u7eb9: {}", hardwareId); \n        } \n \n        // \u521b\u5efa\u6807\u51c6\u5316\u7684JSON\u6570\u636e\u7528\u4e8e\u7b7e\u540d \n        String licenseData = createStandardizedLicenseJson(license); \n        logger.debug("\u5f85\u7b7e\u540d\u7684\u8bb8\u53ef\u8bc1\u6570\u636e: {}", licenseData); \n \n        // \u4f7f\u7528\u79c1\u94a5\u5bf9\u8bb8\u53ef\u8bc1\u6570\u636e\u8fdb\u884c\u7b7e\u540d \n        String signature = rsaUtil.sign(licenseData, privateKey); \n \n        // \u521b\u5efa\u5305\u542b\u7b7e\u540d\u7684\u5b8c\u6574\u8bb8\u53ef\u8bc1 \n        JsonNode jsonNode = objectMapper.readTree(licenseData); \n        ((ObjectNode) jsonNode).put("signature", signature); \n \n        String result = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonNode); \n        logger.info("\u8bb8\u53ef\u8bc1\u751f\u6210\u6210\u529f\uff0c\u6388\u6743\u7ed9: {}, \u5230\u671f\u65f6\u95f4: {}", \n                   license.getIssuedTo(), license.getExpireAt()); \n        return result; \n    } \n \n    /** \n     * \u9a8c\u8bc1\u8bb8\u53ef\u8bc1\u7684\u6709\u6548\u6027 \n     */ \n    public LicenseVerifyResult verifyLicense(String licenseJson, PublicKey publicKey) { \n        try { \n            JsonNode jsonNode = objectMapper.readTree(licenseJson); \n \n            // \u68c0\u67e5\u662f\u5426\u5305\u542b\u7b7e\u540d\u5b57\u6bb5 \n            if (!jsonNode.has("signature")) { \n                return new LicenseVerifyResult(false, "\u8bb8\u53ef\u8bc1\u7f3a\u5c11\u6570\u5b57\u7b7e\u540d"); \n            } \n            String signature = jsonNode.get("signature").asText(); \n \n            // \u79fb\u9664\u7b7e\u540d\u5b57\u6bb5\uff0c\u91cd\u6784\u539f\u59cb\u8bb8\u53ef\u8bc1\u6570\u636e \n            ((ObjectNode) jsonNode).remove("signature"); \n            License license = objectMapper.readValue(jsonNode.toString(), License.class); \n \n            // \u91cd\u65b0\u751f\u6210\u6807\u51c6\u5316\u7684JSON\u6570\u636e\u7528\u4e8e\u9a8c\u8bc1 \n            String licenseData = createStandardizedLicenseJson(license); \n            logger.debug("\u9a8c\u8bc1\u7528\u8bb8\u53ef\u8bc1\u6570\u636e: {}", licenseData); \n \n            // \u9a8c\u8bc1\u6570\u5b57\u7b7e\u540d \n            boolean signatureValid = rsaUtil.verify(licenseData, signature, publicKey); \n            if (!signatureValid) { \n                logger.warn("\u8bb8\u53ef\u8bc1\u6570\u5b57\u7b7e\u540d\u9a8c\u8bc1\u5931\u8d25"); \n                return new LicenseVerifyResult(false, "\u8bb8\u53ef\u8bc1\u6570\u5b57\u7b7e\u540d\u65e0\u6548"); \n            } \n \n            // \u9a8c\u8bc1\u786c\u4ef6\u6307\u7eb9 \n            String currentHardwareId = hardwareUtil.getMotherboardSerial(); \n            if (!currentHardwareId.equals(license.getHardwareId())) { \n                logger.warn("\u786c\u4ef6\u6307\u7eb9\u4e0d\u5339\u914d - \u671f\u671b: {}, \u5b9e\u9645: {}", \n                           license.getHardwareId(), currentHardwareId); \n                return new LicenseVerifyResult(false, \n                    String.format("\u786c\u4ef6\u6307\u7eb9\u4e0d\u5339\u914d\u3002\u8bb8\u53ef\u8bc1\u7ed1\u5b9a\u8bbe\u5907: %s, \u5f53\u524d\u8bbe\u5907: %s", \n                        license.getHardwareId(), currentHardwareId)); \n            } \n \n            // \u9a8c\u8bc1\u8bb8\u53ef\u8bc1\u6709\u6548\u671f \n            if (license.getExpireAt().isBefore(LocalDate.now())) { \n                logger.warn("\u8bb8\u53ef\u8bc1\u5df2\u8fc7\u671f - \u5230\u671f\u65f6\u95f4: {}, \u5f53\u524d\u65f6\u95f4: {}", \n                           license.getExpireAt(), LocalDate.now()); \n                return new LicenseVerifyResult(false, \n                    String.format("\u8bb8\u53ef\u8bc1\u5df2\u8fc7\u671f\u3002\u5230\u671f\u65f6\u95f4: %s, \u5f53\u524d\u65f6\u95f4: %s", \n                        license.getExpireAt(), LocalDate.now())); \n            } \n \n            logger.info("\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u901a\u8fc7 - \u6388\u6743\u5bf9\u8c61: {}, \u529f\u80fd\u6743\u9650: {}", \n                       license.getIssuedTo(), license.getFeatures()); \n            return new LicenseVerifyResult(true, "\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u6210\u529f", license); \n \n        } catch (Exception e) { \n            logger.error("\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u8fc7\u7a0b\u53d1\u751f\u5f02\u5e38", e); \n            return new LicenseVerifyResult(false, "\u8bb8\u53ef\u8bc1\u683c\u5f0f\u9519\u8bef: " + e.getMessage()); \n        } \n    } \n \n    /** \n     * \u521b\u5efa\u6807\u51c6\u5316\u7684\u8bb8\u53ef\u8bc1JSON\u6570\u636e \n     * \u624b\u52a8\u6784\u5efaJSON\u786e\u4fdd\u5b57\u6bb5\u987a\u5e8f\u4e00\u81f4\uff0c\u8fd9\u662f\u7b7e\u540d\u9a8c\u8bc1\u6210\u529f\u7684\u5173\u952e \n     */ \n    private String createStandardizedLicenseJson(License license) throws Exception { \n        StringBuilder json = new StringBuilder(); \n        json.append("{"); \n        json.append("\\"subject\\":\\"").append(escapeJson(license.getSubject())).append("\\","); \n        json.append("\\"issuedTo\\":\\"").append(escapeJson(license.getIssuedTo())).append("\\","); \n        json.append("\\"hardwareId\\":\\"").append(escapeJson(license.getHardwareId())).append("\\","); \n        json.append("\\"expireAt\\":\\"").append(license.getExpireAt().toString()).append("\\","); \n        json.append("\\"features\\":["); \n \n        if (license.getFeatures() != null && !license.getFeatures().isEmpty()) { \n            for (int i = 0; i < license.getFeatures().size(); i++) { \n                if (i > 0) json.append(","); \n                json.append("\\"").append(escapeJson(license.getFeatures().get(i))).append("\\""); \n            } \n        } \n \n        json.append("]}"); \n        return json.toString(); \n    } \n \n    /** \n     * \u8f6c\u4e49JSON\u5b57\u7b26\u4e32\u4e2d\u7684\u7279\u6b8a\u5b57\u7b26 \n     */ \n    private String escapeJson(String str) { \n        if (str == null) return ""; \n        return str.replace("\\\\", "\\\\\\\\") \n                  .replace("\\"", "\\\\\\"") \n                  .replace("\\n", "\\\\n") \n                  .replace("\\r", "\\\\r") \n                  .replace("\\t", "\\\\t"); \n    } \n \n    /** \n     * \u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u7ed3\u679c\u5c01\u88c5\u7c7b \n     */ \n    public static class LicenseVerifyResult { \n        private final boolean valid; \n        private final String message; \n        private final License license; \n \n        public LicenseVerifyResult(boolean valid, String message) { \n            this(valid, message, null); \n        } \n \n        public LicenseVerifyResult(boolean valid, String message, License license) { \n            this.valid = valid; \n            this.message = message; \n            this.license = license; \n        } \n \n        public boolean isValid() { return valid; } \n        public String getMessage() { return message; } \n        public License getLicense() { return license; } \n    } \n} \n'})}),"\n",(0,s.jsx)(n.p,{children:"\u8fd9\u4e2a\u670d\u52a1\u7c7b\u7684\u5173\u952e\u8bbe\u8ba1\u70b9"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u6807\u51c6\u5316JSON\u5e8f\u5217\u5316"}),"\uff1a\u624b\u52a8\u6784\u5efaJSON\u786e\u4fdd\u5b57\u6bb5\u987a\u5e8f\u56fa\u5b9a\uff0c\u89e3\u51b3Jackson\u5e8f\u5217\u5316\u987a\u5e8f\u4e0d\u4e00\u81f4\u7684\u95ee\u9898"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u5168\u9762\u7684\u9a8c\u8bc1\u903b\u8f91"}),"\uff1a\u7b7e\u540d\u3001\u786c\u4ef6\u3001\u65f6\u95f4\u4e09\u91cd\u9a8c\u8bc1\u786e\u4fdd\u5b89\u5168\u6027"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u8be6\u7ec6\u7684\u65e5\u5fd7\u8bb0\u5f55"}),"\uff1a\u8bb0\u5f55\u5173\u952e\u64cd\u4f5c\u548c\u5f02\u5e38\uff0c\u4fbf\u4e8e\u95ee\u9898\u8bca \u65ad ",(0,s.jsx)(n.strong,{children:"\u5f02\u5e38\u5904\u7406"}),"\uff1a\u5c06\u6240\u6709\u5f02\u5e38\u8f6c\u6362\u4e3a\u4e1a\u52a1\u7ed3\u679c\uff0c\u4fdd\u8bc1\u7cfb\u7edf\u7a33\u5b9a\u6027"]}),"\n",(0,s.jsx)(n.h2,{id:"rest-api\u63a5\u53e3\u8bbe\u8ba1",children:"REST API\u63a5\u53e3\u8bbe\u8ba1"}),"\n",(0,s.jsx)(n.p,{children:"\u4e3a\u4e86\u63d0\u4f9b\u5b8c\u6574\u7684\u8bb8\u53ef\u8bc1\u7ba1\u7406\u529f\u80fd\uff0c\u8bbe\u8ba1\u4e86\u4e00\u5957RESTful API\u63a5\u53e3\u3002"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@RestController \n@RequestMapping("/api") \n@CrossOrigin(origins = "*") \npublic class LicenseController { \n \n    private static final Logger logger = LoggerFactory.getLogger(LicenseController.class); \n \n    @Autowired \n    private LicenseService licenseService; \n \n    @Autowired \n    private KeyManagementService keyManagementService; \n \n    @Autowired \n    private HardwareUtil hardwareUtil; \n \n    /** \n     * \u751f\u6210\u65b0\u7684RSA\u5bc6\u94a5\u5bf9 \n     */ \n    @PostMapping("/keys/generate") \n    public ResponseEntity<Map<String, Object>> generateKeys() { \n        try { \n            Map<String, String> keys = keyManagementService.generateKeyPair(); \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", true); \n            response.put("data", keys); \n            response.put("message", "\u5bc6\u94a5\u5bf9\u751f\u6210\u6210\u529f"); \n \n            logger.info("\u65b0\u7684RSA\u5bc6\u94a5\u5bf9\u751f\u6210\u6210\u529f"); \n            return ResponseEntity.ok(response); \n        } catch (Exception e) { \n            logger.error("\u5bc6\u94a5\u751f\u6210\u5931\u8d25", e); \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", false); \n            response.put("message", "\u5bc6\u94a5\u751f\u6210\u5931\u8d25: " + e.getMessage()); \n            return ResponseEntity.badRequest().body(response); \n        } \n    } \n \n    /** \n     * \u52a0\u8f7dRSA\u5bc6\u94a5 \n     */ \n    @PostMapping("/keys/load") \n    public ResponseEntity<Map<String, Object>> loadKeys(@RequestBody Map<String, String> request) { \n        try { \n            String privateKey = request.get("privateKey"); \n            String publicKey = request.get("publicKey"); \n \n            if (privateKey != null && !privateKey.trim().isEmpty()) { \n                keyManagementService.loadPrivateKey(privateKey); \n                logger.info("\u79c1\u94a5\u52a0\u8f7d\u6210\u529f"); \n            } \n \n            if (publicKey != null && !publicKey.trim().isEmpty()) { \n                keyManagementService.loadPublicKey(publicKey); \n                logger.info("\u516c\u94a5\u52a0\u8f7d\u6210\u529f"); \n            } \n \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", true); \n            response.put("message", "\u5bc6\u94a5\u52a0\u8f7d\u6210\u529f"); \n            return ResponseEntity.ok(response); \n        } catch (Exception e) { \n            logger.error("\u5bc6\u94a5\u52a0\u8f7d\u5931\u8d25", e); \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", false); \n            response.put("message", "\u5bc6\u94a5\u52a0\u8f7d\u5931\u8d25: " + e.getMessage()); \n            return ResponseEntity.badRequest().body(response); \n        } \n    } \n \n    /** \n     * \u751f\u6210\u8bb8\u53ef\u8bc1 \n     */ \n    @PostMapping("/license/generate") \n    public ResponseEntity<Map<String, Object>> generateLicense(@RequestBody License license) { \n        try { \n            if (!keyManagementService.isKeysLoaded()) { \n                Map<String, Object> response = new HashMap<>(); \n                response.put("success", false); \n                response.put("message", "\u8bf7\u5148\u751f\u6210\u6216\u52a0\u8f7dRSA\u5bc6\u94a5"); \n                return ResponseEntity.badRequest().body(response); \n            } \n \n            String licenseJson = licenseService.generateLicense( \n                license, keyManagementService.getCachedPrivateKey()); \n \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", true); \n            response.put("data", licenseJson); \n            response.put("message", "\u8bb8\u53ef\u8bc1\u751f\u6210\u6210\u529f"); \n \n            logger.info("\u4e3a {} \u751f\u6210\u8bb8\u53ef\u8bc1\u6210\u529f", license.getIssuedTo()); \n            return ResponseEntity.ok(response); \n        } catch (Exception e) { \n            logger.error("\u8bb8\u53ef\u8bc1\u751f\u6210\u5931\u8d25", e); \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", false); \n            response.put("message", "\u8bb8\u53ef\u8bc1\u751f\u6210\u5931\u8d25: " + e.getMessage()); \n            return ResponseEntity.badRequest().body(response); \n        } \n    } \n \n    /** \n     * \u9a8c\u8bc1\u8bb8\u53ef\u8bc1 \n     */ \n    @PostMapping("/license/verify") \n    public ResponseEntity<Map<String, Object>> verifyLicense(@RequestBody Map<String, String> request) { \n        try { \n            String licenseJson = request.get("licenseJson"); \n \n            if (licenseJson == null || licenseJson.trim().isEmpty()) { \n                Map<String, Object> response = new HashMap<>(); \n                response.put("success", false); \n                response.put("message", "\u8bb8\u53ef\u8bc1\u5185\u5bb9\u4e0d\u80fd\u4e3a\u7a7a"); \n                return ResponseEntity.badRequest().body(response); \n            } \n \n            if (!keyManagementService.isKeysLoaded()) { \n                Map<String, Object> response = new HashMap<>(); \n                response.put("success", false); \n                response.put("message", "\u8bf7\u5148\u52a0\u8f7d\u516c\u94a5"); \n                return ResponseEntity.badRequest().body(response); \n            } \n \n            LicenseService.LicenseVerifyResult result = licenseService.verifyLicense( \n                licenseJson, keyManagementService.getCachedPublicKey()); \n \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", result.isValid()); \n            response.put("message", result.getMessage()); \n            if (result.getLicense() != null) { \n                response.put("license", result.getLicense()); \n            } \n \n            logger.info("\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u5b8c\u6210\uff0c\u7ed3\u679c: {}", result.isValid() ? "\u901a\u8fc7" : "\u5931\u8d25"); \n            return ResponseEntity.ok(response); \n        } catch (Exception e) { \n            logger.error("\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u8fc7\u7a0b\u5f02\u5e38", e); \n            Map<String, Object> response = new HashMap<>(); \n            response.put("success", false); \n            response.put("message", "\u8bb8\u53ef\u8bc1\u9a8c\u8bc1\u5931\u8d25: " + e.getMessage()); \n            return ResponseEntity.badRequest().body(response); \n        } \n    } \n \n    /** \n     * \u83b7\u53d6\u5f53\u524d\u786c\u4ef6\u4fe1\u606f \n     */ \n    @GetMapping("/hardware/info") \n    public ResponseEntity<Map<String, Object>> getHardwareInfo() { \n        Map<String, Object> response = new HashMap<>(); \n        response.put("success", true); \n \n        Map<String, String> hardwareInfo = new HashMap<>(); \n        hardwareInfo.put("motherboardSerial", hardwareUtil.getMotherboardSerial()); \n        hardwareInfo.put("systemInfo", hardwareUtil.getSystemInfo()); \n        hardwareInfo.put("osName", System.getProperty("os.name")); \n        hardwareInfo.put("osVersion", System.getProperty("os.version")); \n        hardwareInfo.put("osArch", System.getProperty("os.arch")); \n \n        response.put("data", hardwareInfo); \n        logger.debug("\u786c\u4ef6\u4fe1\u606f\u67e5\u8be2\u5b8c\u6210"); \n        return ResponseEntity.ok(response); \n    } \n \n    /** \n     * \u68c0\u67e5\u5bc6\u94a5\u52a0\u8f7d\u72b6\u6001 \n     */ \n    @GetMapping("/keys/status") \n    public ResponseEntity<Map<String, Object>> getKeysStatus() { \n        Map<String, Object> response = new HashMap<>(); \n        response.put("success", true); \n        response.put("keysLoaded", keyManagementService.isKeysLoaded()); \n        response.put("hasPrivateKey", keyManagementService.getCachedPrivateKey() != null); \n        response.put("hasPublicKey", keyManagementService.getCachedPublicKey() != null); \n        return ResponseEntity.ok(response); \n    } \n} \n'})}),"\n",(0,s.jsx)(n.h2,{id:"\u5e94\u7528\u573a\u666f\u4e0e\u96c6\u6210",children:"\u5e94\u7528\u573a\u666f\u4e0e\u96c6\u6210"}),"\n",(0,s.jsx)(n.h4,{id:"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u683c\u5f0f",children:"\u8bb8\u53ef\u8bc1\u6587\u4ef6\u683c\u5f0f"}),"\n",(0,s.jsx)(n.p,{children:"\u751f\u6210\u7684\u8bb8\u53ef\u8bc1\u662f\u4e00\u4e2a\u6807\u51c6\u7684JSON\u6587\u4ef6\uff0c\u5305\u542b\u6240\u6709\u5fc5\u8981\u7684\u6388\u6743\u4fe1\u606f\u548c\u6570\u5b57\u7b7e\u540d\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'{ \n  "subject": "\u4f01\u4e1a\u7ba1\u7406\u7cfb\u7edf", \n  "issuedTo": "\u5317\u4eac\u67d0\u67d0\u79d1\u6280\u6709\u9650\u516c\u53f8", \n  "hardwareId": "BFEBFBFF000906E9", \n  "expireAt": "2025-12-31", \n  "features": ["USER_MANAGEMENT", "REPORT_EXPORT", "DATA_ANALYSIS"], \n  "signature": "MEUCIQDxxx...\u5b8c\u6574\u7684Base64\u7b7e\u540d" \n} \n'})}),"\n",(0,s.jsxs)(n.p,{children:["\u5b57\u6bb5\u8bf4\u660e ",(0,s.jsx)(n.strong,{children:"subject"}),"\uff1a\u8f6f\u4ef6\u4ea7\u54c1\u7684\u540d\u79f0\u6216\u6807\u8bc6"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"issuedTo"}),"\uff1a\u8bb8\u53ef\u8bc1\u7684\u6388\u6743\u5bf9\u8c61\uff08\u901a\u5e38\u662f\u516c\u53f8\u540d\u79f0\uff09"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"hardwareId"}),"\uff1a\u7ed1\u5b9a\u7684\u786c\u4ef6\u6307\u7eb9\uff08\u4e3b\u677f\u5e8f\u5217\u53f7\uff09"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"expireAt"}),"\uff1a\u8bb8\u53ef\u8bc1\u7684\u5230\u671f\u65e5\u671f"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"features"}),"\uff1a\u6388\u6743\u4f7f\u7528\u7684\u529f\u80fd\u6a21\u5757\u5217\u8868"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"signature"}),"\uff1a\u4f7f\u7528\u79c1\u94a5\u751f\u6210\u7684\u6570\u5b57\u7b7e\u540d"]}),"\n",(0,s.jsx)(n.h4,{id:"\u529f\u80fd\u6743\u9650\u63a7\u5236",children:"\u529f\u80fd\u6743\u9650\u63a7\u5236"}),"\n",(0,s.jsx)(n.p,{children:"\u57fa\u4e8e\u8bb8\u53ef\u8bc1\u7684\u529f\u80fd\u6743\u9650\u63a7\u5236\u53ef\u4ee5\u901a\u8fc7AOP\u5207\u9762\u548c\u81ea\u5b9a\u4e49\u6ce8\u89e3\u5b9e\u73b0"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'@Target({ElementType.METHOD, ElementType.TYPE}) \n@Retention(RetentionPolicy.RUNTIME) \n@Documented \npublic @interface RequireFeature { \n    /** \n     * \u9700\u8981\u7684\u529f\u80fd\u6743\u9650 \n     */ \n    String value(); \n \n    /** \n     * \u6743\u9650\u4e0d\u8db3\u65f6\u7684\u63d0\u793a\u4fe1\u606f \n     */ \n    String message() default "\u529f\u80fd\u672a\u6388\u6743"; \n} \n \n@Component \n@Aspect \n@Order(1) \npublic class LicenseFeatureAspect { \n \n    private static final Logger logger = LoggerFactory.getLogger(LicenseFeatureAspect.class); \n \n    @Around("@annotation(requireFeature)") \n    public Object checkFeaturePermission(ProceedingJoinPoint joinPoint, RequireFeature requireFeature) throws Throwable { \n \n        // \u83b7\u53d6\u5f53\u524d\u8bb8\u53ef\u8bc1\u4fe1\u606f \n        License currentLicense = LicenseContext.getCurrentLicense(); \n \n        if (currentLicense == null) { \n            logger.warn("\u8bbf\u95ee\u9700\u8981\u6388\u6743\u7684\u529f\u80fd\uff0c\u4f46\u672a\u627e\u5230\u6709\u6548\u8bb8\u53ef\u8bc1: {}", requireFeature.value()); \n            throw new LicenseException("\u7cfb\u7edf\u672a\u627e\u5230\u6709\u6548\u8bb8\u53ef\u8bc1\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458"); \n        } \n \n        // \u68c0\u67e5\u529f\u80fd\u6743\u9650 \n        if (currentLicense.getFeatures() == null || \n            !currentLicense.getFeatures().contains(requireFeature.value())) { \n \n            logger.warn("\u529f\u80fd\u6743\u9650\u4e0d\u8db3 - \u7528\u6237: {}, \u9700\u8981\u6743\u9650: {}, \u62e5\u6709\u6743\u9650: {}", \n                       currentLicense.getIssuedTo(), \n                       requireFeature.value(), \n                       currentLicense.getFeatures()); \n \n            throw new LicenseException(requireFeature.message() + ": " + requireFeature.value()); \n        } \n \n        logger.debug("\u529f\u80fd\u6743\u9650\u9a8c\u8bc1\u901a\u8fc7: {}", requireFeature.value()); \n        return joinPoint.proceed(); \n    } \n} \n \n// \u4f7f\u7528\u793a\u4f8b \n@RestController \n@RequestMapping("/api/report") \npublic class ReportController { \n \n    @GetMapping("/export") \n    @RequireFeature("REPORT_EXPORT") \n    public ResponseEntity<byte[]> exportReport(@RequestParam String format) { \n        // \u62a5\u8868\u5bfc\u51fa\u529f\u80fd\u5b9e\u73b0 \n        byte[] reportData = generateReport(format); \n \n        HttpHeaders headers = new HttpHeaders(); \n        headers.add("Content-Disposition", "attachment; filename=report." + format); \n \n        return ResponseEntity.ok() \n                .headers(headers) \n                .body(reportData); \n    } \n \n    @PostMapping("/schedule") \n    @RequireFeature("REPORT_SCHEDULE") \n    public ResponseEntity<String> scheduleReport(@RequestBody ScheduleRequest request) { \n        // \u5b9a\u65f6\u62a5\u8868\u529f\u80fd\u5b9e\u73b0 \n        scheduleReportJob(request); \n        return ResponseEntity.ok("\u5b9a\u65f6\u62a5\u8868\u521b\u5efa\u6210\u529f"); \n    } \n} \n'})}),"\n",(0,s.jsx)(n.h3,{id:"web\u7ba1\u7406\u754c\u9762",children:"Web\u7ba1\u7406\u754c\u9762"}),"\n",(0,s.jsx)(n.p,{children:"\u672cDEMO\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684Web\u7ba1\u7406\u754c\u9762\uff0c\u5177\u5907\u4ee5\u4e0b\u529f\u80fd\uff1a"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u786c\u4ef6\u4fe1\u606f\u5c55\u793a"}),"\uff1a\u5b9e\u65f6\u663e\u793a\u5f53\u524d\u8bbe\u5907\u7684\u786c\u4ef6\u6307\u7eb9\u548c\u7cfb\u7edf\u4fe1\u606f"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u5bc6\u94a5\u7ba1\u7406"}),"\uff1a\u751f\u6210\u65b0\u7684RSA\u5bc6\u94a5\u5bf9\uff0c\u6216\u52a0\u8f7d\u73b0\u6709\u5bc6\u94a5"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u8bb8\u53ef\u8bc1\u751f\u6210"}),"\uff1a\u521b\u5efa\u5305\u542b\u5404\u79cd\u6743\u9650\u7684\u8bb8\u53ef\u8bc1\u6587\u4ef6"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u8bb8\u53ef\u8bc1\u9a8c\u8bc1"}),"\uff1a\u9a8c\u8bc1\u8bb8\u53ef\u8bc1\u7684\u6709\u6548\u6027\u548c\u6743\u9650\u8303\u56f4"]}),"\n",(0,s.jsx)(n.p,{children:"\u4e3b\u8981\u7684\u524d\u7aef\u4ea4\u4e92\u903b\u8f91\uff1a"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// API\u57fa\u7840\u914d\u7f6e \nconst API_BASE = 'http://localhost:8080/api'; \n \n// \u9875\u9762\u521d\u59cb\u5316 \ndocument.addEventListener('DOMContentLoaded', function() { \n    loadHardwareInfo(); \n    checkKeyStatus(); \n    setDefaultExpireDate(); \n}); \n \n// \u751f\u6210\u8bb8\u53ef\u8bc1 \nasync function generateLicense() { \n    try { \n        // \u6536\u96c6\u8868\u5355\u6570\u636e \n        const licenseData = { \n            subject: document.getElementById('subject').value.trim(), \n            issuedTo: document.getElementById('issuedTo').value.trim(), \n            expireAt: document.getElementById('expireAt').value, \n            features: document.getElementById('features').value.trim() \n                .split(',').map(f => f.trim()).filter(f => f) \n        }; \n \n        // \u6570\u636e\u9a8c\u8bc1 \n        if (!licenseData.subject || !licenseData.issuedTo || !licenseData.expireAt) { \n            showToast('\u8b66\u544a', '\u8bf7\u586b\u5199\u6240\u6709\u5fc5\u586b\u5b57\u6bb5', 'warning'); \n            return; \n        } \n \n        showToast('\u5904\u7406\u4e2d', '\u6b63\u5728\u751f\u6210\u8bb8\u53ef\u8bc1...', 'info'); \n \n        // \u8c03\u7528API\u751f\u6210\u8bb8\u53ef\u8bc1 \n        const response = await fetch(`${API_BASE}/license/generate`, { \n            method: 'POST', \n            headers: { 'Content-Type': 'application/json' }, \n            body: JSON.stringify(licenseData) \n        }); \n \n        const result = await response.json(); \n \n        if (result.success) { \n            document.getElementById('generatedLicense').value = result.data; \n            showToast('\u6210\u529f', '\u8bb8\u53ef\u8bc1\u751f\u6210\u6210\u529f', 'success'); \n        } else { \n            showToast('\u9519\u8bef', result.message, 'error'); \n        } \n    } catch (error) { \n        console.error('\u751f\u6210\u8bb8\u53ef\u8bc1\u5931\u8d25:', error); \n        showToast('\u9519\u8bef', '\u7f51\u7edc\u8fde\u63a5\u5931\u8d25', 'error'); \n    } \n} \n \n// \u9a8c\u8bc1\u8bb8\u53ef\u8bc1 \nasync function verifyLicense() { \n    try { \n        const licenseJson = document.getElementById('licenseToVerify').value.trim(); \n \n        if (!licenseJson) { \n            showToast('\u8b66\u544a', '\u8bf7\u8f93\u5165\u8bb8\u53ef\u8bc1\u5185\u5bb9', 'warning'); \n            return; \n        } \n \n        showToast('\u5904\u7406\u4e2d', '\u6b63\u5728\u9a8c\u8bc1\u8bb8\u53ef\u8bc1...', 'info'); \n \n        const response = await fetch(`${API_BASE}/license/verify`, { \n            method: 'POST', \n            headers: { 'Content-Type': 'application/json' }, \n            body: JSON.stringify({ licenseJson }) \n        }); \n \n        const result = await response.json(); \n        displayVerificationResult(result); \n \n    } catch (error) { \n        console.error('\u9a8c\u8bc1\u8bb8\u53ef\u8bc1\u5931\u8d25:', error); \n        showToast('\u9519\u8bef', '\u9a8c\u8bc1\u8fc7\u7a0b\u51fa\u9519', 'error'); \n    } \n} \n"})}),"\n",(0,s.jsx)(n.h2,{id:"\u603b\u7ed3",children:"\u603b\u7ed3"}),"\n",(0,s.jsx)(n.p,{children:"\u672c\u6587\u4ecb\u7ecd\u4e86\u4e00\u5957\u57fa\u4e8eSpring Boot + RSA2048\u7684\u8bb8\u53ef\u8bc1\u63a7\u5236\u7cfb\u7edf\u5b9e\u73b0\u65b9\u6848\uff0c\u5305\u542b\u786c\u4ef6\u6307\u7eb9\u83b7\u53d6\u3001\u6570\u5b57\u7b7e\u540d\u9a8c\u8bc1\u3001\u529f\u80fd\u6743\u9650\u63a7\u5236\u7b49\u6838\u5fc3\u529f\u80fd\uff0c\u652f\u6301\u8de8\u5e73\u53f0\u90e8\u7f72\uff0c\u63d0\u4f9b\u5b8c\u6574\u7684Web\u793a\u4f8b\u754c\u9762\uff0c\u9002\u7528\u4e8e\u4f01\u4e1a\u8f6f\u4ef6\u7684\u5546\u4e1a\u5316\u6388\u6743\u63a7\u5236\u3002"})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);