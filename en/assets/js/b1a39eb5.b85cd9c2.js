"use strict";(self.webpackChunkwblog=self.webpackChunkwblog||[]).push([[9190],{2027:(e,n,t)=>{t.d(n,{A:()=>y});var r=t(58101),i=t(63394),s=t(3e4),o=t(55234),l=t(26735),d=t(76605),a=t(62418),h=t(99469);function c(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??function(e){return c(e).map((({props:{value:e,label:n,attributes:t,default:r}})=>({value:e,label:n,attributes:t,default:r})))}(t);return function(e){const n=(0,a.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function u({value:e,tabValues:n}){return n.some((n=>n.value===e))}function x({queryString:e=!1,groupId:n}){const t=(0,o.W6)(),i=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(t.location.search);n.set(i,e),t.replace({...t.location,search:n.toString()})}),[i,t])]}function j(e){const{defaultValue:n,queryString:t=!1,groupId:i}=e,s=p(e),[o,d]=(0,r.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!u({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find((e=>e.default))??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:s}))),[a,c]=x({queryString:t,groupId:i}),[j,m]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,i]=(0,h.Dv)(n);return[t,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:i}),f=(()=>{const e=a??j;return u({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{f&&d(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!u({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);d(e),c(e),m(e)}),[c,m,s]),tabValues:s}}var m=t(46893);const f={tabList:"tabList_db3s",tabItem:"tabItem_zZMa"};var g=t(25105);function b({className:e,block:n,selectedValue:t,selectValue:r,tabValues:o}){const l=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.a_)(),a=e=>{const n=e.currentTarget,i=l.indexOf(n),s=o[i].value;s!==t&&(d(n),r(s))},h=e=>{let n=null;switch(e.key){case"Enter":a(e);break;case"ArrowRight":{const t=l.indexOf(e.currentTarget)+1;n=l[t]??l[0];break}case"ArrowLeft":{const t=l.indexOf(e.currentTarget)-1;n=l[t]??l[l.length-1];break}}n?.focus()};return(0,g.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":n},e),children:o.map((({value:e,label:n,attributes:r})=>(0,g.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:h,onClick:a,...r,className:(0,i.A)("tabs__item",f.tabItem,r?.className,{"tabs__item--active":t===e}),children:n??e},e)))})}function v({lazy:e,children:n,selectedValue:t}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===t));return e?(0,r.cloneElement)(e,{className:(0,i.A)("margin-top--md",e.props.className)}):null}return(0,g.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==t})))})}function E(e){const n=j(e);return(0,g.jsxs)("div",{className:(0,i.A)("tabs-container",f.tabList),children:[(0,g.jsx)(b,{...n,...e}),(0,g.jsx)(v,{...n,...e})]})}function y(e){const n=(0,m.A)();return(0,g.jsx)(E,{...e,children:c(e.children)},String(n))}},8299:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"leetcode/LeetCode\u9898\u89e30100~0199","title":"LeetCode\u9898\u89e30100~0199","description":"100. Same Tree","source":"@site/docs/book/leetcode/LeetCode\u9898\u89e30100~0199.md","sourceDirName":"leetcode","slug":"/leetcode/leetcode01","permalink":"/en/book/leetcode/leetcode01","draft":false,"unlisted":false,"tags":[],"version":"current","lastUpdatedAt":1749383885000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"slug":"leetcode01"},"sidebar":"tutorialSidebar","previous":{"title":"LeetCode\u9898\u89e30001~0099","permalink":"/en/book/leetcode/leetcode00"}}');var i=t(25105),s=t(69578);t(2027),t(54247);const o={sidebar_position:2,slug:"leetcode01"},l="LeetCode\u9898\u89e30100~0199",d={},a=[{value:"100. Same Tree",id:"100-same-tree",level:2},{value:"\u9898\u76ee",id:"\u9898\u76ee",level:4},{value:"\u9898\u76ee\u5927\u610f",id:"\u9898\u76ee\u5927\u610f",level:4},{value:"\u89e3\u9898\u601d\u8def",id:"\u89e3\u9898\u601d\u8def",level:4},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:4},{value:"\u9898\u76ee #",id:"\u9898\u76ee-",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f-",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def-",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801-",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--1",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--1",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--1",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--1",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--2",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--2",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--2",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--2",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--3",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--3",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--3",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--3",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--4",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--4",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--4",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--4",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--5",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--5",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--5",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--5",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--6",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--6",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--6",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--6",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--7",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--7",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--7",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--7",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--8",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--8",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--8",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--8",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--9",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--9",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--9",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--9",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--10",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--10",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--10",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--10",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--11",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--11",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--11",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--11",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--12",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--12",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--12",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--12",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--13",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--13",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--13",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--13",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--14",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--14",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--14",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--14",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--15",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--15",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--15",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--15",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--16",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--16",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--16",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--16",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--17",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--17",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--17",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--17",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--18",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--18",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--18",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--18",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--19",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--19",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--19",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--19",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--20",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--20",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--20",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--20",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--21",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--21",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--21",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--21",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--22",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--22",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--22",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--22",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--23",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--23",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--23",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--23",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--24",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--24",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--24",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--24",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--25",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--25",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--25",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--25",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--26",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--26",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--26",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--26",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--27",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--27",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--27",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--27",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--28",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--28",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--28",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--28",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--29",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--29",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--29",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--29",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--30",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--30",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--30",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--30",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--31",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--31",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--31",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--31",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--32",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--32",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--32",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--32",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--33",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--33",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--33",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--33",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--34",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--34",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--34",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--34",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--35",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--35",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--35",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--35",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--36",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--36",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--36",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--36",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--37",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--37",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--37",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--37",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--38",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--38",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--38",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--38",level:2},{value:"\u9898\u76ee #",id:"\u9898\u76ee--39",level:2},{value:"\u9898\u76ee\u5927\u610f #",id:"\u9898\u76ee\u5927\u610f--39",level:2},{value:"\u89e3\u9898\u601d\u8def #",id:"\u89e3\u9898\u601d\u8def--39",level:2},{value:"\u4ee3\u7801 #",id:"\u4ee3\u7801--39",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"leetcode\u9898\u89e301000199",children:"LeetCode\u9898\u89e30100~0199"})}),"\n","\n",(0,i.jsx)(n.h2,{id:"100-same-tree",children:"100. Same Tree"}),"\n",(0,i.jsx)(n.h4,{id:"\u9898\u76ee",children:"\u9898\u76ee"}),"\n",(0,i.jsx)(n.p,{children:"Given two binary trees, write a function to check if they are the same or not."}),"\n",(0,i.jsx)(n.p,{children:"Two binary trees are considered the same if they are structurally identical and the nodes have the same value."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input:     1         1\n          / \\       / \\\n         2   3     2   3\n\n        [1,2,3],   [1,2,3]\n\nOutput: true\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input:     1         1\n          /           \\\n         2             2\n\n        [1,2],     [1,null,2]\n\nOutput: false\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 3"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input:     1         1\n          / \\       / \\\n         2   1     1   2\n\n        [1,2,1],   [1,1,2]\n\nOutput: false\n"})}),"\n",(0,i.jsx)(n.h4,{id:"\u9898\u76ee\u5927\u610f",children:"\u9898\u76ee\u5927\u610f"}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e00\u9898\u8981\u6c42\u5224\u65ad 2 \u9897\u6811\u662f\u5426\u662f\u5b8c\u5168\u76f8\u7b49\u7684\u3002"}),"\n",(0,i.jsx)(n.h4,{id:"\u89e3\u9898\u601d\u8def",children:"\u89e3\u9898\u601d\u8def"}),"\n",(0,i.jsx)(n.p,{children:"\u9012\u5f52\u5224\u65ad\u5373\u53ef\u3002"}),"\n",(0,i.jsx)(n.h4,{id:"\u4ee3\u7801",children:"\u4ee3\u7801"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n\tif p == nil && q == nil {\n\t\treturn true\n\t} else if p != nil && q != nil {\n\t\tif p.Val != q.Val {\n\t\t\treturn false\n\t\t}\n\t\treturn isSameTree(p.Left, q.Left) && isSameTree(p.Right, q.Right)\n\t} else {\n\t\treturn false\n\t}\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"101-symmetric-tree-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/symmetric-tree/",children:"101. Symmetric Tree"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/#101-symmetric-treehttpsleetcodecomproblemssymmetric-tree",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee-",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center)."}),"\n",(0,i.jsx)(n.p,{children:"For example, this binary tree [1,2,2,3,4,4,3] is symmetric:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    1\n   / \\\n  2   2\n / \\ / \\\n3  4 4  3\n"})}),"\n",(0,i.jsx)(n.p,{children:"But the following [1,2,2,null,3,null,3] is not:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    1\n   / \\\n  2   2\n   \\   \\\n   3    3\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Bonus points if you could solve it both recursively and iteratively."}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f-",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e00\u9898\u8981\u6c42\u5224\u65ad 2 \u9897\u6811\u662f\u5426\u662f\u5de6\u53f3\u5bf9\u79f0\u7684\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def-",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u9053\u9898\u662f\u51e0\u9053\u9898\u7684\u7efc\u5408\u9898\u3002\u5c06\u6839\u8282\u70b9\u7684\u5de6\u5b57\u6570\u53cd\u8f6c\u4e8c\u53c9\u6811\uff0c\u7136\u540e\u518d\u548c\u6839\u8282\u70b9\u7684\u53f3\u8282\u70b9\u8fdb\u884c\u6bd4\u8f83\uff0c\u662f\u5426\u5b8c\u5168\u76f8\u7b49\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u53cd\u8f6c\u4e8c\u53c9\u6811\u662f\u7b2c 226 \u9898\u3002\u5224\u65ad 2 \u9897\u6811\u662f\u5426\u5b8c\u5168\u76f8\u7b49\u662f\u7b2c 100 \u9898\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801-",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0101.Symmetric-Tree/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// TreeNode define\ntype TreeNode = structures.TreeNode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00 dfs\nfunc isSymmetric(root *TreeNode) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\treturn isMirror(root.Left, root.Right)\n}\n\nfunc isMirror(left *TreeNode, right *TreeNode) bool {\n\tif left == nil && right == nil {\n\t\treturn true\n\t}\n\tif left == nil || right == nil {\n\t\treturn false\n\t}\n\treturn (left.Val == right.Val) && isMirror(left.Left, right.Right) && isMirror(left.Right, right.Left)\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc isSymmetric1(root *TreeNode) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\treturn isSameTree(invertTree(root.Left), root.Right)\n}\n\nfunc isSameTree(p *TreeNode, q *TreeNode) bool {\n\tif p == nil && q == nil {\n\t\treturn true\n\t} else if p != nil && q != nil {\n\t\tif p.Val != q.Val {\n\t\t\treturn false\n\t\t}\n\t\treturn isSameTree(p.Left, q.Left) && isSameTree(p.Right, q.Right)\n\t} else {\n\t\treturn false\n\t}\n}\n\nfunc invertTree(root *TreeNode) *TreeNode {\n\tif root == nil {\n\t\treturn nil\n\t}\n\tinvertTree(root.Left)\n\tinvertTree(root.Right)\n\troot.Left, root.Right = root.Right, root.Left\n\treturn root\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"102-binary-tree-level-order-traversal-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal/",children:"102. Binary Tree Level Order Traversal"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/#102-binary-tree-level-order-traversalhttpsleetcodecomproblemsbinary-tree-level-order-traversal",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--1",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, return the level order traversal of its nodes\u2019 values. (ie, from left to right, level by level)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Given binary tree [3,9,20,null,null,15,7],"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsx)(n.p,{children:"return its level order traversal as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[\n  [3],\n  [9,20],\n  [15,7]\n]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--1",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u5c42\u5e8f\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u4e00\u9897\u6811\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--1",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7528\u4e00\u4e2a\u961f\u5217\u5373\u53ef\u5b9e\u73b0\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--1",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0102.Binary-Tree-Level-Order-Traversal/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// TreeNode define\ntype TreeNode = structures.TreeNode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00 BFS\nfunc levelOrder(root *TreeNode) [][]int {\n\tif root == nil {\n\t\treturn [][]int{}\n\t}\n\tqueue := []*TreeNode{root}\n\tres := make([][]int, 0)\n\tfor len(queue) > 0 {\n\t\tl := len(queue)\n\t\ttmp := make([]int, 0, l)\n\t\tfor i := 0; i < l; i++ {\n\t\t\tif queue[i].Left != nil {\n\t\t\t\tqueue = append(queue, queue[i].Left)\n\t\t\t}\n\t\t\tif queue[i].Right != nil {\n\t\t\t\tqueue = append(queue, queue[i].Right)\n\t\t\t}\n\t\t\ttmp = append(tmp, queue[i].Val)\n\t\t}\n\t\tqueue = queue[l:]\n\t\tres = append(res, tmp)\n\t}\n\treturn res\n}\n\n// \u89e3\u6cd5\u4e8c DFS\nfunc levelOrder1(root *TreeNode) [][]int {\n\tvar res [][]int\n\tvar dfsLevel func(node *TreeNode, level int)\n\tdfsLevel = func(node *TreeNode, level int) {\n\t\tif node == nil {\n\t\t\treturn\n\t\t}\n\t\tif len(res) == level {\n\t\t\tres = append(res, []int{node.Val})\n\t\t} else {\n\t\t\tres[level] = append(res[level], node.Val)\n\t\t}\n\t\tdfsLevel(node.Left, level+1)\n\t\tdfsLevel(node.Right, level+1)\n\t}\n\tdfsLevel(root, 0)\n\treturn res\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"103-binary-tree-zigzag-level-order-traversal-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/",children:"103. Binary Tree Zigzag Level Order Traversal"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/#103-binary-tree-zigzag-level-order-traversalhttpsleetcodecomproblemsbinary-tree-zigzag-level-order-traversal",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--2",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, return the zigzag level order traversal of its nodes\u2019 values. (ie, from left to right, then right to left for the next level and alternate between)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For Example"}),": Given binary tree [3,9,20,null,null,15,7],"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsx)(n.p,{children:"return its zigzag level order traversal as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[\n  [3],\n  [20,9],\n  [15,7]\n]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--2",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u7167 Z \u5b57\u578b\u5c42\u5e8f\u904d\u5386\u4e00\u68f5\u6811\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--2",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6309\u5c42\u5e8f\u4ece\u4e0a\u5230\u4e0b\u904d\u5386\u4e00\u9897\u6811\uff0c\u4f46\u662f\u6bcf\u4e00\u5c42\u7684\u987a\u5e8f\u662f\u76f8\u4e92\u53cd\u8f6c\u7684\uff0c\u5373\u4e0a\u4e00\u5c42\u662f\u4ece\u5de6\u5f80\u53f3\uff0c\u4e0b\u4e00\u5c42\u5c31\u662f\u4ece\u53f3\u5f80\u5de6\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\u7528\u4e00\u4e2a\u961f\u5217\u5373\u53ef\u5b9e\u73b0\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u7b2c 102 \u9898\u548c\u7b2c 107 \u9898\u90fd\u662f\u6309\u5c42\u5e8f\u904d\u5386\u7684\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--2",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0103.Binary-Tree-Zigzag-Level-Order-Traversal/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// TreeNode define\ntype TreeNode = structures.TreeNode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00\nfunc zigzagLevelOrder(root *TreeNode) [][]int {\n\tif root == nil {\n\t\treturn [][]int{}\n\t}\n\tqueue := []*TreeNode{}\n\tqueue = append(queue, root)\n\tcurNum, nextLevelNum, res, tmp, curDir := 1, 0, [][]int{}, []int{}, 0\n\tfor len(queue) != 0 {\n\t\tif curNum > 0 {\n\t\t\tnode := queue[0]\n\t\t\tif node.Left != nil {\n\t\t\t\tqueue = append(queue, node.Left)\n\t\t\t\tnextLevelNum++\n\t\t\t}\n\t\t\tif node.Right != nil {\n\t\t\t\tqueue = append(queue, node.Right)\n\t\t\t\tnextLevelNum++\n\t\t\t}\n\t\t\tcurNum--\n\t\t\ttmp = append(tmp, node.Val)\n\t\t\tqueue = queue[1:]\n\t\t}\n\t\tif curNum == 0 {\n\t\t\tif curDir == 1 {\n\t\t\t\tfor i, j := 0, len(tmp)-1; i < j; i, j = i+1, j-1 {\n\t\t\t\t\ttmp[i], tmp[j] = tmp[j], tmp[i]\n\t\t\t\t}\n\t\t\t}\n\t\t\tres = append(res, tmp)\n\t\t\tcurNum = nextLevelNum\n\t\t\tnextLevelNum = 0\n\t\t\ttmp = []int{}\n\t\t\tif curDir == 0 {\n\t\t\t\tcurDir = 1\n\t\t\t} else {\n\t\t\t\tcurDir = 0\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n\n// \u89e3\u6cd5\u4e8c \u9012\u5f52\nfunc zigzagLevelOrder0(root *TreeNode) [][]int {\n\tvar res [][]int\n\tsearch(root, 0, &res)\n\treturn res\n}\n\nfunc search(root *TreeNode, depth int, res *[][]int) {\n\tif root == nil {\n\t\treturn\n\t}\n\tfor len(*res) < depth+1 {\n\t\t*res = append(*res, []int{})\n\t}\n\tif depth%2 == 0 {\n\t\t(*res)[depth] = append((*res)[depth], root.Val)\n\t} else {\n\t\t(*res)[depth] = append([]int{root.Val}, (*res)[depth]...)\n\t}\n\tsearch(root.Left, depth+1, res)\n\tsearch(root.Right, depth+1, res)\n}\n\n// \u89e3\u6cd5\u4e09 BFS\nfunc zigzagLevelOrder1(root *TreeNode) [][]int {\n\tres := [][]int{}\n\tif root == nil {\n\t\treturn res\n\t}\n\tq := []*TreeNode{root}\n\tsize, i, j, lay, tmp, flag := 0, 0, 0, []int{}, []*TreeNode{}, false\n\tfor len(q) > 0 {\n\t\tsize = len(q)\n\t\ttmp = []*TreeNode{}\n\t\tlay = make([]int, size)\n\t\tj = size - 1\n\t\tfor i = 0; i < size; i++ {\n\t\t\troot = q[0]\n\t\t\tq = q[1:]\n\t\t\tif !flag {\n\t\t\t\tlay[i] = root.Val\n\t\t\t} else {\n\t\t\t\tlay[j] = root.Val\n\t\t\t\tj--\n\t\t\t}\n\t\t\tif root.Left != nil {\n\t\t\t\ttmp = append(tmp, root.Left)\n\t\t\t}\n\t\t\tif root.Right != nil {\n\t\t\t\ttmp = append(tmp, root.Right)\n\t\t\t}\n\n\t\t}\n\t\tres = append(res, lay)\n\t\tflag = !flag\n\t\tq = tmp\n\t}\n\treturn res\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"104-maximum-depth-of-binary-tree-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/maximum-depth-of-binary-tree/",children:"104. Maximum Depth of Binary Tree"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/#104-maximum-depth-of-binary-treehttpsleetcodecomproblemsmaximum-depth-of-binary-tree",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--3",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, find its maximum depth."}),"\n",(0,i.jsx)(n.p,{children:"The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": A leaf is a node with no children."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Given binary tree [3,9,20,null,null,15,7],"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsx)(n.p,{children:"return its depth = 3."}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--3",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u8981\u6c42\u8f93\u51fa\u4e00\u68f5\u6811\u7684\u6700\u5927\u9ad8\u5ea6\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--3",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e00\u9898\u9012\u5f52\u904d\u5386\u5c31\u53ef\uff0c\u904d\u5386\u6839\u8282\u70b9\u7684\u5de6\u5b69\u5b50\u7684\u9ad8\u5ea6\u548c\u6839\u8282\u70b9\u53f3\u5b69\u5b50\u7684\u9ad8\u5ea6\uff0c\u53d6\u51fa\u4e24\u8005\u7684\u6700\u5927\u503c\u518d\u52a0\u4e00\u5373\u4e3a\u603b\u9ad8\u5ea6\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--3",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0104.Maximum-Depth-of-Binary-Tree/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn max(maxDepth(root.Left), maxDepth(root.Right)) + 1\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"105-construct-binary-tree-from-preorder-and-inorder-traversal-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/",children:"105. Construct Binary Tree from Preorder and Inorder Traversal"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/#105-construct-binary-tree-from-preorder-and-inorder-traversalhttpsleetcodecomproblemsconstruct-binary-tree-from-preorder-and-inorder-traversal",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--4",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given preorder and inorder traversal of a tree, construct the binary tree."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":You"," may assume that duplicates do not exist in the tree."]}),"\n",(0,i.jsx)(n.p,{children:"For example, given"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"preorder = [3,9,20,15,7]\ninorder = [9,3,15,20,7]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return the following binary tree:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--4",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6839\u636e\u4e00\u68f5\u6811\u7684\u524d\u5e8f\u904d\u5386\u4e0e\u4e2d\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--4",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7ed9\u51fa 2 \u4e2a\u6570\u7ec4\uff0c\u6839\u636e preorder \u548c inorder \u6570\u7ec4\u6784\u9020\u4e00\u9897\u6811\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5229\u7528\u9012\u5f52\u601d\u60f3\uff0c\u4ece preorder \u53ef\u4ee5\u5f97\u5230\u6839\u8282\u70b9\uff0c\u4ece inorder \u4e2d\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u5373\u4e3a\u6839\u8282\u70b9\u3002\u4e0d\u65ad\u7684\u9012\u5f52\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u751f\u6210\u5b8c\u6210\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--4",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0105.Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// TreeNode define\ntype TreeNode = structures.TreeNode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00, \u76f4\u63a5\u4f20\u5165\u9700\u8981\u7684 slice \u8303\u56f4\u4f5c\u4e3a\u8f93\u5165, \u53ef\u4ee5\u907f\u514d\u7533\u8bf7\u5bf9\u5e94 inorder \u7d22\u5f15\u7684\u5185\u5b58, \u5185\u5b58\u4f7f\u7528(leetcode test case) 4.7MB -> 4.3MB.\nfunc buildTree(preorder []int, inorder []int) *TreeNode {\n\tif len(preorder) == 0 {\n\t\treturn nil\n\t}\n\troot := &TreeNode{Val: preorder[0]}\n\tfor pos, node := range inorder {\n\t\tif node == root.Val {\n\t\t\troot.Left = buildTree(preorder[1:pos+1], inorder[:pos])\n\t\t\troot.Right = buildTree(preorder[pos+1:], inorder[pos+1:])\n\t\t}\n\t}\n\treturn root\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc buildTree1(preorder []int, inorder []int) *TreeNode {\n\tinPos := make(map[int]int)\n\tfor i := 0; i < len(inorder); i++ {\n\t\tinPos[inorder[i]] = i\n\t}\n\treturn buildPreIn2TreeDFS(preorder, 0, len(preorder)-1, 0, inPos)\n}\n\nfunc buildPreIn2TreeDFS(pre []int, preStart int, preEnd int, inStart int, inPos map[int]int) *TreeNode {\n\tif preStart > preEnd {\n\t\treturn nil\n\t}\n\troot := &TreeNode{Val: pre[preStart]}\n\trootIdx := inPos[pre[preStart]]\n\tleftLen := rootIdx - inStart\n\troot.Left = buildPreIn2TreeDFS(pre, preStart+1, preStart+leftLen, inStart, inPos)\n\troot.Right = buildPreIn2TreeDFS(pre, preStart+leftLen+1, preEnd, rootIdx+1, inPos)\n\treturn root\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"106-construct-binary-tree-from-inorder-and-postorder-traversal-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/",children:"106. Construct Binary Tree from Inorder and Postorder Traversal"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/#106-construct-binary-tree-from-inorder-and-postorder-traversalhttpsleetcodecomproblemsconstruct-binary-tree-from-inorder-and-postorder-traversal",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--5",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given inorder and postorder traversal of a tree, construct the binary tree."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": You may assume that duplicates do not exist in the tree."]}),"\n",(0,i.jsx)(n.p,{children:"For example, given"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"inorder = [9,3,15,20,7]\npostorder = [9,15,7,20,3]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return the following binary tree:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--5",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6839\u636e\u4e00\u68f5\u6811\u7684\u4e2d\u5e8f\u904d\u5386\u4e0e\u540e\u5e8f\u904d\u5386\u6784\u9020\u4e8c\u53c9\u6811\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6ce8\u610f: \u4f60\u53ef\u4ee5\u5047\u8bbe\u6811\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--5",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7ed9\u51fa 2 \u4e2a\u6570\u7ec4\uff0c\u6839\u636e inorder \u548c postorder \u6570\u7ec4\u6784\u9020\u4e00\u9897\u6811\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5229\u7528\u9012\u5f52\u601d\u60f3\uff0c\u4ece postorder \u53ef\u4ee5\u5f97\u5230\u6839\u8282\u70b9\uff0c\u4ece inorder \u4e2d\u5f97\u5230\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811\u3002\u53ea\u5269\u4e00\u4e2a\u8282\u70b9\u7684\u65f6\u5019\u5373\u4e3a\u6839\u8282\u70b9\u3002\u4e0d\u65ad\u7684\u9012\u5f52\u76f4\u5230\u6240\u6709\u7684\u6811\u90fd\u751f\u6210\u5b8c\u6210\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--5",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0106.Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// TreeNode define\ntype TreeNode = structures.TreeNode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00, \u76f4\u63a5\u4f20\u5165\u9700\u8981\u7684 slice \u8303\u56f4\u4f5c\u4e3a\u8f93\u5165, \u53ef\u4ee5\u907f\u514d\u7533\u8bf7\u5bf9\u5e94 inorder \u7d22\u5f15\u7684\u5185\u5b58, \u5185\u5b58\u4f7f\u7528(leetcode test case) 4.7MB -> 4.3MB.\nfunc buildTree(inorder []int, postorder []int) *TreeNode {\n\tpostorderLen := len(postorder)\n\tif len(inorder) == 0 {\n\t\treturn nil\n\t}\n\troot := &TreeNode{Val: postorder[postorderLen-1]}\n\tpostorder = postorder[:postorderLen-1]\n\tfor pos, node := range inorder {\n\t\tif node == root.Val {\n\t\t\troot.Left = buildTree(inorder[:pos], postorder[:len(inorder[:pos])])\n\t\t\troot.Right = buildTree(inorder[pos+1:], postorder[len(inorder[:pos]):])\n\t\t}\n\t}\n\treturn root\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc buildTree1(inorder []int, postorder []int) *TreeNode {\n\tinPos := make(map[int]int)\n\tfor i := 0; i < len(inorder); i++ {\n\t\tinPos[inorder[i]] = i\n\t}\n\treturn buildInPos2TreeDFS(postorder, 0, len(postorder)-1, 0, inPos)\n}\n\nfunc buildInPos2TreeDFS(post []int, postStart int, postEnd int, inStart int, inPos map[int]int) *TreeNode {\n\tif postStart > postEnd {\n\t\treturn nil\n\t}\n\troot := &TreeNode{Val: post[postEnd]}\n\trootIdx := inPos[post[postEnd]]\n\tleftLen := rootIdx - inStart\n\troot.Left = buildInPos2TreeDFS(post, postStart, postStart+leftLen-1, inStart, inPos)\n\troot.Right = buildInPos2TreeDFS(post, postStart+leftLen, postEnd-1, rootIdx+1, inPos)\n\treturn root\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"107-binary-tree-level-order-traversal-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-level-order-traversal-ii/",children:"107. Binary Tree Level Order Traversal II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/#107-binary-tree-level-order-traversal-iihttpsleetcodecomproblemsbinary-tree-level-order-traversal-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--6",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, return the bottom-up level order traversal of its nodes\u2019 values. (ie, from left to right, level by level from leaf to root)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For Example"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Given binary tree [3,9,20,null,null,15,7],"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsx)(n.p,{children:"return its bottom-up level order traversal as:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[\n  [15,7],\n  [9,20],\n  [3]\n]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--6",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u5c42\u5e8f\u4ece\u4e0b\u5230\u4e0a\u904d\u5386\u4e00\u9897\u6811\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--6",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7528\u4e00\u4e2a\u961f\u5217\u5373\u53ef\u5b9e\u73b0\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--6",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0107.Binary-Tree-Level-Order-Traversal-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc levelOrderBottom(root *TreeNode) [][]int {\n\ttmp := levelOrder(root)\n\tres := [][]int{}\n\tfor i := len(tmp) - 1; i >= 0; i-- {\n\t\tres = append(res, tmp[i])\n\t}\n\treturn res\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"108-convert-sorted-array-to-binary-search-tree-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/",children:"108. Convert Sorted Array to Binary Search Tree"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/#108-convert-sorted-array-to-binary-search-treehttpsleetcodecomproblemsconvert-sorted-array-to-binary-search-tree",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--7",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given an array where elements are sorted in ascending order, convert it to a height balanced BST."}),"\n",(0,i.jsxs)(n.p,{children:["For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of ",(0,i.jsx)(n.em,{children:"every"})," node never differ by more than 1."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Given the sorted array: [-10,-3,0,5,9],\n\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--7",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u5c06\u4e00\u4e2a\u6309\u7167\u5347\u5e8f\u6392\u5217\u7684\u6709\u5e8f\u6570\u7ec4\uff0c\u8f6c\u6362\u4e3a\u4e00\u68f5\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u9ad8\u5ea6\u5e73\u8861\u4e8c\u53c9\u6811\u662f\u6307\u4e00\u4e2a\u4e8c\u53c9\u6811\u6bcf\u4e2a\u8282\u70b9 \u7684\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 1\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--7",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u628a\u4e00\u4e2a\u6709\u5e8f\u6570\u7ec4\u8f6c\u6362\u6210\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6570\uff0c\u6309\u7167\u5b9a\u4e49\u5373\u53ef"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--7",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0108.Convert-Sorted-Array-to-Binary-Search-Tree/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc sortedArrayToBST(nums []int) *TreeNode {\n\tif len(nums) == 0 {\n\t\treturn nil\n\t}\n\treturn &TreeNode{Val: nums[len(nums)/2], Left: sortedArrayToBST(nums[:len(nums)/2]), Right: sortedArrayToBST(nums[len(nums)/2+1:])}\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"109-convert-sorted-list-to-binary-search-tree-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree/",children:"109. Convert Sorted List to Binary Search Tree"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/#109-convert-sorted-list-to-binary-search-treehttpsleetcodecomproblemsconvert-sorted-list-to-binary-search-tree",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--8",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST."}),"\n",(0,i.jsx)(n.p,{children:"For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Given the sorted linked list: [-10,-3,0,5,9],\n\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\n\n      0\n     / \\\n   -3   9\n   /   /\n -10  5\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--8",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u5c06\u94fe\u8868\u8f6c\u5316\u4e3a\u9ad8\u5ea6\u5e73\u8861\u7684\u4e8c\u53c9\u641c\u7d22\u6811\u3002\u9ad8\u5ea6\u5e73\u8861\u7684\u5b9a\u4e49\uff1a\u6bcf\u4e2a\u7ed3\u70b9\u7684 2 \u4e2a\u5b50\u7ed3\u70b9\u7684\u6df1\u5ea6\u4e0d\u80fd\u76f8\u5dee\u8d85\u8fc7 1 \u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--8",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u4f9d\u6b21\u628a\u94fe\u8868\u7684\u4e2d\u95f4\u70b9\u4f5c\u4e3a\u6839\u7ed3\u70b9\uff0c\u7c7b\u4f3c\u4e8c\u5206\u7684\u601d\u60f3\uff0c\u9012\u5f52\u6392\u5217\u6240\u6709\u7ed3\u70b9\u5373\u53ef\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--8",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0109.Convert-Sorted-List-to-Binary-Search-Tree/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// TreeNode define\ntype TreeNode struct {\n\tVal   int\n\tLeft  *TreeNode\n\tRight *TreeNode\n}\n\nfunc sortedListToBST(head *ListNode) *TreeNode {\n\tif head == nil {\n\t\treturn nil\n\t}\n\tif head != nil && head.Next == nil {\n\t\treturn &TreeNode{Val: head.Val, Left: nil, Right: nil}\n\t}\n\tmiddleNode, preNode := middleNodeAndPreNode(head)\n\tif middleNode == nil {\n\t\treturn nil\n\t}\n\tif preNode != nil {\n\t\tpreNode.Next = nil\n\t}\n\tif middleNode == head {\n\t\thead = nil\n\t}\n\treturn &TreeNode{Val: middleNode.Val, Left: sortedListToBST(head), Right: sortedListToBST(middleNode.Next)}\n}\n\nfunc middleNodeAndPreNode(head *ListNode) (middle *ListNode, pre *ListNode) {\n\tif head == nil || head.Next == nil {\n\t\treturn nil, head\n\t}\n\tp1 := head\n\tp2 := head\n\tfor p2.Next != nil && p2.Next.Next != nil {\n\t\tpre = p1\n\t\tp1 = p1.Next\n\t\tp2 = p2.Next.Next\n\t}\n\treturn p1, pre\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"110-balanced-binary-tree-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/balanced-binary-tree/",children:"110. Balanced Binary Tree"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/#110-balanced-binary-treehttpsleetcodecomproblemsbalanced-binary-tree",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--9",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, determine if it is height-balanced."}),"\n",(0,i.jsx)(n.p,{children:"For this problem, a height-balanced binary tree is defined as:"}),"\n",(0,i.jsx)(n.p,{children:"a binary tree in which the depth of the two subtrees of every node never differ by more than 1."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Given the following tree [3,9,20,null,null,15,7]:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return true."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Given the following tree [1,2,2,3,3,null,null,4,4]:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"       1\n      / \\\n     2   2\n    / \\\n   3   3\n  / \\\n 4   4\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return false."}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--9",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["\u5224\u65ad\u4e00\u68f5\u6811\u662f\u4e0d\u662f\u5e73\u8861\u4e8c\u53c9\u6811\u3002\u5e73\u8861\u4e8c\u53c9\u6811\u7684\u5b9a\u4e49\u662f\uff1a\u6811\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6ee1\u8db3\u5de6\u53f3\u4e24\u4e2a\u5b50\u6811\u7684\u9ad8\u5ea6\u5dee ",(0,i.jsx)(n.code,{children:"\\<= 1"})," \u7684\u8fd9\u4e2a\u6761\u4ef6\u3002"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--9",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6839\u636e\u5b9a\u4e49\u5224\u65ad\u5373\u53ef\uff0c\u8ba1\u7b97\u6811\u7684\u9ad8\u5ea6\u662f\u7b2c 104 \u9898\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--9",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0110.Balanced-Binary-Tree/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc isBalanced(root *TreeNode) bool {\n\tif root == nil {\n\t\treturn true\n\t}\n\tleftHight := depth(root.Left)\n\trightHight := depth(root.Right)\n\treturn abs(leftHight-rightHight) <= 1 && isBalanced(root.Left) && isBalanced(root.Right)\n}\n\nfunc depth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\treturn max(depth(root.Left), depth(root.Right)) + 1\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"111-minimum-depth-of-binary-tree-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/minimum-depth-of-binary-tree/",children:"111. Minimum Depth of Binary Tree"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/#111-minimum-depth-of-binary-treehttpsleetcodecomproblemsminimum-depth-of-binary-tree",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--10",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, find its minimum depth."}),"\n",(0,i.jsx)(n.p,{children:"The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": A leaf is a node with no children."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Given binary tree ",(0,i.jsx)(n.code,{children:"[3,9,20,null,null,15,7]"}),","]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    3\n   / \\\n  9  20\n    /  \\\n   15   7\n"})}),"\n",(0,i.jsx)(n.p,{children:"return its minimum depth = 2."}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--10",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u627e\u51fa\u5176\u6700\u5c0f\u6df1\u5ea6\u3002\u6700\u5c0f\u6df1\u5ea6\u662f\u4ece\u6839\u8282\u70b9\u5230\u6700\u8fd1\u53f6\u5b50\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u4e0a\u7684\u8282\u70b9\u6570\u91cf\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--10",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u9012\u5f52\u6c42\u51fa\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6df1\u5ea6\uff0c\u8f93\u51fa\u6700\u5c0f\u503c\u5373\u53ef"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--10",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0111.Minimum-Depth-of-Binary-Tree/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-\xa0go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc minDepth(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tif root.Left == nil {\n\t\treturn minDepth(root.Right) + 1\n\t}\n\tif root.Right == nil {\n\t\treturn minDepth(root.Left) + 1\n\t}\n\treturn min(minDepth(root.Left), minDepth(root.Right)) + 1\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"112-path-sum-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/path-sum/",children:"112. Path Sum"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/#112-path-sumhttpsleetcodecomproblemspath-sum",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--11",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": A leaf is a node with no children."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Given the below binary tree and ",(0,i.jsx)(n.code,{children:"sum = 22"}),","]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\      \\\n7    2      1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["return true, as there exist a root-to-leaf path ",(0,i.jsx)(n.code,{children:"5->4->11->2"})," which sum is 22."]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--11",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u5224\u65ad\u8be5\u6811\u4e2d\u662f\u5426\u5b58\u5728\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u6761\u8def\u5f84\u4e0a\u6240\u6709\u8282\u70b9\u503c\u76f8\u52a0\u7b49\u4e8e\u76ee\u6807\u548c\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--11",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u9012\u5f52\u6c42\u89e3\u5373\u53ef"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--11",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0112.Path-Sum/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc hasPathSum(root *TreeNode, sum int) bool {\n\tif root == nil {\n\t\treturn false\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\treturn sum == root.Val\n\t}\n\treturn hasPathSum(root.Left, sum-root.Val) || hasPathSum(root.Right, sum-root.Val)\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"113-path-sum-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/path-sum-ii/",children:"113. Path Sum II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/#113-path-sum-iihttpsleetcodecomproblemspath-sum-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--12",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree and a sum, find all root-to-leaf paths where each path\u2019s sum equals the given sum."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": A leaf is a node with no children."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Given the below binary tree and ",(0,i.jsx)(n.code,{children:"sum = 22"}),","]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"      5\n     / \\\n    4   8\n   /   / \\\n  11  13  4\n /  \\    / \\\n7    2  5   1\n"})}),"\n",(0,i.jsx)(n.p,{children:"Return:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[\n   [5,4,11,2],\n   [5,8,4,5]\n]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--12",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\u548c\u4e00\u4e2a\u76ee\u6807\u548c\uff0c\u627e\u5230\u6240\u6709\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84\u603b\u548c\u7b49\u4e8e\u7ed9\u5b9a\u76ee\u6807\u548c\u7684\u8def\u5f84\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--12",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u662f\u7b2c 257 \u9898\u548c\u7b2c 112 \u9898\u7684\u7ec4\u5408\u589e\u5f3a\u7248"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--12",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0113.Path-Sum-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00\nfunc pathSum(root *TreeNode, sum int) [][]int {\n\tvar slice [][]int\n\tslice = findPath(root, sum, slice, []int(nil))\n\treturn slice\n}\n\nfunc findPath(n *TreeNode, sum int, slice [][]int, stack []int) [][]int {\n\tif n == nil {\n\t\treturn slice\n\t}\n\tsum -= n.Val\n\tstack = append(stack, n.Val)\n\tif sum == 0 && n.Left == nil && n.Right == nil {\n\t\tslice = append(slice, append([]int{}, stack...))\n\t\tstack = stack[:len(stack)-1]\n\t}\n\tslice = findPath(n.Left, sum, slice, stack)\n\tslice = findPath(n.Right, sum, slice, stack)\n\treturn slice\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc pathSum1(root *TreeNode, sum int) [][]int {\n\tif root == nil {\n\t\treturn [][]int{}\n\t}\n\tif root.Left == nil && root.Right == nil {\n\t\tif sum == root.Val {\n\t\t\treturn [][]int{[]int{root.Val}}\n\t\t}\n\t}\n\tpath, res := []int{}, [][]int{}\n\ttmpLeft := pathSum(root.Left, sum-root.Val)\n\tpath = append(path, root.Val)\n\tif len(tmpLeft) > 0 {\n\t\tfor i := 0; i < len(tmpLeft); i++ {\n\t\t\ttmpLeft[i] = append(path, tmpLeft[i]...)\n\t\t}\n\t\tres = append(res, tmpLeft...)\n\t}\n\tpath = []int{}\n\ttmpRight := pathSum(root.Right, sum-root.Val)\n\tpath = append(path, root.Val)\n\n\tif len(tmpRight) > 0 {\n\t\tfor i := 0; i < len(tmpRight); i++ {\n\t\t\ttmpRight[i] = append(path, tmpRight[i]...)\n\t\t}\n\t\tres = append(res, tmpRight...)\n\t}\n\treturn res\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"114-flatten-binary-tree-to-linked-list-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/flatten-binary-tree-to-linked-list/",children:"114. Flatten Binary Tree to Linked List"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/#114-flatten-binary-tree-to-linked-listhttpsleetcodecomproblemsflatten-binary-tree-to-linked-list",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--13",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, flatten it to a linked list in-place."}),"\n",(0,i.jsx)(n.p,{children:"For example, given the following tree:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    1\n   / \\\n  2   5\n / \\   \\\n3   4   6\n"})}),"\n",(0,i.jsx)(n.p,{children:"The flattened tree should look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"1\n \\\n  2\n   \\\n    3\n     \\\n      4\n       \\\n        5\n         \\\n          6\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--13",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u539f\u5730\u5c06\u5b83\u5c55\u5f00\u4e3a\u94fe\u8868\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--13",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u8981\u6c42\u628a\u4e8c\u53c9\u6811\u201c\u6253\u5e73\u201d\uff0c\u6309\u7167\u5148\u6839\u904d\u5386\u7684\u987a\u5e8f\uff0c\u628a\u6811\u7684\u7ed3\u70b9\u90fd\u653e\u5728\u53f3\u7ed3\u70b9\u4e2d\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u6309\u7167\u9012\u5f52\u548c\u975e\u9012\u5f52\u601d\u8def\u5b9e\u73b0\u5373\u53ef\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u9012\u5f52\u7684\u601d\u8def\u53ef\u4ee5\u8fd9\u4e48\u60f3\uff1a\u5012\u5e8f\u904d\u5386\u4e00\u9897\u6811\uff0c\u5373\u662f\u5148\u904d\u5386\u53f3\u5b69\u5b50\uff0c\u7136\u540e\u904d\u5386\u5de6\u5b69\u5b50\uff0c\u6700\u540e\u518d\u904d\u5386\u6839\u8282\u70b9\u3002"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"          1\n     / \\\n    2   5\n   / \\   \\\n  3   4   6\n  -----------        \n  pre = 5\n  cur = 4\n    \n      1\n     / \n    2   \n   / \\   \n  3   4\n       \\\n        5\n         \\\n          6\n  -----------        \n  pre = 4\n  cur = 3\n    \n      1\n     / \n    2   \n   /   \n  3 \n   \\\n    4\n     \\\n      5\n       \\\n        6\n  -----------        \n  cur = 2\n  pre = 3\n    \n      1\n     / \n    2   \n     \\\n      3 \n       \\\n        4\n         \\\n          5\n           \\\n            6\n  -----------        \n  cur = 1\n  pre = 2\n    \n  1\n   \\\n    2\n     \\\n      3\n       \\\n        4\n         \\\n          5\n           \\\n            6\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u53ef\u4ee5\u5148\u4eff\u9020\u5148\u6839\u904d\u5386\u7684\u4ee3\u7801\uff0c\u5199\u51fa\u8fd9\u4e2a\u5012\u5e8f\u904d\u5386\u7684\u903b\u8f91\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  public void flatten(TreeNode root) {\n      if (root == null)\n          return;\n      flatten(root.right);\n      flatten(root.left);\n  }\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u5b9e\u73b0\u4e86\u5012\u5e8f\u904d\u5386\u7684\u903b\u8f91\u4ee5\u540e\uff0c\u518d\u8fdb\u884c\u7ed3\u70b9\u4e4b\u95f4\u7684\u62fc\u63a5\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"  private TreeNode prev = null;\n    \n  public void flatten(TreeNode root) {\n      if (root == null)\n          return;\n      flatten(root.right);\n      flatten(root.left);\n      root.right = prev;\n      root.left = null;\n      prev = root;\n  }\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--13",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0114.Flatten-Binary-Tree-to-Linked-List/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00 \u975e\u9012\u5f52\nfunc flatten(root *TreeNode) {\n\tlist, cur := []int{}, &TreeNode{}\n\tpreorder(root, &list)\n\tcur = root\n\tfor i := 1; i < len(list); i++ {\n\t\tcur.Left = nil\n\t\tcur.Right = &TreeNode{Val: list[i], Left: nil, Right: nil}\n\t\tcur = cur.Right\n\t}\n\treturn\n}\n\n// \u89e3\u6cd5\u4e8c \u9012\u5f52\nfunc flatten1(root *TreeNode) {\n\tif root == nil || (root.Left == nil && root.Right == nil) {\n\t\treturn\n\t}\n\tflatten(root.Left)\n\tflatten(root.Right)\n\tcurrRight := root.Right\n\troot.Right = root.Left\n\troot.Left = nil\n\tfor root.Right != nil {\n\t\troot = root.Right\n\t}\n\troot.Right = currRight\n}\n\n// \u89e3\u6cd5\u4e09 \u9012\u5f52\nfunc flatten2(root *TreeNode) {\n\tif root == nil {\n\t\treturn\n\t}\n\tflatten(root.Right)\n\tif root.Left == nil {\n\t\treturn\n\t}\n\tflatten(root.Left)\n\tp := root.Left\n\tfor p.Right != nil {\n\t\tp = p.Right\n\t}\n\tp.Right = root.Right\n\troot.Right = root.Left\n\troot.Left = nil\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"115-distinct-subsequences-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/distinct-subsequences/",children:"115. Distinct Subsequences"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/#115-distinct-subsequenceshttpsleetcodecomproblemsdistinct-subsequences",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--14",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given two strings ",(0,i.jsx)(n.code,{children:"s"})," and ",(0,i.jsx)(n.code,{children:"t"}),", return ",(0,i.jsxs)(n.em,{children:["the number of distinct subsequences of ",(0,i.jsx)(n.code,{children:"s"})," which equals ",(0,i.jsx)(n.code,{children:"t"})]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A string\u2019s ",(0,i.jsx)(n.strong,{children:"subsequence"})," is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters\u2019 relative positions. (i.e., ",(0,i.jsx)(n.code,{children:'"ACE"'})," is a subsequence of ",(0,i.jsx)(n.code,{children:'"ABCDE"'})," while ",(0,i.jsx)(n.code,{children:'"AEC"'})," is not)."]}),"\n",(0,i.jsx)(n.p,{children:"It is guaranteed the answer fits on a 32-bit signed integer."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: s = "rabbbit", t = "rabbit"\nOutput: 3\nExplanation:\nAs shown below, there are 3 ways you can generate "rabbit" from S.\nrabbbitrabbbitrabbbit\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: s = "babgbag", t = "bag"\nOutput: 5\nExplanation:\nAs shown below, there are 5 ways you can generate "bag" from S.\nbabgbagbabgbagbabgbagbabgbagbabgbag\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 <= s.length, t.length <= 1000"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"s"})," and ",(0,i.jsx)(n.code,{children:"t"})," consist of English letters."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--14",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s \u548c\u4e00\u4e2a\u5b57\u7b26\u4e32 t \uff0c\u8ba1\u7b97\u5728 s \u7684\u5b50\u5e8f\u5217\u4e2d t \u51fa\u73b0\u7684\u4e2a\u6570\u3002\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a \u5b50\u5e8f\u5217 \u662f\u6307\uff0c\u901a\u8fc7\u5220\u9664\u4e00\u4e9b\uff08\u4e5f\u53ef\u4ee5\u4e0d\u5220\u9664\uff09\u5b57\u7b26\u4e14\u4e0d\u5e72\u6270\u5269\u4f59\u5b57\u7b26\u76f8\u5bf9\u4f4d\u7f6e\u6240\u7ec4\u6210\u7684\u65b0\u5b57\u7b26\u4e32\u3002\uff08\u4f8b\u5982\uff0c\u201cACE\u201d \u662f \u201cABCDE\u201d \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u800c \u201cAEC\u201d \u4e0d\u662f\uff09\u9898\u76ee\u6570\u636e\u4fdd\u8bc1\u7b54\u6848\u7b26\u5408 32 \u4f4d\u5e26\u7b26\u53f7\u6574\u6570\u8303\u56f4\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--14",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u5728\u5b57\u7b26\u4e32 ",(0,i.jsx)(n.code,{children:"s"})," \u4e2d\u6700\u591a\u5305\u542b\u591a\u5c11\u4e2a\u5b57\u7b26\u4e32 ",(0,i.jsx)(n.code,{children:"t"}),"\u3002\u8fd9\u91cc\u9762\u5305\u542b\u5f88\u591a\u91cd\u53e0\u5b50\u95ee\u9898\uff0c\u6240\u4ee5\u5c1d\u8bd5\u7528\u52a8\u6001\u89c4\u5212\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\u5b9a\u4e49 ",(0,i.jsx)(n.code,{children:"dp[i][j]"})," \u4ee3\u8868 ",(0,i.jsx)(n.code,{children:"s[i:]"})," \u7684\u5b50\u5e8f\u5217\u4e2d ",(0,i.jsx)(n.code,{children:"t[j:]"})," \u51fa\u73b0\u7684\u4e2a\u6570\u3002\u521d\u59cb\u5316\u5148\u5224\u65ad\u8fb9\u754c\u6761\u4ef6\u3002\u5f53 ",(0,i.jsx)(n.code,{children:"i = len(s)"})," \u4e14 ",(0,i.jsx)(n.code,{children:"0\u2264 j < len(t)"})," \u7684\u65f6\u5019\uff0c",(0,i.jsx)(n.code,{children:"s[i:]"})," \u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c",(0,i.jsx)(n.code,{children:"t[j:]"})," \u4e0d\u4e3a\u7a7a\uff0c\u6240\u4ee5 ",(0,i.jsx)(n.code,{children:"dp[len(s)][j] = 0"}),"\u3002\u5f53 ",(0,i.jsx)(n.code,{children:"j = len(t)"})," \u4e14 ",(0,i.jsx)(n.code,{children:"0 \u2264 i < len(s)"})," \u7684\u65f6\u5019\uff0c",(0,i.jsx)(n.code,{children:"t[j:]"})," \u4e0d\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u7a7a\u5b57\u7b26\u4e32\u662f\u4efb\u4f55\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\u3002\u6240\u4ee5 ",(0,i.jsx)(n.code,{children:"dp[i][n] = 1"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u5f53 ",(0,i.jsx)(n.code,{children:"i < len(s)"})," \u4e14 ",(0,i.jsx)(n.code,{children:"j < len(t)"})," \u7684\u65f6\u5019\uff0c\u5982\u679c ",(0,i.jsx)(n.code,{children:"s[i] == t[j]"}),"\uff0c\u6709 2 \u79cd\u5339\u914d\u65b9\u5f0f\uff0c\u7b2c\u4e00\u79cd\u5c06 ",(0,i.jsx)(n.code,{children:"s[i]"})," \u4e0e ",(0,i.jsx)(n.code,{children:"t[j]"})," \u5339\u914d\uff0c\u90a3\u4e48 ",(0,i.jsx)(n.code,{children:"t[j+1:]"})," \u5339\u914d ",(0,i.jsx)(n.code,{children:"s[i+1:]"})," \u7684\u5b50\u5e8f\u5217\uff0c\u5b50\u5e8f\u5217\u6570\u4e3a ",(0,i.jsx)(n.code,{children:"dp[i+1][j+1]"}),"\uff1b\u7b2c\u4e8c\u79cd\u5c06 ",(0,i.jsx)(n.code,{children:"s[i]"})," \u4e0d\u4e0e ",(0,i.jsx)(n.code,{children:"t[j]"})," \u5339\u914d\uff0c",(0,i.jsx)(n.code,{children:"t[j:]"})," \u4f5c\u4e3a ",(0,i.jsx)(n.code,{children:"s[i+1:]"})," \u7684\u5b50\u5e8f\u5217\uff0c\u5b50\u5e8f\u5217\u6570\u4e3a ",(0,i.jsx)(n.code,{children:"dp[i+1][j]"}),"\u3002\u7efc\u5408 2 \u79cd\u60c5\u51b5\uff0c\u5f53 ",(0,i.jsx)(n.code,{children:"s[i] == t[j]"})," \u65f6\uff0c",(0,i.jsx)(n.code,{children:"dp[i][j] = dp[i+1][j+1] + dp[i+1][j]"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u5982\u679c ",(0,i.jsx)(n.code,{children:"s[i] != t[j]"}),"\uff0c\u6b64\u65f6 ",(0,i.jsx)(n.code,{children:"t[j:]"})," \u53ea\u80fd\u4f5c\u4e3a ",(0,i.jsx)(n.code,{children:"s[i+1:]"})," \u7684\u5b50\u5e8f\u5217\uff0c\u5b50\u5e8f\u5217\u6570\u4e3a ",(0,i.jsx)(n.code,{children:"dp[i+1][j]"}),"\u3002\u6240\u4ee5\u5f53 ",(0,i.jsx)(n.code,{children:"s[i] != t[j]"})," \u65f6\uff0c",(0,i.jsx)(n.code,{children:"dp[i][j] = dp[i+1][j]"}),"\u3002\u7efc\u4e0a\u5206\u6790\u5f97\uff1a"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u6700\u540e\u662f\u4f18\u5316\u7248\u672c\u3002\u5199\u51fa\u4e0a\u8ff0\u4ee3\u7801\u4ee5\u540e\uff0c\u53ef\u4ee5\u53d1\u73b0\u586b\u8868\u7684\u8fc7\u7a0b\u662f\u4ece\u53f3\u4e0b\u89d2\u4e00\u76f4\u586b\u5230\u5de6\u4e0a\u89d2\u3002\u586b\u8868\u987a\u5e8f\u662f \u4ece\u4e0b\u5f80\u4e0a\u4e00\u884c\u4e00\u884c\u7684\u586b\u3002\u884c\u5185\u4ece\u53f3\u5f80\u5de6\u586b\u3002\u4e8e\u662f\u53ef\u4ee5\u5c06\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u636e\u538b\u7f29\u5230\u4e00\u7ef4\u3002\u56e0\u4e3a\u586b\u5145\u5f53\u524d\u884c\u53ea\u9700\u8981\u7528\u5230\u5b83\u7684\u4e0b\u4e00\u884c\u4fe1\u606f\u5373\u53ef\uff0c\u66f4\u8fdb\u4e00\u6b65\uff0c\u7528\u5230\u7684\u662f\u4e0b\u4e00\u884c\u4e2d\u53f3\u8fb9\u5143\u7d20\u7684\u4fe1\u606f\u3002\u4e8e\u662f\u53ef\u4ee5\u6bcf\u6b21\u66f4\u65b0\u8be5\u884c\u65f6\uff0c\u5148\u5c06\u65e7\u7684\u503c\u5b58\u8d77\u6765\uff0c\u8ba1\u7b97\u66f4\u65b0\u8be5\u884c\u7684\u65f6\u5019\u4ece\u53f3\u5f80\u5de6\u66f4\u65b0\u3002\u8fd9\u6837\u505a\u5373\u53ef\u51cf\u5c11\u4e00\u7ef4\u7a7a\u95f4\uff0c\u5c06\u539f\u6765\u7684\u4e8c\u7ef4\u6570\u7ec4\u538b\u7f29\u5230\u4e00\u7ef4\u6570\u7ec4\u3002"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--14",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0115.Distinct-Subsequences/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n// \u89e3\u6cd5\u4e00 \u538b\u7f29\u7248 DP\nfunc numDistinct(s string, t string) int {\n\tdp := make([]int, len(s)+1)\n\tfor i, curT := range t {\n\t\tpre := 0\n\t\tfor j, curS := range s {\n\t\t\tif i == 0 {\n\t\t\t\tpre = 1\n\t\t\t}\n\t\t\tnewDP := dp[j+1]\n\t\t\tif curT == curS {\n\t\t\t\tdp[j+1] = dp[j] + pre\n\t\t\t} else {\n\t\t\t\tdp[j+1] = dp[j]\n\t\t\t}\n\t\t\tpre = newDP\n\t\t}\n\t}\n\treturn dp[len(s)]\n}\n\n// \u89e3\u6cd5\u4e8c \u666e\u901a DP\nfunc numDistinct1(s, t string) int {\n\tm, n := len(s), len(t)\n\tif m < n {\n\t\treturn 0\n\t}\n\tdp := make([][]int, m+1)\n\tfor i := range dp {\n\t\tdp[i] = make([]int, n+1)\n\t\tdp[i][n] = 1\n\t}\n\tfor i := m - 1; i >= 0; i-- {\n\t\tfor j := n - 1; j >= 0; j-- {\n\t\t\tif s[i] == t[j] {\n\t\t\t\tdp[i][j] = dp[i+1][j+1] + dp[i+1][j]\n\t\t\t} else {\n\t\t\t\tdp[i][j] = dp[i+1][j]\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[0][0]\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"116-populating-next-right-pointers-in-each-node-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/populating-next-right-pointers-in-each-node/",children:"116. Populating Next Right Pointers in Each Node"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0116.Populating-Next-Right-Pointers-in-Each-Node/#116-populating-next-right-pointers-in-each-nodehttpsleetcodecomproblemspopulating-next-right-pointers-in-each-node",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--15",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0116.Populating-Next-Right-Pointers-in-Each-Node/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["You are given a ",(0,i.jsx)(n.strong,{children:"perfect binary tree"})," where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to ",(0,i.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Initially, all next pointers are set to ",(0,i.jsx)(n.code,{children:"NULL"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Follow up:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"You may only use constant extra space."}),"\n",(0,i.jsx)(n.li,{children:"Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png",alt:"https://assets.leetcode.com/uploads/2019/02/14/116_sample.png"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: root = [1,2,3,4,5,6,7]\nOutput: [1,#,2,3,#,4,5,6,7,#]\nExplanation:Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The number of nodes in the given tree is less than ",(0,i.jsx)(n.code,{children:"4096"}),"."]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1000 <= node.val <= 1000"})}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--15",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0116.Populating-Next-Right-Pointers-in-Each-Node/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a \u5b8c\u7f8e\u4e8c\u53c9\u6811 \uff0c\u5176\u6240\u6709\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\uff0c\u6bcf\u4e2a\u7236\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5b50\u8282\u70b9\u3002\u4e8c\u53c9\u6811\u5b9a\u4e49\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",children:"struct Node {\n  int val;\n  Node *left;\n  Node *right;\n  Node *next;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u586b\u5145\u5b83\u7684\u6bcf\u4e2a next \u6307\u9488\uff0c\u8ba9\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u5176\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\u3002\u5982\u679c\u627e\u4e0d\u5230\u4e0b\u4e00\u4e2a\u53f3\u4fa7\u8282\u70b9\uff0c\u5219\u5c06 next \u6307\u9488\u8bbe\u7f6e\u4e3a NULL\u3002\u521d\u59cb\u72b6\u6001\u4e0b\uff0c\u6240\u6709 next \u6307\u9488\u90fd\u88ab\u8bbe\u7f6e\u4e3a NULL\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--15",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0116.Populating-Next-Right-Pointers-in-Each-Node/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u672c\u8d28\u4e0a\u662f\u4e8c\u53c9\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u57fa\u4e8e\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5c06\u6bcf\u5c42\u7684\u8282\u70b9\u653e\u5165\u961f\u5217\uff0c\u5e76\u904d\u5386\u961f\u5217\u8fdb\u884c\u8fde\u63a5\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--15",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0116.Populating-Next-Right-Pointers-in-Each-Node/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\ntype Node struct {\n\tVal   int\n\tLeft  *Node\n\tRight *Node\n\tNext  *Node\n}\n\n//\u89e3\u6cd5\u4e00\uff1a\u8fed\u4ee3\nfunc connect(root *Node) *Node {\n\tif root == nil {\n\t\treturn root\n\t}\n\tq := []*Node{root}\n\tfor len(q) > 0 {\n\t\tvar p []*Node\n\t\t// \u904d\u5386\u8fd9\u4e00\u5c42\u7684\u6240\u6709\u8282\u70b9\n\t\tfor i, node := range q {\n\t\t\tif i+1 < len(q) {\n\t\t\t\tnode.Next = q[i+1]\n\t\t\t}\n\t\t\tif node.Left != nil {\n\t\t\t\tp = append(p, node.Left)\n\t\t\t}\n\t\t\tif node.Right != nil {\n\t\t\t\tp = append(p, node.Right)\n\t\t\t}\n\t\t}\n\t\tq = p\n\t}\n\treturn root\n}\n\n// \u89e3\u6cd5\u4e8c \u9012\u5f52\nfunc connect2(root *Node) *Node {\n\tif root == nil {\n\t\treturn nil\n\t}\n\tconnectTwoNode(root.Left, root.Right)\n\treturn root\n}\n\nfunc connectTwoNode(node1, node2 *Node) {\n\tif node1 == nil || node2 == nil {\n\t\treturn\n\t}\n\tnode1.Next = node2\n\tconnectTwoNode(node1.Left, node1.Right)\n\tconnectTwoNode(node2.Left, node2.Right)\n\tconnectTwoNode(node1.Right, node2.Left)\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"118-pascals-triangle-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/pascals-triangle/",children:"118. Pascal\u2019s Triangle"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0118.Pascals-Triangle/#118-pascals-trianglehttpsleetcodecomproblemspascals-triangle",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--16",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0118.Pascals-Triangle/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a non-negative integer numRows, generate the first numRows of Pascal\u2019s triangle."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif",alt:"img"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": In Pascal\u2019s triangle, each number is the sum of the two numbers directly above it."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: 5\nOutput:\n[\n     [1],\n    [1,1],\n   [1,2,1],\n  [1,3,3,1],\n [1,4,6,4,1]\n]\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--16",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0118.Pascals-Triangle/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u6574\u6570 numRows\uff0c\u751f\u6210\u6768\u8f89\u4e09\u89d2\u7684\u524d numRows \u884c\u3002\u5728\u6768\u8f89\u4e09\u89d2\u4e2d\uff0c\u6bcf\u4e2a\u6570\u662f\u5b83\u5de6\u4e0a\u65b9\u548c\u53f3\u4e0a\u65b9\u7684\u6570\u7684\u548c\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--16",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0118.Pascals-Triangle/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7ed9\u5b9a\u4e00\u4e2a n\uff0c\u8981\u6c42\u6253\u5370\u6768\u8f89\u4e09\u89d2\u7684\u524d n \u884c\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u7b80\u5355\u9898\u3002\u6309\u7167\u6768\u8f89\u4e09\u89d2\u7684\u751f\u6210\u89c4\u5219\u5faa\u73af\u6253\u5370\u5373\u53ef\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--16",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0118.Pascals-Triangle/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc generate(numRows int) [][]int {\n\tresult := [][]int{}\n\tfor i := 0; i < numRows; i++ {\n\t\trow := []int{}\n\t\tfor j := 0; j < i+1; j++ {\n\t\t\tif j == 0 || j == i {\n\t\t\t\trow = append(row, 1)\n\t\t\t} else if i > 1 {\n\t\t\t\trow = append(row, result[i-1][j-1]+result[i-1][j])\n\t\t\t}\n\t\t}\n\t\tresult = append(result, row)\n\t}\n\treturn result\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"119-pascals-triangle-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/pascals-triangle-ii/",children:"119. Pascal\u2019s Triangle II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0119.Pascals-Triangle-II/#119-pascals-triangle-iihttpsleetcodecomproblemspascals-triangle-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--17",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0119.Pascals-Triangle-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given an integer ",(0,i.jsx)(n.code,{children:"rowIndex"}),", return the ",(0,i.jsx)(n.code,{children:"rowIndexth"})," row of the Pascal\u2019s triangle."]}),"\n",(0,i.jsxs)(n.p,{children:["Notice that the row index starts from ",(0,i.jsx)(n.strong,{children:"0"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif",alt:"https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif"})}),"\n",(0,i.jsx)(n.p,{children:"In Pascal\u2019s triangle, each number is the sum of the two numbers directly above it."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Follow up:"})}),"\n",(0,i.jsxs)(n.p,{children:["Could you optimize your algorithm to use only ",(0,i.jsx)(n.em,{children:"O"}),"(",(0,i.jsx)(n.em,{children:"k"}),") extra space?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: rowIndex = 3\nOutput: [1,3,3,1]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: rowIndex = 0\nOutput: [1]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: rowIndex = 1\nOutput: [1,1]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 <= rowIndex <= 33"})}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--17",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0119.Pascals-Triangle-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u8d1f\u7d22\u5f15 k\uff0c\u5176\u4e2d k \u2264 33\uff0c\u8fd4\u56de\u6768\u8f89\u4e09\u89d2\u7684\u7b2c k \u884c\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--17",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0119.Pascals-Triangle-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["\u9898\u76ee\u4e2d\u7684\u4e09\u89d2\u662f\u6768\u8f89\u4e09\u89d2\uff0c\u6bcf\u4e2a\u6570\u5b57\u662f ",(0,i.jsx)(n.code,{children:"(a+b)^n"})," \u4e8c\u9879\u5f0f\u5c55\u5f00\u7684\u7cfb\u6570\u3002\u9898\u76ee\u8981\u6c42\u6211\u4eec\u53ea\u80fd\u4f7f\u7528 O(k) \u7684\u7a7a\u95f4\u3002\u90a3\u4e48\u9700\u8981\u627e\u5230\u4e24\u4e24\u9879\u76f4\u63a5\u7684\u9012\u63a8\u5173\u7cfb\u3002\u7531\u7ec4\u5408\u77e5\u8bc6\u5f97\u77e5\uff1a"]}),"\n",(0,i.jsxs)(n.p,{children:["\ufffd\ufffd\ufffd=\ufffd!\ufffd!(\ufffd\u2212\ufffd)!\ufffd\ufffd\ufffd\u22121=\ufffd!(\ufffd\u22121)!(\ufffd\u2212\ufffd+1)!",(0,i.jsxs)(n.em,{children:["C",(0,i.jsx)(n.strong,{children:"n"}),"m",(0,i.jsx)(n.strong,{children:"C"}),"n**m"]}),"\u22121=",(0,i.jsx)(n.em,{children:"m"}),"!(",(0,i.jsx)(n.em,{children:"n"}),"\u2212",(0,i.jsx)(n.em,{children:"m"}),")!",(0,i.jsx)(n.em,{children:"n"}),"!=(",(0,i.jsx)(n.em,{children:"m"}),"\u22121)!(",(0,i.jsx)(n.em,{children:"n"}),"\u2212",(0,i.jsx)(n.em,{children:"m"}),"+1)!",(0,i.jsx)(n.em,{children:"n"}),"!"]}),"\n",(0,i.jsx)(n.p,{children:"\u4e8e\u662f\u5f97\u5230\u9012\u63a8\u516c\u5f0f\uff1a"}),"\n",(0,i.jsxs)(n.p,{children:["\ufffd\ufffd\ufffd=\ufffd\ufffd\ufffd\u22121\xd7\ufffd\u2212\ufffd+1\ufffd",(0,i.jsxs)(n.em,{children:["C",(0,i.jsx)(n.strong,{children:"n"}),"m"]}),"=",(0,i.jsxs)(n.em,{children:["C",(0,i.jsx)(n.strong,{children:"n"}),"m"]}),"\u22121\xd7",(0,i.jsx)(n.em,{children:"m**n"}),"\u2212",(0,i.jsx)(n.em,{children:"m"}),"+1"]}),"\n",(0,i.jsx)(n.p,{children:"\u5229\u7528\u8fd9\u4e2a\u9012\u63a8\u516c\u5f0f\u5373\u53ef\u4ee5\u628a\u7a7a\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230 O(k)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--17",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0119.Pascals-Triangle-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc getRow(rowIndex int) []int {\n\trow := make([]int, rowIndex+1)\n\trow[0] = 1\n\tfor i := 1; i <= rowIndex; i++ {\n\t\trow[i] = row[i-1] * (rowIndex - i + 1) / i\n\t}\n\treturn row\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"120-triangle-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/triangle/",children:"120. Triangle"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0120.Triangle/#120-trianglehttpsleetcodecomproblemstriangle",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--18",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0120.Triangle/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a triangle, find the minimum path sum from top to bottom. Each step you may move to adjacent numbers on the row below."}),"\n",(0,i.jsx)(n.p,{children:"For example, given the following triangle"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[\n     [2],\n    [3,4],\n   [6,5,7],\n  [4,1,8,3]\n]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The minimum path sum from top to bottom is ",(0,i.jsx)(n.code,{children:"11"})," (i.e., ",(0,i.jsx)(n.strong,{children:"2"})," + ",(0,i.jsx)(n.strong,{children:"3"})," + ",(0,i.jsx)(n.strong,{children:"5"})," + ",(0,i.jsx)(n.strong,{children:"1"})," = 11)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Bonus point if you are able to do this using only ",(0,i.jsx)(n.em,{children:"O"}),"(",(0,i.jsx)(n.em,{children:"n"}),") extra space, where ",(0,i.jsx)(n.em,{children:"n"})," is the total number of rows in the triangle."]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--18",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0120.Triangle/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e09\u89d2\u5f62\uff0c\u627e\u51fa\u81ea\u9876\u5411\u4e0b\u7684\u6700\u5c0f\u8def\u5f84\u548c\u3002\u6bcf\u4e00\u6b65\u53ea\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u884c\u4e2d\u76f8\u90bb\u7684\u7ed3\u70b9\u4e0a\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--18",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0120.Triangle/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6c42\u51fa\u4ece\u4e09\u89d2\u5f62\u9876\u7aef\u5230\u5e95\u7aef\u7684\u6700\u5c0f\u548c\u3002\u8981\u6c42\u6700\u597d\u7528 O(n) \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u6700\u4f18\u89e3\u662f\u4e0d\u7528\u8f85\u52a9\u7a7a\u95f4\uff0c\u76f4\u63a5\u4ece\u4e0b\u5c42\u5f80\u4e0a\u5c42\u63a8\u3002\u666e\u901a\u89e3\u6cd5\u662f\u7528\u4e8c\u7ef4\u6570\u7ec4 DP\uff0c\u7a0d\u5fae\u4f18\u5316\u7684\u89e3\u6cd5\u662f\u4e00\u7ef4\u6570\u7ec4 DP\u3002\u89e3\u6cd5\u5982\u4e0b\uff1a"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--18",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0120.Triangle/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"math"\n)\n\n// \u89e3\u6cd5\u4e00 \u5012\u5e8f DP\uff0c\u65e0\u8f85\u52a9\u7a7a\u95f4\nfunc minimumTotal(triangle [][]int) int {\n\tif triangle == nil {\n\t\treturn 0\n\t}\n\tfor row := len(triangle) - 2; row >= 0; row-- {\n\t\tfor col := 0; col < len(triangle[row]); col++ {\n\t\t\ttriangle[row][col] += min(triangle[row+1][col], triangle[row+1][col+1])\n\t\t}\n\t}\n\treturn triangle[0][0]\n}\n\n// \u89e3\u6cd5\u4e8c \u6b63\u5e38 DP\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6 O(n)\nfunc minimumTotal1(triangle [][]int) int {\n\tif len(triangle) == 0 {\n\t\treturn 0\n\t}\n\tdp, minNum, index := make([]int, len(triangle[len(triangle)-1])), math.MaxInt64, 0\n\tfor ; index < len(triangle[0]); index++ {\n\t\tdp[index] = triangle[0][index]\n\t}\n\tfor i := 1; i < len(triangle); i++ {\n\t\tfor j := len(triangle[i]) - 1; j >= 0; j-- {\n\t\t\tif j == 0 {\n\t\t\t\t// \u6700\u5de6\u8fb9\n\t\t\t\tdp[j] += triangle[i][0]\n\t\t\t} else if j == len(triangle[i])-1 {\n\t\t\t\t// \u6700\u53f3\u8fb9\n\t\t\t\tdp[j] += dp[j-1] + triangle[i][j]\n\t\t\t} else {\n\t\t\t\t// \u4e2d\u95f4\n\t\t\t\tdp[j] = min(dp[j-1]+triangle[i][j], dp[j]+triangle[i][j])\n\t\t\t}\n\t\t}\n\t}\n\tfor i := 0; i < len(dp); i++ {\n\t\tif dp[i] < minNum {\n\t\t\tminNum = dp[i]\n\t\t}\n\t}\n\treturn minNum\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"121-best-time-to-buy-and-sell-stock-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",children:"121. Best Time to Buy and Sell Stock"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0121.Best-Time-to-Buy-and-Sell-Stock/#121-best-time-to-buy-and-sell-stockhttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--19",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0121.Best-Time-to-Buy-and-Sell-Stock/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Say you have an array for which the ",(0,i.jsx)(n.em,{children:"i"}),"th element is the price of a given stock on day ",(0,i.jsx)(n.em,{children:"i"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If you were only permitted to complete at most one transaction (i.e., buy one and sell one share of the stock), design an algorithm to find the maximum profit."}),"\n",(0,i.jsx)(n.p,{children:"Note that you cannot sell a stock before you buy one."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n             Not 7-1 = 6, as selling price needs to be larger than buying price.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--19",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0121.Best-Time-to-Buy-and-Sell-Stock/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002\u5982\u679c\u4f60\u6700\u591a\u53ea\u5141\u8bb8\u5b8c\u6210\u4e00\u7b14\u4ea4\u6613\uff08\u5373\u4e70\u5165\u548c\u5356\u51fa\u4e00\u652f\u80a1\u7968\uff09\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u6ce8\u610f\u4f60\u4e0d\u80fd\u5728\u4e70\u5165\u80a1\u7968\u524d\u5356\u51fa\u80a1\u7968\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--19",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0121.Best-Time-to-Buy-and-Sell-Stock/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u9898\u76ee\u8981\u6c42\u627e\u51fa\u80a1\u7968\u4e2d\u80fd\u8d5a\u7684\u94b1\u6700\u591a\u7684\u5dee\u4ef7"}),"\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u4e5f\u6709\u591a\u4e2a\u89e3\u6cd5\uff0c\u53ef\u4ee5\u7528 DP\uff0c\u4e5f\u53ef\u4ee5\u7528\u5355\u8c03\u6808"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--19",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0121.Best-Time-to-Buy-and-Sell-Stock/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n// \u89e3\u6cd5\u4e00 \u6a21\u62df DP\nfunc maxProfit(prices []int) int {\n\tif len(prices) < 1 {\n\t\treturn 0\n\t}\n\tmin, maxProfit := prices[0], 0\n\tfor i := 1; i < len(prices); i++ {\n\t\tif prices[i]-min > maxProfit {\n\t\t\tmaxProfit = prices[i] - min\n\t\t}\n\t\tif prices[i] < min {\n\t\t\tmin = prices[i]\n\t\t}\n\t}\n\treturn maxProfit\n}\n\n// \u89e3\u6cd5\u4e8c \u5355\u8c03\u6808\nfunc maxProfit1(prices []int) int {\n\tif len(prices) == 0 {\n\t\treturn 0\n\t}\n\tstack, res := []int{prices[0]}, 0\n\tfor i := 1; i < len(prices); i++ {\n\t\tif prices[i] > stack[len(stack)-1] {\n\t\t\tstack = append(stack, prices[i])\n\t\t} else {\n\t\t\tindex := len(stack) - 1\n\t\t\tfor ; index >= 0; index-- {\n\t\t\t\tif stack[index] < prices[i] {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t\tstack = stack[:index+1]\n\t\t\tstack = append(stack, prices[i])\n\t\t}\n\t\tres = max(res, stack[len(stack)-1]-stack[0])\n\t}\n\treturn res\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"122-best-time-to-buy-and-sell-stock-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/",children:"122. Best Time to Buy and Sell Stock II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0122.Best-Time-to-Buy-and-Sell-Stock-II/#122-best-time-to-buy-and-sell-stock-iihttpsleetcodecomproblemsbest-time-to-buy-and-sell-stock-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--20",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0122.Best-Time-to-Buy-and-Sell-Stock-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Say you have an array for which the ",(0,i.jsx)(n.em,{children:"i"}),"th element is the price of a given stock on day ",(0,i.jsx)(n.em,{children:"i"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Design an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times)."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [7,1,5,3,6,4]\nOutput: 7\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [1,2,3,4,5]\nOutput: 4\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\n             engaging multiple transactions at the same time. You must sell before buying again.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 3"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [7,6,4,3,1]\nOutput: 0\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--20",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0122.Best-Time-to-Buy-and-Sell-Stock-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u7684\u7b2c i \u4e2a\u5143\u7d20\u662f\u4e00\u652f\u7ed9\u5b9a\u80a1\u7968\u7b2c i \u5929\u7684\u4ef7\u683c\u3002\u8bbe\u8ba1\u4e00\u4e2a\u7b97\u6cd5\u6765\u8ba1\u7b97\u4f60\u6240\u80fd\u83b7\u53d6\u7684\u6700\u5927\u5229\u6da6\u3002\u4f60\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u5b8c\u6210\u66f4\u591a\u7684\u4ea4\u6613\uff08\u591a\u6b21\u4e70\u5356\u4e00\u652f\u80a1\u7968\uff09\u3002\u6ce8\u610f\uff1a\u4f60\u4e0d\u80fd\u540c\u65f6\u53c2\u4e0e\u591a\u7b14\u4ea4\u6613\uff08\u4f60\u5fc5\u987b\u5728\u518d\u6b21\u8d2d\u4e70\u524d\u51fa\u552e\u6389\u4e4b\u524d\u7684\u80a1\u7968\uff09\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--20",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0122.Best-Time-to-Buy-and-Sell-Stock-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u662f\u7b2c 121 \u9898\u7684\u52a0\u5f3a\u7248\u3002\u8981\u6c42\u8f93\u51fa\u6700\u5927\u6536\u76ca\uff0c\u8fd9\u4e00\u9898\u4e0d\u6b62\u4e70\u5356\u4e00\u6b21\uff0c\u53ef\u4ee5\u4e70\u5356\u591a\u6b21\uff0c\u4e70\u5356\u4e0d\u80fd\u5728\u540c\u4e00\u5929\u5185\u64cd\u4f5c\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6700\u5927\u6536\u76ca\u6765\u6e90\uff0c\u5fc5\u7136\u662f\u6bcf\u6b21\u8dcc\u4e86\u5c31\u4e70\u5165\uff0c\u6da8\u5230\u9876\u5cf0\u7684\u65f6\u5019\u5c31\u629b\u51fa\u3002\u53ea\u8981\u6709\u6da8\u5cf0\u5c31\u5f00\u59cb\u8ba1\u7b97\u8d5a\u7684\u94b1\uff0c\u8fde\u7eed\u6da8\u53ef\u4ee5\u7528\u4e24\u4e24\u76f8\u51cf\u7d2f\u52a0\u6765\u8ba1\u7b97\uff0c\u4e24\u4e24\u76f8\u51cf\u7d2f\u52a0\uff0c\u76f8\u5f53\u4e8e\u6da8\u5230\u6ce2\u5cf0\u7684\u6700\u5927\u503c\u51cf\u53bb\u8c37\u5e95\u7684\u503c\u3002\u8fd9\u4e00\u70b9\u770b\u901a\u4ee5\u540e\uff0c\u9898\u76ee\u975e\u5e38\u7b80\u5355\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--20",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0122.Best-Time-to-Buy-and-Sell-Stock-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc maxProfit122(prices []int) int {\n\tprofit := 0\n\tfor i := 0; i < len(prices)-1; i++ {\n\t\tif prices[i+1] > prices[i] {\n\t\t\tprofit += prices[i+1] - prices[i]\n\t\t}\n\t}\n\treturn profit\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"124-binary-tree-maximum-path-sum-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-maximum-path-sum/",children:"124. Binary Tree Maximum Path Sum"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/#124-binary-tree-maximum-path-sumhttpsleetcodecomproblemsbinary-tree-maximum-path-sum",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--21",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given a ",(0,i.jsx)(n.strong,{children:"non-empty"})," binary tree, find the maximum path sum."]}),"\n",(0,i.jsxs)(n.p,{children:["For this problem, a path is defined as any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The path must contain ",(0,i.jsx)(n.strong,{children:"at least one node"})," and does not need to go through the root."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [1,2,3]\n\n       1\n      / \\\n     2   3\n\nOutput: 6\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [-10,9,20,null,null,15,7]\n\n   -10\n   / \\\n  9  20\n    /  \\\n   15   7\n\nOutput: 42\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--21",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u4e8c\u53c9\u6811\uff0c\u8fd4\u56de\u5176\u6700\u5927\u8def\u5f84\u548c\u3002\u672c\u9898\u4e2d\uff0c\u8def\u5f84\u88ab\u5b9a\u4e49\u4e3a\u4e00\u6761\u4ece\u6811\u4e2d\u4efb\u610f\u8282\u70b9\u51fa\u53d1\uff0c\u8fbe\u5230\u4efb\u610f\u8282\u70b9\u7684\u5e8f\u5217\u3002\u8be5\u8def\u5f84\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u8282\u70b9\uff0c\u4e14\u4e0d\u4e00\u5b9a\u7ecf\u8fc7\u6839\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--21",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7ed9\u51fa\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u8981\u6c42\u627e\u4e00\u6761\u8def\u5f84\u4f7f\u5f97\u8def\u5f84\u7684\u548c\u662f\u6700\u5927\u7684\u3002"}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u9012\u5f52\u7ef4\u62a4\u6700\u5927\u503c\u5373\u53ef\u3002\u4e0d\u8fc7\u9700\u8981\u6bd4\u8f83\u7684\u5bf9\u8c61\u6bd4\u8f83\u591a\u3002",(0,i.jsx)(n.code,{children:"maxPathSum(root) = max(maxPathSum(root.Left), maxPathSum(root.Right), maxPathSumFrom(root.Left) (if>0) + maxPathSumFrom(root.Right) (if>0) + root.Val)"})," \uff0c\u5176\u4e2d\uff0c",(0,i.jsx)(n.code,{children:"maxPathSumFrom(root) = max(maxPathSumFrom(root.Left), maxPathSumFrom(root.Right)) + root.Val"})]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--21",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0124.Binary-Tree-Maximum-Path-Sum/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport "math"\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc maxPathSum(root *TreeNode) int {\n\tif root == nil {\n\t\treturn 0\n\t}\n\tmax := math.MinInt32\n\tgetPathSum(root, &max)\n\treturn max\n}\n\nfunc getPathSum(root *TreeNode, maxSum *int) int {\n\tif root == nil {\n\t\treturn math.MinInt32\n\t}\n\tleft := getPathSum(root.Left, maxSum)\n\tright := getPathSum(root.Right, maxSum)\n\n\tcurrMax := max(max(left+root.Val, right+root.Val), root.Val)\n\t*maxSum = max(*maxSum, max(currMax, left+right+root.Val))\n\treturn currMax\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"125-valid-palindrome-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/valid-palindrome/description/",children:"125. Valid Palindrome"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/#125-valid-palindromehttpsleetcodecomproblemsvalid-palindromedescription",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--22",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases."}),"\n",(0,i.jsx)(n.p,{children:"For example,"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"A man, a plan, a canal: Panama" is a palindrome.\n"race a car" is not a palindrome.\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Have you consider that the string might be empty? This is a good question to ask during an interview."}),"\n",(0,i.jsx)(n.p,{children:"For the purpose of this problem, we define empty string as valid palindrome."}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--22",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u5224\u65ad\u6240\u7ed9\u7684\u5b57\u7b26\u4e32\u662f\u5426\u662f\u6709\u6548\u7684\u56de\u6587\u4e32\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--22",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7b80\u5355\u9898\uff0c\u6309\u7167\u9898\u610f\u505a\u5373\u53ef\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--22",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0125.Valid-Palindrome/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nimport (\n\t\"strings\"\n)\n\nfunc isPalindrome(s string) bool {\n\ts = strings.ToLower(s)\n\ti, j := 0, len(s)-1\n\tfor i < j {\n\t\tfor i < j && !isChar(s[i]) {\n\t\t\ti++\n\t\t}\n\t\tfor i < j && !isChar(s[j]) {\n\t\t\tj--\n\t\t}\n\t\tif s[i] != s[j] {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t\tj--\n\t}\n\treturn true\n}\n\n// \u5224\u65ad c \u662f\u5426\u662f\u5b57\u7b26\u6216\u8005\u6570\u5b57\nfunc isChar(c byte) bool {\n\tif ('a' <= c && c <= 'z') || ('0' <= c && c <= '9') {\n\t\treturn true\n\t}\n\treturn false\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"126-word-ladder-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/word-ladder-ii/",children:"126. Word Ladder II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/#126-word-ladder-iihttpsleetcodecomproblemsword-ladder-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--23",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given two words (",(0,i.jsx)(n.em,{children:"beginWord"})," and ",(0,i.jsx)(n.em,{children:"endWord"}),"), and a dictionary\u2019s word list, find all shortest transformation sequence(s) from ",(0,i.jsx)(n.em,{children:"beginWord"})," to ",(0,i.jsx)(n.em,{children:"endWord"}),", such that:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Only one letter can be changed at a time"}),"\n",(0,i.jsxs)(n.li,{children:["Each transformed word must exist in the word list. Note that ",(0,i.jsx)(n.em,{children:"beginWord"})," is ",(0,i.jsx)(n.em,{children:"not"})," a transformed word."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Return an empty list if there is no such transformation sequence."}),"\n",(0,i.jsx)(n.li,{children:"All words have the same length."}),"\n",(0,i.jsx)(n.li,{children:"All words contain only lowercase alphabetic characters."}),"\n",(0,i.jsx)(n.li,{children:"You may assume no duplicates in the word list."}),"\n",(0,i.jsxs)(n.li,{children:["You may assume ",(0,i.jsx)(n.em,{children:"beginWord"})," and ",(0,i.jsx)(n.em,{children:"endWord"})," are non-empty and are not the same."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input:\nbeginWord = "hit",\nendWord = "cog",\nwordList = ["hot","dot","dog","lot","log","cog"]\n\nOutput:\n[\n  ["hit","hot","dot","dog","cog"],\n  ["hit","hot","lot","log","cog"]\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input:\nbeginWord = "hit"\nendWord = "cog"\nwordList = ["hot","dot","dog","lot","log"]\n\nOutput: []\n\nExplanation: The endWord "cog" is not in wordList, therefore no possible transformation.\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--23",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178 wordList\uff0c\u627e\u51fa\u6240\u6709\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u8bf4\u660e:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--23",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u662f\u7b2c 127 \u9898\u7684\u52a0\u5f3a\u7248\uff0c\u9664\u4e86\u627e\u5230\u8def\u5f84\u7684\u957f\u5ea6\uff0c\u8fd8\u8fdb\u4e00\u6b65\u8981\u6c42\u8f93\u51fa\u6240\u6709\u8def\u5f84\u3002\u89e3\u9898\u601d\u8def\u540c\u7b2c 127 \u9898\u4e00\u6837\uff0c\u4e5f\u662f\u7528 BFS \u904d\u5386\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5f53\u524d\u505a\u6cd5\u4e0d\u662f\u6700\u4f18\u89e3\uff0c\u662f\u5426\u53ef\u4ee5\u8003\u8651\u53cc\u7aef BFS \u4f18\u5316\uff0c\u6216\u8005\u8fea\u6770\u65af\u5854\u62c9\u7b97\u6cd5\uff1f"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--23",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0126.Word-Ladder-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc findLadders(beginWord string, endWord string, wordList []string) [][]string {\n\tresult, wordMap := make([][]string, 0), make(map[string]bool)\n\tfor _, w := range wordList {\n\t\twordMap[w] = true\n\t}\n\tif !wordMap[endWord] {\n\t\treturn result\n\t}\n\t// create a queue, track the path\n\tqueue := make([][]string, 0)\n\tqueue = append(queue, []string{beginWord})\n\t// queueLen is used to track how many slices in queue are in the same level\n\t// if found a result, I still need to finish checking current level cause I need to return all possible paths\n\tqueueLen := 1\n\t// use to track strings that this level has visited\n\t// when queueLen == 0, remove levelMap keys in wordMap\n\tlevelMap := make(map[string]bool)\n\tfor len(queue) > 0 {\n\t\tpath := queue[0]\n\t\tqueue = queue[1:]\n\t\tlastWord := path[len(path)-1]\n\t\tfor i := 0; i < len(lastWord); i++ {\n\t\t\tfor c := 'a'; c <= 'z'; c++ {\n\t\t\t\tnextWord := lastWord[:i] + string(c) + lastWord[i+1:]\n\t\t\t\tif nextWord == endWord {\n\t\t\t\t\tpath = append(path, endWord)\n\t\t\t\t\tresult = append(result, path)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tif wordMap[nextWord] {\n\t\t\t\t\t// different from word ladder, don't remove the word from wordMap immediately\n\t\t\t\t\t// same level could reuse the key.\n\t\t\t\t\t// delete from wordMap only when currently level is done.\n\t\t\t\t\tlevelMap[nextWord] = true\n\t\t\t\t\tnewPath := make([]string, len(path))\n\t\t\t\t\tcopy(newPath, path)\n\t\t\t\t\tnewPath = append(newPath, nextWord)\n\t\t\t\t\tqueue = append(queue, newPath)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tqueueLen--\n\t\t// if queueLen is 0, means finish traversing current level. if result is not empty, return result\n\t\tif queueLen == 0 {\n\t\t\tif len(result) > 0 {\n\t\t\t\treturn result\n\t\t\t}\n\t\t\tfor k := range levelMap {\n\t\t\t\tdelete(wordMap, k)\n\t\t\t}\n\t\t\t// clear levelMap\n\t\t\tlevelMap = make(map[string]bool)\n\t\t\tqueueLen = len(queue)\n\t\t}\n\t}\n\treturn result\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"127-word-ladder-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/word-ladder/",children:"127. Word Ladder"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0127.Word-Ladder/#127-word-ladderhttpsleetcodecomproblemsword-ladder",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--24",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0127.Word-Ladder/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given two words (",(0,i.jsx)(n.em,{children:"beginWord"})," and ",(0,i.jsx)(n.em,{children:"endWord"}),"), and a dictionary\u2019s word list, find the length of shortest transformation sequence from ",(0,i.jsx)(n.em,{children:"beginWord"})," to ",(0,i.jsx)(n.em,{children:"endWord"}),", such that:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Only one letter can be changed at a time."}),"\n",(0,i.jsxs)(n.li,{children:["Each transformed word must exist in the word list. Note that ",(0,i.jsx)(n.em,{children:"beginWord"})," is ",(0,i.jsx)(n.em,{children:"not"})," a transformed word."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Return 0 if there is no such transformation sequence."}),"\n",(0,i.jsx)(n.li,{children:"All words have the same length."}),"\n",(0,i.jsx)(n.li,{children:"All words contain only lowercase alphabetic characters."}),"\n",(0,i.jsx)(n.li,{children:"You may assume no duplicates in the word list."}),"\n",(0,i.jsxs)(n.li,{children:["You may assume ",(0,i.jsx)(n.em,{children:"beginWord"})," and ",(0,i.jsx)(n.em,{children:"endWord"})," are non-empty and are not the same."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input:\nbeginWord = "hit",\nendWord = "cog",\nwordList = ["hot","dot","dog","lot","log","cog"]\n\nOutput: 5\n\nExplanation: As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",\nreturn its length 5.\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input:\nbeginWord = "hit"\nendWord = "cog"\nwordList = ["hot","dot","dog","lot","log"]\n\nOutput: 0\n\nExplanation: The endWord "cog" is not in wordList, therefore no possible transformation.\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--24",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0127.Word-Ladder/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e24\u4e2a\u5355\u8bcd\uff08beginWord \u548c endWord\uff09\u548c\u4e00\u4e2a\u5b57\u5178\uff0c\u627e\u5230\u4ece beginWord \u5230 endWord \u7684\u6700\u77ed\u8f6c\u6362\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8f6c\u6362\u9700\u9075\u5faa\u5982\u4e0b\u89c4\u5219\uff1a"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u6bcf\u6b21\u8f6c\u6362\u53ea\u80fd\u6539\u53d8\u4e00\u4e2a\u5b57\u6bcd\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u8f6c\u6362\u8fc7\u7a0b\u4e2d\u7684\u4e2d\u95f4\u5355\u8bcd\u5fc5\u987b\u662f\u5b57\u5178\u4e2d\u7684\u5355\u8bcd\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u8bf4\u660e:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u5982\u679c\u4e0d\u5b58\u5728\u8fd9\u6837\u7684\u8f6c\u6362\u5e8f\u5217\uff0c\u8fd4\u56de 0\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6240\u6709\u5355\u8bcd\u5177\u6709\u76f8\u540c\u7684\u957f\u5ea6\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6240\u6709\u5355\u8bcd\u53ea\u7531\u5c0f\u5199\u5b57\u6bcd\u7ec4\u6210\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u5b57\u5178\u4e2d\u4e0d\u5b58\u5728\u91cd\u590d\u7684\u5355\u8bcd\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u4f60\u53ef\u4ee5\u5047\u8bbe beginWord \u548c endWord \u662f\u975e\u7a7a\u7684\uff0c\u4e14\u4e8c\u8005\u4e0d\u76f8\u540c\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--24",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0127.Word-Ladder/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u8981\u6c42\u8f93\u51fa\u4ece ",(0,i.jsx)(n.code,{children:"beginWord"})," \u53d8\u6362\u5230 ",(0,i.jsx)(n.code,{children:"endWord"})," \u6700\u77ed\u53d8\u6362\u6b21\u6570\u3002\u53ef\u4ee5\u7528 BFS\uff0c\u4ece ",(0,i.jsx)(n.code,{children:"beginWord"})," \u5f00\u59cb\u53d8\u6362\uff0c\u628a\u8be5\u5355\u8bcd\u7684\u6bcf\u4e2a\u5b57\u6bcd\u90fd\u7528 ",(0,i.jsx)(n.code,{children:"'a'~'z'"})," \u53d8\u6362\u4e00\u6b21\uff0c\u751f\u6210\u7684\u6570\u7ec4\u5230 ",(0,i.jsx)(n.code,{children:"wordList"})," \u4e2d\u67e5\u627e\uff0c\u8fd9\u91cc\u7528 Map \u6765\u8bb0\u5f55\u67e5\u627e\u3002\u627e\u5f97\u5230\u5c31\u5165\u961f\u5217\uff0c\u627e\u4e0d\u5230\u5c31\u8f93\u51fa 0 \u3002\u5165\u961f\u4ee5\u540e\u6309\u7167 BFS \u7684\u7b97\u6cd5\u4f9d\u6b21\u904d\u5386\u5b8c\uff0c\u5f53\u6240\u6709\u5355\u8bcd\u90fd ",(0,i.jsx)(n.code,{children:"len(queue)<=0"})," \u51fa\u961f\u4ee5\u540e\uff0c\u6574\u4e2a\u7a0b\u5e8f\u7ed3\u675f\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u9898\u76ee\u4e2d\u867d\u7136\u8bf4\u4e86\u8981\u6c42\u627e\u5230\u4e00\u6761\u6700\u77ed\u7684\u8def\u5f84\uff0c\u4f46\u662f\u5b9e\u9645\u4e0a\u6700\u77ed\u7684\u8def\u5f84\u7684\u5bfb\u627e\u65b9\u6cd5\u5df2\u7ecf\u544a\u8bc9\u4f60\u4e86\uff1a","\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"\u6bcf\u6b21\u53ea\u53d8\u6362\u4e00\u4e2a\u5b57\u6bcd"}),"\n",(0,i.jsxs)(n.li,{children:["\u6bcf\u6b21\u53d8\u6362\u90fd\u5fc5\u987b\u5728 ",(0,i.jsx)(n.code,{children:"wordList"})," \u4e2d\n\u6240\u4ee5\u4e0d\u9700\u8981\u5355\u72ec\u8003\u8651\u4f55\u79cd\u65b9\u5f0f\u662f\u6700\u77ed\u7684\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--24",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0127.Word-Ladder/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc ladderLength(beginWord string, endWord string, wordList []string) int {\n\twordMap, que, depth := getWordMap(wordList, beginWord), []string{beginWord}, 0\n\tfor len(que) > 0 {\n\t\tdepth++\n\t\tqlen := len(que)\n\t\tfor i := 0; i < qlen; i++ {\n\t\t\tword := que[0]\n\t\t\tque = que[1:]\n\t\t\tcandidates := getCandidates(word)\n\t\t\tfor _, candidate := range candidates {\n\t\t\t\tif _, ok := wordMap[candidate]; ok {\n\t\t\t\t\tif candidate == endWord {\n\t\t\t\t\t\treturn depth + 1\n\t\t\t\t\t}\n\t\t\t\t\tdelete(wordMap, candidate)\n\t\t\t\t\tque = append(que, candidate)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 0\n}\n\nfunc getWordMap(wordList []string, beginWord string) map[string]int {\n\twordMap := make(map[string]int)\n\tfor i, word := range wordList {\n\t\tif _, ok := wordMap[word]; !ok {\n\t\t\tif word != beginWord {\n\t\t\t\twordMap[word] = i\n\t\t\t}\n\t\t}\n\t}\n\treturn wordMap\n}\n\nfunc getCandidates(word string) []string {\n\tvar res []string\n\tfor i := 0; i < 26; i++ {\n\t\tfor j := 0; j < len(word); j++ {\n\t\t\tif word[j] != byte(int('a')+i) {\n\t\t\t\tres = append(res, word[:j]+string(int('a')+i)+word[j+1:])\n\t\t\t}\n\t\t}\n\t}\n\treturn res\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"128-longest-consecutive-sequence-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/longest-consecutive-sequence/",children:"128. Longest Consecutive Sequence"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/#128-longest-consecutive-sequencehttpsleetcodecomproblemslongest-consecutive-sequence",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--25",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given an unsorted array of integers, find the length of the longest consecutive elements sequence."}),"\n",(0,i.jsxs)(n.p,{children:["Your algorithm should run in O(",(0,i.jsx)(n.em,{children:"n"}),") complexity."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [100, 4, 200, 1, 3, 2]\nOutput: 4\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--25",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u672a\u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\u7684\u957f\u5ea6\u3002\u8981\u6c42\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a O(n)\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--25",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u7ed9\u51fa\u4e00\u4e2a\u6570\u7ec4\uff0c\u8981\u6c42\u627e\u51fa\u6700\u957f\u8fde\u7eed\u5e8f\u5217\uff0c\u8f93\u51fa\u8fd9\u4e2a\u6700\u957f\u7684\u957f\u5ea6\u3002\u8981\u6c42\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a ",(0,i.jsx)(n.code,{children:"O(n)"}),"\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u53ef\u4ee5\u5148\u7528\u66b4\u529b\u89e3\u51b3\u89e3\u51b3\uff0c\u4ee3\u7801\u89c1\u89e3\u6cd5\u4e09\u3002\u601d\u8def\u662f\u628a\u6bcf\u4e2a\u6570\u90fd\u5b58\u5728 ",(0,i.jsx)(n.code,{children:"map"})," \u4e2d\uff0c\u5148\u5220\u53bb ",(0,i.jsx)(n.code,{children:"map"})," \u4e2d\u6ca1\u6709\u524d\u4e00\u4e2a\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]-1"})," \u4e5f\u6ca1\u6709\u540e\u4e00\u4e2a\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]+1"})," \u7684\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]"}),"\uff0c\u8fd9\u79cd\u6570\u524d\u540e\u90fd\u4e0d\u8fde\u7eed\u3002\u7136\u540e\u5728 ",(0,i.jsx)(n.code,{children:"map"})," \u4e2d\u627e\u5230\u524d\u4e00\u4e2a\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]-1"})," \u4e0d\u5b58\u5728\uff0c\u4f46\u662f\u540e\u4e00\u4e2a\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]+1"})," \u5b58\u5728\u7684\u6570\uff0c\u8fd9\u79cd\u6570\u662f\u8fde\u7eed\u5e8f\u5217\u7684\u8d77\u70b9\uff0c\u90a3\u4e48\u4e0d\u65ad\u7684\u5f80\u540e\u641c\uff0c\u76f4\u5230\u5e8f\u5217\u201c\u65ad\u201d\u4e86\u3002\u6700\u540e\u8f93\u51fa\u6700\u957f\u5e8f\u5217\u7684\u957f\u5ea6\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u6700\u4f18\u7684\u89e3\u6cd5\u662f\u89e3\u6cd5\u4e00\uff0c\u9488\u5bf9\u6bcf\u4e00\u4e2a ",(0,i.jsx)(n.code,{children:"map"})," \u4e2d\u4e0d\u5b58\u5728\u7684\u6570 ",(0,i.jsx)(n.code,{children:"n"}),"\uff0c\u63d2\u5165\u8fdb\u53bb\u90fd\u505a 2 \u4ef6\u4e8b\u60c5\u3002\u7b2c\u4e00\u4ef6\u4e8b\uff0c\u5148\u67e5\u770b ",(0,i.jsx)(n.code,{children:"n - 1"})," \u548c ",(0,i.jsx)(n.code,{children:"n + 1"})," \u662f\u5426\u90fd\u5b58\u5728\u4e8e ",(0,i.jsx)(n.code,{children:"map"})," \u4e2d\uff0c\u5982\u679c\u90fd\u5b58\u5728\uff0c\u4ee3\u8868\u5b58\u5728\u8fde\u7eed\u7684\u5e8f\u5217\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0 ",(0,i.jsx)(n.code,{children:"left"}),"\uff0c",(0,i.jsx)(n.code,{children:"right"})," \u8fb9\u754c\u3002\u90a3\u4e48 ",(0,i.jsx)(n.code,{children:"n"})," \u5bf9\u5e94\u7684\u8fd9\u4e2a\u5c0f\u7684\u5b50\u8fde\u7eed\u5e8f\u5217\u957f\u5ea6\u4e3a ",(0,i.jsx)(n.code,{children:"sum = left + right + 1"}),"\u3002\u7b2c\u4e8c\u4ef6\u4e8b\u5c31\u662f\u66f4\u65b0 ",(0,i.jsx)(n.code,{children:"left"})," \u548c ",(0,i.jsx)(n.code,{children:"right"})," \u5de6\u53f3\u8fb9\u754c\u5bf9\u5e94\u7684 ",(0,i.jsx)(n.code,{children:"length = sum"}),"\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u8fd8\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u89e3\u51b3\uff0c\u89c1\u89e3\u6cd5\u4e8c\u3002\u5229\u7528\u6bcf\u4e2a\u6570\u5728 ",(0,i.jsx)(n.code,{children:"nums"})," \u4e2d\u7684\u4e0b\u6807\uff0c\u628a\u4e0b\u6807\u548c\u4e0b\u6807\u8fdb\u884c ",(0,i.jsx)(n.code,{children:"union()"}),"\uff0c\u5177\u4f53\u505a\u6cd5\u662f\u770b\u524d\u4e00\u4e2a\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]-1"})," \u548c\u540e\u4e00\u4e2a\u6570 ",(0,i.jsx)(n.code,{children:"nums[i]+1"})," \u5728 ",(0,i.jsx)(n.code,{children:"map"})," \u4e2d\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u5b58\u5728\u5c31 ",(0,i.jsx)(n.code,{children:"union()"}),"\uff0c\u6700\u7ec8\u8f93\u51fa\u6574\u4e2a\u5e76\u67e5\u96c6\u4e2d\u5305\u542b\u6700\u591a\u5143\u7d20\u7684\u90a3\u4e2a\u96c6\u5408\u7684\u5143\u7d20\u603b\u6570\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--25",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0128.Longest-Consecutive-Sequence/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/template"\n)\n\n// \u89e3\u6cd5\u4e00 map\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n)\nfunc longestConsecutive(nums []int) int {\n\tres, numMap := 0, map[int]int{}\n\tfor _, num := range nums {\n\t\tif numMap[num] == 0 {\n\t\t\tleft, right, sum := 0, 0, 0\n\t\t\tif numMap[num-1] > 0 {\n\t\t\t\tleft = numMap[num-1]\n\t\t\t} else {\n\t\t\t\tleft = 0\n\t\t\t}\n\t\t\tif numMap[num+1] > 0 {\n\t\t\t\tright = numMap[num+1]\n\t\t\t} else {\n\t\t\t\tright = 0\n\t\t\t}\n\t\t\t// sum: length of the sequence n is in\n\t\t\tsum = left + right + 1\n\t\t\tnumMap[num] = sum\n\t\t\t// keep track of the max length\n\t\t\tres = max(res, sum)\n\t\t\t// extend the length to the boundary(s) of the sequence\n\t\t\t// will do nothing if n has no neighbors\n\t\t\tnumMap[num-left] = sum\n\t\t\tnumMap[num+right] = sum\n\t\t} else {\n\t\t\tcontinue\n\t\t}\n\t}\n\treturn res\n}\n\n// \u89e3\u6cd5\u4e8c \u5e76\u67e5\u96c6\nfunc longestConsecutive1(nums []int) int {\n\tif len(nums) == 0 {\n\t\treturn 0\n\t}\n\tnumMap, countMap, lcs, uf := map[int]int{}, map[int]int{}, 0, template.UnionFind{}\n\tuf.Init(len(nums))\n\tfor i := 0; i < len(nums); i++ {\n\t\tcountMap[i] = 1\n\t}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif _, ok := numMap[nums[i]]; ok {\n\t\t\tcontinue\n\t\t}\n\t\tnumMap[nums[i]] = i\n\t\tif _, ok := numMap[nums[i]+1]; ok {\n\t\t\tuf.Union(i, numMap[nums[i]+1])\n\t\t}\n\t\tif _, ok := numMap[nums[i]-1]; ok {\n\t\t\tuf.Union(i, numMap[nums[i]-1])\n\t\t}\n\t}\n\tfor key := range countMap {\n\t\tparent := uf.Find(key)\n\t\tif parent != key {\n\t\t\tcountMap[parent]++\n\t\t}\n\t\tif countMap[parent] > lcs {\n\t\t\tlcs = countMap[parent]\n\t\t}\n\t}\n\treturn lcs\n}\n\n// \u89e3\u6cd5\u4e09 \u66b4\u529b\u89e3\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 O(n^2)\nfunc longestConsecutive2(nums []int) int {\n\tif len(nums) == 0 {\n\t\treturn 0\n\t}\n\tnumMap, length, tmp, lcs := map[int]bool{}, 0, 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tnumMap[nums[i]] = true\n\t}\n\tfor key := range numMap {\n\t\tif !numMap[key-1] && !numMap[key+1] {\n\t\t\tdelete(numMap, key)\n\t\t}\n\t}\n\tif len(numMap) == 0 {\n\t\treturn 1\n\t}\n\tfor key := range numMap {\n\t\tif !numMap[key-1] && numMap[key+1] {\n\t\t\tlength, tmp = 1, key+1\n\t\t\tfor numMap[tmp] {\n\t\t\t\tlength++\n\t\t\t\ttmp++\n\t\t\t}\n\t\t\tlcs = max(lcs, length)\n\t\t}\n\t}\n\treturn max(lcs, length)\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"129-sum-root-to-leaf-numbers-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/sum-root-to-leaf-numbers/",children:"129. Sum Root to Leaf Numbers"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/#129-sum-root-to-leaf-numbershttpsleetcodecomproblemssum-root-to-leaf-numbers",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--26",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given a binary tree containing digits from ",(0,i.jsx)(n.code,{children:"0-9"})," only, each root-to-leaf path could represent a number."]}),"\n",(0,i.jsxs)(n.p,{children:["An example is the root-to-leaf path ",(0,i.jsx)(n.code,{children:"1->2->3"})," which represents the number ",(0,i.jsx)(n.code,{children:"123"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"Find the total sum of all root-to-leaf numbers."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": A leaf is a node with no children."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [1,2,3]\n    1\n   / \\\n  2   3\nOutput: 25\nExplanation:\nThe root-to-leaf path 1->2 represents the number 12.\nThe root-to-leaf path 1->3 represents the number 13.\nTherefore, sum = 12 + 13 = 25.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [4,9,0,5,1]\n    4\n   / \\\n  9   0\n / \\\n5   1\nOutput: 1026\nExplanation:\nThe root-to-leaf path 4->9->5 represents the number 495.\nThe root-to-leaf path 4->9->1 represents the number 491.\nThe root-to-leaf path 4->0 represents the number 40.\nTherefore, sum = 495 + 491 + 40 = 1026.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--26",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u5b83\u7684\u6bcf\u4e2a\u7ed3\u70b9\u90fd\u5b58\u653e\u4e00\u4e2a 0-9 \u7684\u6570\u5b57\uff0c\u6bcf\u6761\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\u90fd\u4ee3\u8868\u4e00\u4e2a\u6570\u5b57\u3002\u4f8b\u5982\uff0c\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u8def\u5f84 1->2->3 \u4ee3\u8868\u6570\u5b57 123\u3002\u8ba1\u7b97\u4ece\u6839\u5230\u53f6\u5b50\u8282\u70b9\u751f\u6210\u7684\u6240\u6709\u6570\u5b57\u4e4b\u548c\u3002\u8bf4\u660e: \u53f6\u5b50\u8282\u70b9\u662f\u6307\u6ca1\u6709\u5b50\u8282\u70b9\u7684\u8282\u70b9\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--26",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u662f\u7b2c 257 \u9898\u7684\u53d8\u5f62\u9898\uff0c\u7b2c 257 \u9898\u8981\u6c42\u8f93\u51fa\u6bcf\u6761\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u8def\u5f84\uff0c\u8fd9\u4e00\u9898\u53d8\u6210\u4e86\u628a\u6bcf\u4e00\u4e2a\u4ece\u6839\u8282\u70b9\u5230\u53f6\u5b50\u8282\u70b9\u7684\u6570\u5b57\u90fd\u4e32\u8054\u8d77\u6765\uff0c\u518d\u7d2f\u52a0\u6bcf\u6761\u8def\u5f84\uff0c\u6c42\u51fa\u6700\u540e\u7684\u603b\u548c\u3002\u5b9e\u9645\u505a\u9898\u601d\u8def\u57fa\u672c\u6ca1\u53d8\u3002\u8fd0\u7528\u524d\u5e8f\u904d\u5386\u7684\u601d\u60f3\uff0c\u5f53\u4ece\u6839\u8282\u70b9\u51fa\u53d1\u4e00\u76f4\u52a0\u5230\u53f6\u5b50\u8282\u70b9\uff0c\u6bcf\u4e2a\u53f6\u5b50\u8282\u70b9\u6c47\u603b\u4e00\u6b21\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--26",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0129.Sum-Root-to-Leaf-Numbers/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// TreeNode define\ntype TreeNode = structures.TreeNode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\nfunc sumNumbers(root *TreeNode) int {\n\tres := 0\n\tdfs(root,0,&res)\n\treturn res\n}\n\nfunc dfs(root *TreeNode,sum int,res *int)  {\n\tif root == nil{\n\t\treturn\n\t}\n\tsum = sum*10 + root.Val\n\tif root.Left == nil && root.Right == nil{\n\t\t*res += sum\n\t\treturn\n\t}\n\tdfs(root.Left,sum,res)\n\tdfs(root.Right,sum,res)\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"130-surrounded-regions-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/surrounded-regions/",children:"130. Surrounded Regions"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/#130-surrounded-regionshttpsleetcodecomproblemssurrounded-regions",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--27",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given a 2D board containing ",(0,i.jsx)(n.code,{children:"'X'"})," and ",(0,i.jsx)(n.code,{children:"'O'"})," (",(0,i.jsx)(n.strong,{children:"the letter O"}),"), capture all regions surrounded by ",(0,i.jsx)(n.code,{children:"'X'"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A region is captured by flipping all ",(0,i.jsx)(n.code,{children:"'O'"}),"s into ",(0,i.jsx)(n.code,{children:"'X'"}),"s in that surrounded region."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"X X X X\nX O O X\nX X O X\nX O X X\n"})}),"\n",(0,i.jsx)(n.p,{children:"After running your function, the board should be:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"X X X X\nX X X X\nX X X X\nX O X X\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Explanation"}),":"]}),"\n",(0,i.jsxs)(n.p,{children:["Surrounded regions shouldn\u2019t be on the border, which means that any ",(0,i.jsx)(n.code,{children:"'O'"})," on the border of the board are not flipped to ",(0,i.jsx)(n.code,{children:"'X'"}),". Any ",(0,i.jsx)(n.code,{children:"'O'"})," that is not on the border and it is not connected to an ",(0,i.jsx)(n.code,{children:"'O'"})," on the border will be flipped to ",(0,i.jsx)(n.code,{children:"'X'"}),". Two cells are connected if they are adjacent cells connected horizontally or vertically."]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--27",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u4e8c\u7ef4\u7684\u77e9\u9635\uff0c\u5305\u542b \u2018X\u2019 \u548c \u2018O\u2019\uff08\u5b57\u6bcd O\uff09\u3002\u627e\u5230\u6240\u6709\u88ab \u2018X\u2019 \u56f4\u7ed5\u7684\u533a\u57df\uff0c\u5e76\u5c06\u8fd9\u4e9b\u533a\u57df\u91cc\u6240\u6709\u7684 \u2018O\u2019 \u7528 \u2018X\u2019 \u586b\u5145\u3002\u88ab\u56f4\u7ed5\u7684\u533a\u95f4\u4e0d\u4f1a\u5b58\u5728\u4e8e\u8fb9\u754c\u4e0a\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u4efb\u4f55\u8fb9\u754c\u4e0a\u7684 \u2018O\u2019 \u90fd\u4e0d\u4f1a\u88ab\u586b\u5145\u4e3a \u2018X\u2019\u3002 \u4efb\u4f55\u4e0d\u5728\u8fb9\u754c\u4e0a\uff0c\u6216\u4e0d\u4e0e\u8fb9\u754c\u4e0a\u7684 \u2018O\u2019 \u76f8\u8fde\u7684 \u2018O\u2019 \u6700\u7ec8\u90fd\u4f1a\u88ab\u586b\u5145\u4e3a \u2018X\u2019\u3002\u5982\u679c\u4e24\u4e2a\u5143\u7d20\u5728\u6c34\u5e73\u6216\u5782\u76f4\u65b9\u5411\u76f8\u90bb\uff0c\u5219\u79f0\u5b83\u4eec\u662f\u201c\u76f8\u8fde\u201d\u7684\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--27",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7ed9\u51fa\u4e00\u5f20\u4e8c\u7ef4\u5730\u56fe\uff0c\u8981\u6c42\u628a\u5730\u56fe\u4e0a\u975e\u8fb9\u7f18\u4e0a\u7684 \u2018O\u2019 \u90fd\u7528 \u2018X\u2019 \u8986\u76d6\u6389\u3002"}),"\n",(0,i.jsxs)(n.li,{children:["\u8fd9\u4e00\u9898\u6709\u591a\u79cd\u89e3\u6cd5\u3002\u7b2c\u4e00\u79cd\u89e3\u6cd5\u662f\u5e76\u67e5\u96c6\u3002\u5148\u5c06\u8fb9\u7f18\u4e0a\u7684 \u2018O\u2019 \u5168\u90e8\u90fd\u548c\u4e00\u4e2a\u7279\u6b8a\u7684\u70b9\u8fdb\u884c ",(0,i.jsx)(n.code,{children:"union()"})," \u3002\u7136\u540e\u518d\u628a\u5730\u56fe\u4e2d\u95f4\u7684 \u2018O\u2019 \u90fd\u8fdb\u884c ",(0,i.jsx)(n.code,{children:"union()"}),"\uff0c\u6700\u540e\u628a\u548c\u7279\u6b8a\u70b9\u4e0d\u662f\u540c\u4e00\u4e2a\u96c6\u5408\u7684\u70b9\u90fd\u6807\u8bb0\u6210 \u2018X\u2019\u3002\u7b2c\u4e8c\u79cd\u89e3\u6cd5\u662f DFS \u6216\u8005 BFS\uff0c\u53ef\u4ee5\u5148\u5c06\u8fb9\u7f18\u4e0a\u7684 \u2018O\u2019 \u5148\u6807\u8bb0\u6210\u53e6\u5916\u4e00\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5728\u9012\u5f52\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u628a\u5269\u4e0b\u7684 \u2018O\u2019 \u90fd\u6807\u8bb0\u6210 \u2018X\u2019\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--27",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0130.Surrounded-Regions/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nimport (\n\t\"github.com/halfrost/leetcode-go/template\"\n)\n\n// \u89e3\u6cd5\u4e00 \u5e76\u67e5\u96c6\nfunc solve(board [][]byte) {\n\tif len(board) == 0 {\n\t\treturn\n\t}\n\tm, n := len(board[0]), len(board)\n\tuf := template.UnionFind{}\n\tuf.Init(n*m + 1) // \u7279\u610f\u591a\u4e00\u4e2a\u7279\u6b8a\u70b9\u7528\u6765\u6807\u8bb0\n\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < m; j++ {\n\t\t\tif (i == 0 || i == n-1 || j == 0 || j == m-1) && board[i][j] == 'O' { //\u68cb\u76d8\u8fb9\u7f18\u4e0a\u7684 'O' \u70b9\n\t\t\t\tuf.Union(i*m+j, n*m)\n\t\t\t} else if board[i][j] == 'O' { //\u68cb\u76d8\u975e\u8fb9\u7f18\u4e0a\u7684\u5185\u90e8\u7684 'O' \u70b9\n\t\t\t\tif board[i-1][j] == 'O' {\n\t\t\t\t\tuf.Union(i*m+j, (i-1)*m+j)\n\t\t\t\t}\n\t\t\t\tif board[i+1][j] == 'O' {\n\t\t\t\t\tuf.Union(i*m+j, (i+1)*m+j)\n\t\t\t\t}\n\t\t\t\tif board[i][j-1] == 'O' {\n\t\t\t\t\tuf.Union(i*m+j, i*m+j-1)\n\t\t\t\t}\n\t\t\t\tif board[i][j+1] == 'O' {\n\t\t\t\t\tuf.Union(i*m+j, i*m+j+1)\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < m; j++ {\n\t\t\tif uf.Find(i*m+j) != uf.Find(n*m) {\n\t\t\t\tboard[i][j] = 'X'\n\t\t\t}\n\t\t}\n\t}\n}\n\n// \u89e3\u6cd5\u4e8c DFS\nfunc solve1(board [][]byte) {\n\tfor i := range board {\n\t\tfor j := range board[i] {\n\t\t\tif i == 0 || i == len(board)-1 || j == 0 || j == len(board[i])-1 {\n\t\t\t\tif board[i][j] == 'O' {\n\t\t\t\t\tdfs130(i, j, board)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfor i := range board {\n\t\tfor j := range board[i] {\n\t\t\tif board[i][j] == '*' {\n\t\t\t\tboard[i][j] = 'O'\n\t\t\t} else if board[i][j] == 'O' {\n\t\t\t\tboard[i][j] = 'X'\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc dfs130(i, j int, board [][]byte) {\n\tif i < 0 || i > len(board)-1 || j < 0 || j > len(board[i])-1 {\n\t\treturn\n\t}\n\tif board[i][j] == 'O' {\n\t\tboard[i][j] = '*'\n\t\tfor k := 0; k < 4; k++ {\n\t\t\tdfs130(i+dir[k][0], j+dir[k][1], board)\n\t\t}\n\t}\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"131-palindrome-partitioning-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/palindrome-partitioning/",children:"131. Palindrome Partitioning"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/#131-palindrome-partitioninghttpsleetcodecomproblemspalindrome-partitioning",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--28",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given a string ",(0,i.jsx)(n.em,{children:"s"}),", partition ",(0,i.jsx)(n.em,{children:"s"})," such that every substring of the partition is a palindrome."]}),"\n",(0,i.jsxs)(n.p,{children:["Return all possible palindrome partitioning of ",(0,i.jsx)(n.em,{children:"s"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input: "aab"\nOutput:\n[\n  ["aa","b"],\n  ["a","a","b"]\n]\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--28",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32 s\uff0c\u5c06 s \u5206\u5272\u6210\u4e00\u4e9b\u5b50\u4e32\uff0c\u4f7f\u6bcf\u4e2a\u5b50\u4e32\u90fd\u662f\u56de\u6587\u4e32\u3002\u8fd4\u56de s \u6240\u6709\u53ef\u80fd\u7684\u5206\u5272\u65b9\u6848\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--28",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8981\u6c42\u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26\u4e32\u53ef\u4ee5\u88ab\u62c6\u6210\u56de\u6587\u4e32\u7684\u6240\u6709\u89e3\uff0cDFS \u9012\u5f52\u6c42\u89e3\u5373\u53ef\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--28",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0131.Palindrome-Partitioning/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\n// \u89e3\u6cd5\u4e00\nfunc partition131(s string) [][]string {\n\tif s == "" {\n\t\treturn [][]string{}\n\t}\n\tres, pal := [][]string{}, []string{}\n\tfindPalindrome(s, 0, "", true, pal, &res)\n\treturn res\n}\n\nfunc findPalindrome(str string, index int, s string, isPal bool, pal []string, res *[][]string) {\n\tif index == len(str) {\n\t\tif isPal {\n\t\t\ttmp := make([]string, len(pal))\n\t\t\tcopy(tmp, pal)\n\t\t\t*res = append(*res, tmp)\n\t\t}\n\t\treturn\n\t}\n\tif index == 0 {\n\t\ts = string(str[index])\n\t\tpal = append(pal, s)\n\t\tfindPalindrome(str, index+1, s, isPal && isPalindrome131(s), pal, res)\n\t} else {\n\t\ttemp := pal[len(pal)-1]\n\t\ts = pal[len(pal)-1] + string(str[index])\n\t\tpal[len(pal)-1] = s\n\t\tfindPalindrome(str, index+1, s, isPalindrome131(s), pal, res)\n\t\tpal[len(pal)-1] = temp\n\t\tif isPalindrome131(temp) {\n\t\t\tpal = append(pal, string(str[index]))\n\t\t\tfindPalindrome(str, index+1, temp, isPal && isPalindrome131(temp), pal, res)\n\t\t\tpal = pal[:len(pal)-1]\n\n\t\t}\n\t}\n\treturn\n}\n\nfunc isPalindrome131(s string) bool {\n\tslen := len(s)\n\tfor i, j := 0, slen-1; i < j; i, j = i+1, j-1 {\n\t\tif s[i] != s[j] {\n\t\t\treturn false\n\t\t}\n\t}\n\treturn true\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc partition131_1(s string) [][]string {\n\tresult := [][]string{}\n\tsize := len(s)\n\tif size == 0 {\n\t\treturn result\n\t}\n\tcurrent := make([]string, 0, size)\n\tdfs131(s, 0, current, &result)\n\treturn result\n}\n\nfunc dfs131(s string, idx int, cur []string, result *[][]string) {\n\tstart, end := idx, len(s)\n\tif start == end {\n\t\ttemp := make([]string, len(cur))\n\t\tcopy(temp, cur)\n\t\t*result = append(*result, temp)\n\t\treturn\n\t}\n\tfor i := start; i < end; i++ {\n\t\tif isPal(s, start, i) {\n\t\t\tdfs131(s, i+1, append(cur, s[start:i+1]), result)\n\t\t}\n\t}\n}\n\nfunc isPal(str string, s, e int) bool {\n\tfor s < e {\n\t\tif str[s] != str[e] {\n\t\t\treturn false\n\t\t}\n\t\ts++\n\t\te--\n\t}\n\treturn true\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"135-candy-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/candy/",children:"135. Candy"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0135.Candy/#135-candyhttpsleetcodecomproblemscandy",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--29",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0135.Candy/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["There are ",(0,i.jsx)(n.code,{children:"n"})," children standing in a line. Each child is assigned a rating value given in the integer array ",(0,i.jsx)(n.code,{children:"ratings"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"You are giving candies to these children subjected to the following requirements:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Each child must have at least one candy."}),"\n",(0,i.jsx)(n.li,{children:"Children with a higher rating get more candies than their neighbors."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Return ",(0,i.jsx)(n.em,{children:"the minimum number of candies you need to have to distribute the candies to the children"}),"."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: ratings = [1,0,2]\nOutput: 5\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: ratings = [1,2,2]\nOutput: 4\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\nThe third child gets 1 candy because it satisfies the above two conditions.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"n == ratings.length"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= n <= 2 * 10^4"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 <= ratings[i] <= 2 * 10^4"})}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--29",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0135.Candy/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u8001\u5e08\u60f3\u7ed9\u5b69\u5b50\u4eec\u5206\u53d1\u7cd6\u679c\uff0c\u6709 N \u4e2a\u5b69\u5b50\u7ad9\u6210\u4e86\u4e00\u6761\u76f4\u7ebf\uff0c\u8001\u5e08\u4f1a\u6839\u636e\u6bcf\u4e2a\u5b69\u5b50\u7684\u8868\u73b0\uff0c\u9884\u5148\u7ed9\u4ed6\u4eec\u8bc4\u5206\u3002\u4f60\u9700\u8981\u6309\u7167\u4ee5\u4e0b\u8981\u6c42\uff0c\u5e2e\u52a9\u8001\u5e08\u7ed9\u8fd9\u4e9b\u5b69\u5b50\u5206\u53d1\u7cd6\u679c\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6bcf\u4e2a\u5b69\u5b50\u81f3\u5c11\u5206\u914d\u5230 1 \u4e2a\u7cd6\u679c\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u8bc4\u5206\u66f4\u9ad8\u7684\u5b69\u5b50\u5fc5\u987b\u6bd4\u4ed6\u4e24\u4fa7\u7684\u90bb\u4f4d\u5b69\u5b50\u83b7\u5f97\u66f4\u591a\u7684\u7cd6\u679c\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u90a3\u4e48\u8fd9\u6837\u4e0b\u6765\uff0c\u8001\u5e08\u81f3\u5c11\u9700\u8981\u51c6\u5907\u591a\u5c11\u9897\u7cd6\u679c\u5462\uff1f"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--29",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0135.Candy/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u672c\u9898\u7684\u7a81\u7834\u53e3\u5728\u4e8e\uff0c\u8bc4\u5206\u66f4\u9ad8\u7684\u5b69\u5b50\u5fc5\u987b\u6bd4\u4ed6\u4e24\u4fa7\u7684\u90bb\u4f4d\u5b69\u5b50\u83b7\u5f97\u66f4\u591a\u7684\u7cd6\u679c\uff0c\u8fd9\u53e5\u8bdd\u3002\u8fd9\u4e2a\u89c4\u5219\u53ef\u4ee5\u7406\u89e3\u4e3a 2 \u6761\u89c4\u5219\uff0c\u60f3\u8c61\u6210\u6309\u8eab\u9ad8\u6392\u961f\uff0c\u7ad9\u5728\u4e0b\u6807\u4e3a 0 \u7684\u5730\u65b9\u5f80\u540e\u201c\u770b\u201d\uff0c\u8bc4\u5206\u9ad8\u5373\u4e3a\u4e2a\u5b50\u9ad8\u7684\uff0c\u5e94\u8be5\u6bd4\u524d\u9762\u4e2a\u5b50\u77ee(\u8bc4\u5206\u4f4e)\u7684\u5206\u5230\u7cd6\u679c\u591a\uff1b\u7ad9\u5728\u4e0b\u6807\u4e3a n - 1 \u7684\u5730\u65b9\u5f80\u540e\u201c\u770b\u201d\uff0c\u8bc4\u5206\u9ad8\u5373\u4e3a\u4e2a\u5b50\u9ad8\u7684\uff0c\u540c\u6837\u5e94\u8be5\u6bd4\u524d\u9762\u4e2a\u5b50\u77ee(\u8bc4\u5206\u4f4e)\u7684\u5206\u5230\u7cd6\u679c\u591a\u3002\u4f60\u53ef\u80fd\u4f1a\u6709\u7591\u95ee\uff0c\u89c4\u5219\u90fd\u662f\u4e00\u6837\u7684\uff0c\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0\u81f3\u5c11\u9700\u8981\u591a\u5c11\u7cd6\u679c\u5462\uff1f\u56e0\u4e3a\u53ef\u80fd\u51fa\u73b0\u8bc4\u5206\u4e00\u6837\u9ad8\u7684\u540c\u5b66\u3002\u626b\u63cf\u6570\u7ec4\u4e24\u6b21\uff0c\u5904\u7406\u51fa\u6bcf\u4e00\u4e2a\u5b66\u751f\u5206\u522b\u6ee1\u8db3\u5de6\u89c4\u5219\u6216\u53f3\u89c4\u5219\u65f6\uff0c\u6700\u5c11\u9700\u8981\u88ab\u5206\u5f97\u7684\u7cd6\u679c\u6570\u91cf\u3002\u6bcf\u4e2a\u4eba\u6700\u7ec8\u5206\u5f97\u7684\u7cd6\u679c\u6570\u91cf\u5373\u4e3a\u8fd9\u4e24\u4e2a\u6570\u91cf\u7684\u6700\u5927\u503c\u3002\u4e24\u6b21\u904d\u5386\u7ed3\u675f\uff0c\u5c06\u6240\u6709\u7cd6\u679c\u7d2f\u52a0\u8d77\u6765\u5373\u4e3a\u81f3\u5c11\u9700\u8981\u51c6\u5907\u7684\u7cd6\u679c\u6570\u3002\u7531\u4e8e\u6bcf\u4e2a\u4eba\u81f3\u5c11\u5206\u914d\u5230 1 \u4e2a\u7cd6\u679c\uff0c\u6240\u4ee5\u6bcf\u4e2a\u4eba\u7cd6\u679c\u6570\u518d\u52a0\u4e00\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--29",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0135.Candy/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc candy(ratings []int) int {\n\tcandies := make([]int, len(ratings))\n\tfor i := 1; i < len(ratings); i++ {\n\t\tif ratings[i] > ratings[i-1] {\n\t\t\tcandies[i] += candies[i-1] + 1\n\t\t}\n\t}\n\tfor i := len(ratings) - 2; i >= 0; i-- {\n\t\tif ratings[i] > ratings[i+1] && candies[i] <= candies[i+1] {\n\t\t\tcandies[i] = candies[i+1] + 1\n\t\t}\n\t}\n\ttotal := 0\n\tfor _, candy := range candies {\n\t\ttotal += candy + 1\n\t}\n\treturn total\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"136-single-number-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/single-number/",children:"136. Single Number"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/#136-single-numberhttpsleetcodecomproblemssingle-number",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--30",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given a ",(0,i.jsx)(n.strong,{children:"non-empty"})," array of integers, every element appears ",(0,i.jsx)(n.em,{children:"twice"})," except for one. Find that single one."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [2,2,1]\nOutput: 1\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [4,1,2,1,2]\nOutput: 4\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--30",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e24\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff0c\u5e76\u4e14\u4e0d\u4f7f\u7528\u989d\u5916\u7684\u8f85\u52a9\u7a7a\u95f4\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--30",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u9898\u76ee\u8981\u6c42\u4e0d\u80fd\u4f7f\u7528\u8f85\u52a9\u7a7a\u95f4\uff0c\u5e76\u4e14\u65f6\u95f4\u590d\u6742\u5ea6\u53ea\u80fd\u662f\u7ebf\u6027\u7684\u3002"}),"\n",(0,i.jsxs)(n.li,{children:["\u9898\u76ee\u4e3a\u4ec0\u4e48\u8981\u5f3a\u8c03\u6709\u4e00\u4e2a\u6570\u5b57\u51fa\u73b0\u4e00\u6b21\uff0c\u5176\u4ed6\u7684\u51fa\u73b0\u4e24\u6b21\uff1f\u6211\u4eec\u60f3\u5230\u4e86\u5f02\u6216\u8fd0\u7b97\u7684\u6027\u8d28\uff1a\u4efb\u4f55\u4e00\u4e2a\u6570\u5b57\u5f02\u6216\u5b83\u81ea\u5df1\u90fd\u7b49\u4e8e0\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u6211\u4eec\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u5f02\u6216\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u6700\u7ec8\u7684\u7ed3\u679c\u521a\u597d\u662f\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\uff0c\u56e0\u4e3a\u90a3\u4e9b\u51fa\u73b0\u4e24\u6b21\u7684\u6570\u5b57\u5168\u90e8\u5728\u5f02\u6216\u4e2d\u62b5\u6d88\u6389\u4e86\u3002\u4e8e\u662f\u6700\u7ec8\u505a\u6cd5\u662f\u4ece\u5934\u5230\u5c3e\u4f9d\u6b21\u5f02\u6216\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u6700\u7ec8\u5f97\u5230\u7684\u7ed3\u679c\u5c31\u662f\u4e24\u4e2a\u53ea\u51fa\u73b0\u4e00\u6b21\u7684\u6570\u5b57\u7684\u5f02\u6216\u7ed3\u679c\u3002\u56e0\u4e3a\u5176\u4ed6\u6570\u5b57\u90fd\u51fa\u73b0\u4e86\u4e24\u6b21\uff0c\u5728\u5f02\u6216\u4e2d\u5168\u90e8\u62b5\u6d88\u6389\u4e86\u3002",(0,i.jsx)(n.strong,{children:"\u5229\u7528\u7684\u6027\u8d28\u662f x^x = 0"}),"\u3002"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--30",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0136.Single-Number/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc singleNumber(nums []int) int {\n\tresult := 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tresult ^= nums[i]\n\t}\n\treturn result\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"137-single-number-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/single-number-ii/",children:"137. Single Number II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0137.Single-Number-II/#137-single-number-iihttpsleetcodecomproblemssingle-number-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--31",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0137.Single-Number-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Given a ",(0,i.jsx)(n.strong,{children:"non-empty"})," array of integers, every element appears ",(0,i.jsx)(n.em,{children:"three"})," times except for one, which appears exactly once. Find that single one."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [2,2,3,2]\nOutput: 3\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [0,1,0,1,0,1,99]\nOutput: 99\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--31",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0137.Single-Number-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u975e\u7a7a\u6574\u6570\u6570\u7ec4\uff0c\u9664\u4e86\u67d0\u4e2a\u5143\u7d20\u53ea\u51fa\u73b0\u4e00\u6b21\u4ee5\u5916\uff0c\u5176\u4f59\u6bcf\u4e2a\u5143\u7d20\u5747\u51fa\u73b0\u4e86\u4e09\u6b21\u3002\u627e\u51fa\u90a3\u4e2a\u53ea\u51fa\u73b0\u4e86\u4e00\u6b21\u7684\u5143\u7d20\u3002\u8981\u6c42\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\uff0c\u5e76\u4e14\u4e0d\u4f7f\u7528\u989d\u5916\u7684\u8f85\u52a9\u7a7a\u95f4\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--31",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0137.Single-Number-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u662f\u7b2c 136 \u9898\u7684\u52a0\u5f3a\u7248\u3002\u8fd9\u7c7b\u9898\u4e5f\u53ef\u4ee5\u6269\u5c55\uff0c\u5728\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u51fa\u73b0 5 \u6b21\uff0c\u627e\u51fa\u53ea\u51fa\u73b0 1 \u6b21\u7684\u6570\u3002"}),"\n",(0,i.jsxs)(n.li,{children:["\u672c\u9898\u4e2d\u8981\u6c42\u627e\u51fa\u53ea\u51fa\u73b0 1 \u6b21\u7684\u6570\uff0c\u51fa\u73b0 3 \u6b21\u7684\u6570\u90fd\u8981\u88ab\u6d88\u9664\u3002\u7b2c 136 \u9898\u662f\u6d88\u9664\u51fa\u73b0 2 \u6b21\u7684\u6570\u3002\u8fd9\u4e00\u9898\u4e5f\u4f1a\u76f8\u5f53\u76f8\u540c\u7684\u89e3\u6cd5\uff0c\u51fa\u73b0 3 \u6b21\u7684\u6570\u4e5f\u8981\u88ab\u6d88\u9664\u3002\u5b9a\u4e49\u72b6\u6001\uff0c00\u300110\u300101\uff0c\u8fd9 3 \u4e2a\u72b6\u6001\u3002\u5f53\u4e00\u4e2a\u6570\u51fa\u73b0 3 \u6b21\uff0c\u90a3\u4e48\u5b83\u6bcf\u4e2a\u4f4d\u7f6e\u4e0a\u7684 1 \u51fa\u73b0\u7684\u6b21\u6570\u80af\u5b9a\u662f 3 \u7684\u500d\u6570\uff0c\u6240\u4ee5\u5f53 1 \u51fa\u73b0 3 \u6b21\u4ee5\u540e\uff0c\u5c31\u5f52\u96f6\u6e05\u9664\u3002\u5982\u4f55\u80fd\u505a\u5230\u8fd9\u70b9\u5462\uff1f\u4eff\u9020",(0,i.jsx)(n.code,{children:"\u4e09\u8fdb\u5236(00\uff0c01\uff0c10)"})," \u5c31\u53ef\u4ee5\u505a\u5230\u3002"]}),"\n",(0,i.jsxs)(n.li,{children:["\u53d8\u91cf ones \u4e2d\u8bb0\u5f55\u904d\u5386\u4e2d\u6bcf\u4e2a\u4f4d\u4e0a\u51fa\u73b0 1 \u7684\u4e2a\u6570\u3002\u5c06\u5b83\u4e0e A[i] \u8fdb\u884c\u5f02\u6216\uff0c\u76ee\u7684\u662f\uff1a","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u6bcf\u4f4d\u4e0a\u4e24\u8005\u90fd\u662f 1 \u7684\uff0c\u8868\u793a\u5386\u53f2\u7edf\u8ba1\u7ed3\u679c ones \u51fa\u73b01\u6b21\u3001A[i]\u4e2d\u53c8\u51fa\u73b0 1 \u6b21\uff0c\u5219\u662f\u51fa\u73b0 2 \u6b21\uff0c\u9700\u8981\u8fdb\u4f4d\u5230 twos \u53d8\u91cf\u4e2d\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6bcf\u4f4d\u4e0a\u4e24\u8005\u5206\u522b\u4e3a 0\u30011 \u7684\uff0c\u52a0\u5165\u5230 ones \u7edf\u8ba1\u7ed3\u679c\u4e2d\u3002"}),"\n",(0,i.jsx)(n.li,{children:"\u6700\u540e\u8fd8\u8981 & ^twos \uff0c\u662f\u4e3a\u4e86\u80fd\u505a\u5230\u4e09\u8fdb\u5236\uff0c\u51fa\u73b0 3 \u6b21\u5c31\u6e05\u96f6\u3002\u4f8b\u5982 ones = x\uff0c\u90a3\u4e48 twos = 0\uff0c\u5f53 twos = x\uff0c\u90a3\u4e48 ones = 0\uff1b"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"\u53d8\u91cf twos \u4e2d\u8bb0\u5f55\u904d\u5386\u4e2d\u6bcf\u4e2a\u4f4d\u4e0a\u51fa\u73b0 1 \uff0c2\u6b21 \u7684\u4e2a\u6570\u3002\u4e0e A[i] \u8fdb\u884c\u5f02\u6216\u7684\u76ee\u7684\u548c\u4e0a\u8ff0\u63cf\u8ff0\u76f8\u540c\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u5728 golang \u4e2d\uff0c&^ \u8868\u793a AND NOT \u7684\u610f\u601d\u3002\u8fd9\u91cc\u7684 ^ \u4f5c\u4e3a\u4e00\u5143\u64cd\u4f5c\u7b26\uff0c\u8868\u793a\u6309\u4f4d\u53d6\u53cd (^0001 0100 = 1110 1011)\uff0cX &^ Y \u7684\u610f\u601d\u662f\u5c06 X \u4e2d\u4e0e Y \u76f8\u5f02\u7684\u4f4d\u4fdd\u7559\uff0c\u76f8\u540c\u7684\u4f4d\u6e05\u96f6\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"\u5728 golang \u4e2d\u6ca1\u6709 Java \u4e2d\u7684 ~ \u4f4d\u64cd\u4f5c\u8fd0\u7b97\u7b26\uff0cJava \u4e2d\u7684 ~ \u8fd0\u7b97\u7b26\u4ee3\u8868\u6309\u4f4d\u53d6\u53cd\u3002\u8fd9\u4e2a\u64cd\u4f5c\u5c31\u60f3\u5f53\u4e8e golang \u4e2d\u7684 ^ \u8fd0\u7b97\u7b26\u5f53\u505a\u4e00\u5143\u8fd0\u7b97\u7b26\u4f7f\u7528\u7684\u6548\u679c\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"(twos,ones)"}),(0,i.jsx)(n.th,{children:"xi"}),(0,i.jsx)(n.th,{children:"(twos\u2019',ones\u2019)"}),(0,i.jsx)(n.th,{children:"ones\u2019"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"00"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"00"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"00"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"01"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"01"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"01"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"01"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"00"}),(0,i.jsx)(n.td,{children:"0"})]})]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7b2c\u4e00\u6b65\uff0c\u5148\u5c06 ones -> ones\u2019\u3002\u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u770b\u51fa ones = (ones ^ nums[i]) & ^twos"}),"\n"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"(twos,ones\u2019)"}),(0,i.jsx)(n.th,{children:"xi"}),(0,i.jsx)(n.th,{children:"twos\u2019"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"00"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"01"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"01"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"0"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"00"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:"1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"0"})]})]})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u7b2c\u4e8c\u6b65\uff0c\u518d\u5c06 twos -> twos\u2019\u3002\u8fd9\u4e00\u6b65\u9700\u8981\u7528\u5230\u524d\u4e00\u6b65\u7684 ones\u3002\u901a\u8fc7\u89c2\u5bdf\u53ef\u4ee5\u770b\u51fa twos = (twos ^ nums[i]) & ^ones\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u4e00\u9898\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u6269\u5c55\uff0c\u5728\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u51fa\u73b0 5 \u6b21\uff0c\u627e\u51fa\u53ea\u51fa\u73b0 1 \u6b21\u7684\u6570\u3002\u90a3\u8be5\u600e\u4e48\u505a\u5462\uff1f\u601d\u8def\u8fd8\u662f\u4e00\u6837\u7684\uff0c\u6a21\u62df\u4e00\u4e2a\u4e94\u8fdb\u5236\uff0c5 \u6b21\u5c31\u4f1a\u6d88\u9664\u3002\u4ee3\u7801\u5982\u4e0b\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"// \u89e3\u6cd5\u4e00\nfunc singleNumberIII(nums []int) int {\n    na, nb, nc := 0, 0, 0\n    for i := 0; i < len(nums); i++ {\n        nb = nb ^ (nums[i] & na)\n        na = (na ^ nums[i]) & ^nc\n        nc = nc ^ (nums[i] & ^na & ^nb)\n    }\n    return na & ^nb & ^nc\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc singleNumberIIII(nums []int) int {\n    twos, threes, ones := 0xffffffff, 0xffffffff, 0\n    for i := 0; i < len(nums); i++ {\n        threes = threes ^ (nums[i] & twos)\n        twos = (twos ^ nums[i]) & ^ones\n        ones = ones ^ (nums[i] & ^twos & ^threes)\n    }\n    return ones\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--31",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0137.Single-Number-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\nfunc singleNumberII(nums []int) int {\n\tones, twos := 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tones = (ones ^ nums[i]) & ^twos\n\t\ttwos = (twos ^ nums[i]) & ^ones\n\t}\n\treturn ones\n}\n\n// \u4ee5\u4e0b\u662f\u62d3\u5c55\u9898\n// \u5728\u6570\u7ec4\u4e2d\u6bcf\u4e2a\u5143\u7d20\u90fd\u51fa\u73b0 5 \u6b21\uff0c\u627e\u51fa\u53ea\u51fa\u73b0 1 \u6b21\u7684\u6570\u3002\n\n// \u89e3\u6cd5\u4e00\nfunc singleNumberIIIII(nums []int) int {\n\tna, nb, nc := 0, 0, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tnb = nb ^ (nums[i] & na)\n\t\tna = (na ^ nums[i]) & ^nc\n\t\tnc = nc ^ (nums[i] & ^na & ^nb)\n\t}\n\treturn na & ^nb & ^nc\n}\n\n// \u89e3\u6cd5\u4e8c\nfunc singleNumberIIIII1(nums []int) int {\n\ttwos, threes, ones := 0xffffffff, 0xffffffff, 0\n\tfor i := 0; i < len(nums); i++ {\n\t\tthrees = threes ^ (nums[i] & twos)\n\t\ttwos = (twos ^ nums[i]) & ^ones\n\t\tones = ones ^ (nums[i] & ^twos & ^threes)\n\t}\n\treturn ones\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"138-copy-list-with-random-pointer-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/copy-list-with-random-pointer/",children:"138. Copy List with Random Pointer"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/#138-copy-list-with-random-pointerhttpsleetcodecomproblemscopy-list-with-random-pointer",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--32",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null."}),"\n",(0,i.jsxs)(n.p,{children:["Return a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Object_copying#Deep_copy",children:"deep copy"})})," of the list."]}),"\n",(0,i.jsxs)(n.p,{children:["The Linked List is represented in the input/output as a list of ",(0,i.jsx)(n.code,{children:"n"})," nodes. Each node is represented as a pair of ",(0,i.jsx)(n.code,{children:"[val, random_index]"})," where:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"val"}),": an integer representing ",(0,i.jsx)(n.code,{children:"Node.val"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"random_index"}),": the index of the node (range from ",(0,i.jsx)(n.code,{children:"0"})," to ",(0,i.jsx)(n.code,{children:"n-1"}),") where random pointer points to, or ",(0,i.jsx)(n.code,{children:"null"})," if it does not point to any node."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 1:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/12/18/e1.png",alt:"img"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 2:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/12/18/e2.png",alt:"img"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [[1,1],[2,1]]\nOutput: [[1,1],[2,1]]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 3:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://assets.leetcode.com/uploads/2019/12/18/e3.png",alt:"img"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [[3,null],[3,0],[3,null]]\nOutput: [[3,null],[3,0],[3,null]]\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example 4:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = []\nOutput: []\nExplanation: Given linked list is empty (null pointer), so return null.\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Constraints:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"10000 <= Node.val <= 10000"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Node.random"})," is null or pointing to a node in the linked list."]}),"\n",(0,i.jsx)(n.li,{children:"The number of nodes will not exceed 1000."}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--32",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\uff0c\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a\u989d\u5916\u589e\u52a0\u7684\u968f\u673a\u6307\u9488\uff0c\u8be5\u6307\u9488\u53ef\u4ee5\u6307\u5411\u94fe\u8868\u4e2d\u7684\u4efb\u4f55\u8282\u70b9\u6216\u7a7a\u8282\u70b9\u3002\u8981\u6c42\u8fd4\u56de\u8fd9\u4e2a\u94fe\u8868\u7684 \u6df1\u62f7\u8d1d\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u6211\u4eec\u7528\u4e00\u4e2a\u7531 n \u4e2a\u8282\u70b9\u7ec4\u6210\u7684\u94fe\u8868\u6765\u8868\u793a\u8f93\u5165/\u8f93\u51fa\u4e2d\u7684\u94fe\u8868\u3002\u6bcf\u4e2a\u8282\u70b9\u7528\u4e00\u4e2a [val, random_index] \u8868\u793a\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"val\uff1a\u4e00\u4e2a\u8868\u793a Node.val \u7684\u6574\u6570\u3002"}),"\n",(0,i.jsx)(n.li,{children:"random_index\uff1a\u968f\u673a\u6307\u9488\u6307\u5411\u7684\u8282\u70b9\u7d22\u5f15\uff08\u8303\u56f4\u4ece 0 \u5230 n-1\uff09\uff1b\u5982\u679c\u4e0d\u6307\u5411\u4efb\u4f55\u8282\u70b9\uff0c\u5219\u4e3a null \u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--32",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u8fd9\u9053\u9898\u4e25\u683c\u610f\u4e49\u4e0a\u662f\u6570\u636e\u7ed3\u6784\u9898\uff0c\u6839\u636e\u7ed9\u5b9a\u7684\u6570\u636e\u7ed3\u6784\uff0c\u5bf9\u5b83\u8fdb\u884c\u6df1\u62f7\u8d1d\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"\u5148\u5c06\u6bcf\u4e2a\u8282\u70b9\u90fd\u590d\u5236\u4e00\u4efd\uff0c\u653e\u5728\u5b83\u7684 next \u8282\u70b9\u4e2d\u3002\u5982\u6b64\u7a7f\u63d2\u7684\u590d\u5236\u4e00\u4efd\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.halfrost.com/Leetcode/leetcode_138_1_0.png",alt:"https://img.halfrost.com/Leetcode/leetcode_138_1_0.png"})}),"\n",(0,i.jsx)(n.p,{children:"\u518d\u5c06\u7a7f\u63d2\u7248\u7684\u94fe\u8868\u7684 random \u6307\u9488\u6307\u5411\u6b63\u786e\u7684\u4f4d\u7f6e\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.halfrost.com/Leetcode/leetcode_138_2.png",alt:"https://img.halfrost.com/Leetcode/leetcode_138_2.png"})}),"\n",(0,i.jsx)(n.p,{children:"\u518d\u5c06\u7a7f\u63d2\u7248\u7684\u94fe\u8868\u7684 next \u6307\u9488\u6307\u5411\u6b63\u786e\u7684\u4f4d\u7f6e\u3002\u6700\u540e\u5206\u5f00\u8fd9\u4ea4\u7ec7\u5728\u4e00\u8d77\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9\uff0c\u5373\u53ef\u5206\u5f00 2 \u4e2a\u94fe\u8868\u3002"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://img.halfrost.com/Leetcode/leetcode_138_3.png",alt:"https://img.halfrost.com/Leetcode/leetcode_138_3.png"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--32",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0138.Copy-List-With-Random-Pointer/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n// Node define\ntype Node struct {\n\tVal    int\n\tNext   *Node\n\tRandom *Node\n}\n\nfunc copyRandomList(head *Node) *Node {\n\tif head == nil {\n\t\treturn nil\n\t}\n\ttempHead := copyNodeToLinkedList(head)\n\treturn splitLinkedList(tempHead)\n}\n\nfunc splitLinkedList(head *Node) *Node {\n\tcur := head\n\thead = head.Next\n\tfor cur != nil && cur.Next != nil {\n\t\tcur.Next, cur = cur.Next.Next, cur.Next\n\t}\n\treturn head\n}\n\nfunc copyNodeToLinkedList(head *Node) *Node {\n\tcur := head\n\tfor cur != nil {\n\t\tnode := &Node{\n\t\t\tVal:  cur.Val,\n\t\t\tNext: cur.Next,\n\t\t}\n\t\tcur.Next, cur = node, cur.Next\n\t}\n\tcur = head\n\tfor cur != nil {\n\t\tif cur.Random != nil {\n\t\t\tcur.Next.Random = cur.Random.Next\n\t\t}\n\t\tcur = cur.Next.Next\n\t}\n\treturn head\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"141-linked-list-cycle-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle/description/",children:"141. Linked List Cycle"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/#141-linked-list-cyclehttpsleetcodecomproblemslinked-list-cycledescription",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--33",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a linked list, determine if it has a cycle in it."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Follow up"}),":\nCan you solve it without using extra space?"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--33",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af\uff0c\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--33",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u7ed9 2 \u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u662f\u53e6\u5916\u4e00\u4e2a\u6307\u9488\u7684\u4e0b\u4e00\u4e2a\u6307\u9488\u3002\u5feb\u6307\u9488\u4e00\u6b21\u8d70 2 \u683c\uff0c\u6162\u6307\u9488\u4e00\u6b21\u8d70 1 \u683c\u3002\u5982\u679c\u5b58\u5728\u73af\uff0c\u90a3\u4e48\u524d\u4e00\u4e2a\u6307\u9488\u4e00\u5b9a\u4f1a\u7ecf\u8fc7\u82e5\u5e72\u5708\u4e4b\u540e\u8ffd\u4e0a\u6162\u7684\u6307\u9488\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--33",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0141.Linked-List-Cycle/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'package leetcode\n\nimport (\n\t"github.com/halfrost/leetcode-go/structures"\n)\n\n// ListNode define\ntype ListNode = structures.ListNode\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\nfunc hasCycle(head *ListNode) bool {\n\tfast := head\n\tslow := head\n\tfor fast != nil && fast.Next != nil {\n\t\tfast = fast.Next.Next\n\t\tslow = slow.Next\n\t\tif fast == slow {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n'})}),"\n",(0,i.jsxs)(n.h1,{id:"142-linked-list-cycle-ii-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/linked-list-cycle-ii/",children:"142. Linked List Cycle II"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/#142-linked-list-cycle-iihttpsleetcodecomproblemslinked-list-cycle-ii",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--34",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a linked list, return the node where the cycle begins. If there is no cycle, return null."}),"\n",(0,i.jsx)(n.p,{children:"To represent a cycle in the given linked list, we use an integer pos which represents the position (0-indexed) in the linked list where tail connects to. If pos is -1, then there is no cycle in the linked list."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": Do not modify the linked list."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [3,2,0,-4], pos = 1\nOutput: tail connects to node index 1\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [1,2], pos = 0\nOutput: tail connects to node index 0\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 3"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: head = [1], pos = -1\nOutput: no cycle\nExplanation: There is no cycle in the linked list.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--34",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709\u73af\uff0c\u4e0d\u80fd\u4f7f\u7528\u989d\u5916\u7684\u7a7a\u95f4\u3002\u5982\u679c\u6709\u73af\uff0c\u8f93\u51fa\u73af\u7684\u8d77\u70b9\u6307\u9488\uff0c\u5982\u679c\u6ca1\u6709\u73af\uff0c\u5219\u8f93\u51fa\u7a7a\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--34",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u8fd9\u9053\u9898\u662f\u7b2c 141 \u9898\u7684\u52a0\u5f3a\u7248\u3002\u5728\u5224\u65ad\u662f\u5426\u6709\u73af\u7684\u57fa\u7840\u4e0a\uff0c\u8fd8\u9700\u8981\u8f93\u51fa\u73af\u7684\u7b2c\u4e00\u4e2a\u70b9\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u5206\u6790\u4e00\u4e0b\u5224\u65ad\u73af\u7684\u539f\u7406\u3002fast \u6307\u9488\u4e00\u6b21\u90fd 2 \u6b65\uff0cslow \u6307\u9488\u4e00\u6b21\u8d70 1 \u6b65\u3002\u4ee4\u94fe\u8868 head \u5230\u73af\u7684\u4e00\u4e2a\u70b9\u9700\u8981 x1 \u6b65\uff0c\u4ece\u73af\u7684\u7b2c\u4e00\u4e2a\u70b9\u5230\u76f8\u9047\u70b9\u9700\u8981 x2 \u6b65\uff0c\u4ece\u73af\u4e2d\u76f8\u9047\u70b9\u56de\u5230\u73af\u7684\u7b2c\u4e00\u4e2a\u70b9\u9700\u8981 x3 \u6b65\u3002\u90a3\u4e48\u73af\u7684\u603b\u957f\u5ea6\u662f x2 + x3 \u6b65\u3002"}),"\n",(0,i.jsx)(n.p,{children:"fast \u548c slow \u4f1a\u76f8\u9047\uff0c\u8bf4\u660e\u4ed6\u4eec\u8d70\u7684\u65f6\u95f4\u662f\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u77e5\u9053\u4ed6\u4eec\u8d70\u7684\u8def\u7a0b\u6709\u4ee5\u4e0b\u7684\u5173\u7cfb\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:"fast \u7684 t = (x1 + x2 + x3 + x2) / 2\nslow \u7684 t = (x1 + x2) / 1\n\nx1 + x2 + x3 + x2 = 2 * (x1 + x2)\n\n\u6240\u4ee5 x1 = x3\n"})}),"\n",(0,i.jsx)(n.p,{children:"\u6240\u4ee5 2 \u4e2a\u6307\u9488\u76f8\u9047\u4ee5\u540e\uff0c\u5982\u679c slow \u7ee7\u7eed\u5f80\u524d\u8d70\uff0cfast \u6307\u9488\u56de\u5230\u8d77\u70b9 head\uff0c\u4e24\u8005\u90fd\u6bcf\u6b21\u8d70\u4e00\u6b65\uff0c\u90a3\u4e48\u5fc5\u5b9a\u4f1a\u5728\u73af\u7684\u8d77\u70b9\u76f8\u9047\uff0c\u76f8\u9047\u4ee5\u540e\u8f93\u51fa\u8fd9\u4e2a\u70b9\u5373\u662f\u7ed3\u679c\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--34",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0142.Linked-List-Cycle-II/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc detectCycle(head *ListNode) *ListNode {\n\tif head == nil || head.Next == nil {\n\t\treturn nil\n\t}\n\tisCycle, slow := hasCycle142(head)\n\tif !isCycle {\n\t\treturn nil\n\t}\n\tfast := head\n\tfor fast != slow {\n\t\tfast = fast.Next\n\t\tslow = slow.Next\n\t}\n\treturn fast\n}\n\nfunc hasCycle142(head *ListNode) (bool, *ListNode) {\n\tfast := head\n\tslow := head\n\tfor slow != nil && fast != nil && fast.Next != nil {\n\t\tfast = fast.Next.Next\n\t\tslow = slow.Next\n\t\tif fast == slow {\n\t\t\treturn true, slow\n\t\t}\n\t}\n\treturn false, nil\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"143-reorder-list-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/reorder-list/",children:"143. Reorder List"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0143.Reorder-List/#143-reorder-listhttpsleetcodecomproblemsreorder-list",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--35",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0143.Reorder-List/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a singly linked list L: L0\u2192L1\u2192\u2026\u2192Ln-1\u2192Ln, reorder it to: L0\u2192Ln\u2192L1\u2192Ln-1\u2192L2\u2192Ln-2\u2192\u2026"}),"\n",(0,i.jsx)(n.p,{children:"You may not modify the values in the list\u2019s nodes, only nodes itself may be changed."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Given 1->2->3->4, reorder it to 1->4->2->3.\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Given 1->2->3->4->5, reorder it to 1->5->2->4->3.\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--35",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0143.Reorder-List/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u7167\u6307\u5b9a\u89c4\u5219\u91cd\u65b0\u6392\u5e8f\u94fe\u8868\uff1a\u7b2c\u4e00\u4e2a\u5143\u7d20\u548c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u6392\u5217\u5728\u4e00\u8d77\uff0c\u63a5\u7740\u7b2c\u4e8c\u4e2a\u5143\u7d20\u548c\u5012\u6570\u7b2c\u4e8c\u4e2a\u5143\u7d20\u6392\u5728\u4e00\u8d77\uff0c\u63a5\u7740\u7b2c\u4e09\u4e2a\u5143\u7d20\u548c\u5012\u6570\u7b2c\u4e09\u4e2a\u5143\u7d20\u6392\u5728\u4e00\u8d77\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--35",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0143.Reorder-List/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6700\u8fd1\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u5148\u628a\u94fe\u8868\u5b58\u50a8\u5230\u6570\u7ec4\u91cc\uff0c\u7136\u540e\u627e\u5230\u94fe\u8868\u4e2d\u95f4\u7684\u7ed3\u70b9\uff0c\u6309\u7167\u89c4\u5219\u62fc\u63a5\u5373\u53ef\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(n)\u3002"}),"\n",(0,i.jsx)(n.p,{children:"\u66f4\u597d\u7684\u505a\u6cd5\u662f\u7ed3\u5408\u4e4b\u524d\u51e0\u9053\u9898\u7684\u64cd\u4f5c\uff1a\u94fe\u8868\u9006\u5e8f\uff0c\u627e\u4e2d\u95f4\u7ed3\u70b9\u3002"}),"\n",(0,i.jsxs)(n.p,{children:["\u5148\u627e\u5230\u94fe\u8868\u7684\u4e2d\u95f4\u7ed3\u70b9\uff0c\u7136\u540e\u5229\u7528\u9006\u5e8f\u533a\u95f4\u7684\u64cd\u4f5c\uff0c\u5982 ",(0,i.jsx)(n.a,{href:"https://github.com/halfrost/leetcode-go/tree/master/leetcode/0092.Reverse-Linked-List-II",children:"\u7b2c 92 \u9898"})," \u91cc\u7684 reverseBetween() \u64cd\u4f5c\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u91cc\u7684\u53cd\u8f6c\u533a\u95f4\u662f\u4ece\u4e2d\u70b9\u4e00\u76f4\u5230\u672b\u5c3e\u3002\u6700\u540e\u5229\u7528 2 \u4e2a\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u5411\u5934\u7ed3\u70b9\uff0c\u4e00\u4e2a\u6307\u5411\u4e2d\u95f4\u7ed3\u70b9\uff0c\u5f00\u59cb\u62fc\u63a5\u6700\u7ec8\u7684\u7ed3\u679c\u3002\u8fd9\u79cd\u505a\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--35",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0143.Reorder-List/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00 \u5355\u94fe\u8868\nfunc reorderList(head *ListNode) *ListNode {\n\tif head == nil || head.Next == nil {\n\t\treturn head\n\t}\n\n\t// \u5bfb\u627e\u4e2d\u95f4\u7ed3\u70b9\n\tp1 := head\n\tp2 := head\n\tfor p2.Next != nil && p2.Next.Next != nil {\n\t\tp1 = p1.Next\n\t\tp2 = p2.Next.Next\n\t}\n\n\t// \u53cd\u8f6c\u94fe\u8868\u540e\u534a\u90e8\u5206  1->2->3->4->5->6 to 1->2->3->6->5->4\n\tpreMiddle := p1\n\tpreCurrent := p1.Next\n\tfor preCurrent.Next != nil {\n\t\tcurrent := preCurrent.Next\n\t\tpreCurrent.Next = current.Next\n\t\tcurrent.Next = preMiddle.Next\n\t\tpreMiddle.Next = current\n\t}\n\n\t// \u91cd\u65b0\u62fc\u63a5\u94fe\u8868  1->2->3->6->5->4 to 1->6->2->5->3->4\n\tp1 = head\n\tp2 = preMiddle.Next\n\tfor p1 != preMiddle {\n\t\tpreMiddle.Next = p2.Next\n\t\tp2.Next = p1.Next\n\t\tp1.Next = p2\n\t\tp1 = p2.Next\n\t\tp2 = preMiddle.Next\n\t}\n\treturn head\n}\n\n// \u89e3\u6cd5\u4e8c \u6570\u7ec4\nfunc reorderList1(head *ListNode) *ListNode {\n\tarray := listToArray(head)\n\tlength := len(array)\n\tif length == 0 {\n\t\treturn head\n\t}\n\tcur := head\n\tlast := head\n\tfor i := 0; i < len(array)/2; i++ {\n\t\ttmp := &ListNode{Val: array[length-1-i], Next: cur.Next}\n\t\tcur.Next = tmp\n\t\tcur = tmp.Next\n\t\tlast = tmp\n\t}\n\tif length%2 == 0 {\n\t\tlast.Next = nil\n\t} else {\n\t\tcur.Next = nil\n\t}\n\treturn head\n}\n\nfunc listToArray(head *ListNode) []int {\n\tarray := []int{}\n\tif head == nil {\n\t\treturn array\n\t}\n\tcur := head\n\tfor cur != nil {\n\t\tarray = append(array, cur.Val)\n\t\tcur = cur.Next\n\t}\n\treturn array\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"144-binary-tree-preorder-traversal-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-preorder-traversal/",children:"144. Binary Tree Preorder Traversal"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/#144-binary-tree-preorder-traversalhttpsleetcodecomproblemsbinary-tree-preorder-traversal",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--36",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, return the preorder traversal of its nodes\u2019 values."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\nOutput: [1,2,3]\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Follow up"}),": Recursive solution is trivial, could you do it iteratively?"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--36",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u5148\u6839\u904d\u5386\u4e00\u9897\u6811\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--36",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u4e24\u79cd\u9012\u5f52\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u89c1\u4ee3\u7801\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--36",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0144.Binary-Tree-Preorder-Traversal/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\n\n// \u89e3\u6cd5\u4e00 \u9012\u5f52\nfunc preorderTraversal(root *TreeNode) []int {\n\tres := []int{}\n\tif root != nil {\n\t\tres = append(res, root.Val)\n\t\ttmp := preorderTraversal(root.Left)\n\t\tfor _, t := range tmp {\n\t\t\tres = append(res, t)\n\t\t}\n\t\ttmp = preorderTraversal(root.Right)\n\t\tfor _, t := range tmp {\n\t\t\tres = append(res, t)\n\t\t}\n\t}\n\treturn res\n}\n\n// \u89e3\u6cd5\u4e8c \u9012\u5f52\nfunc preorderTraversal1(root *TreeNode) []int {\n\tvar result []int\n\tpreorder(root, &result)\n\treturn result\n}\n\nfunc preorder(root *TreeNode, output *[]int) {\n\tif root != nil {\n\t\t*output = append(*output, root.Val)\n\t\tpreorder(root.Left, output)\n\t\tpreorder(root.Right, output)\n\t}\n}\n\n// \u89e3\u6cd5\u4e09 \u975e\u9012\u5f52\uff0c\u7528\u6808\u6a21\u62df\u9012\u5f52\u8fc7\u7a0b\nfunc preorderTraversal2(root *TreeNode) []int {\n\tif root == nil {\n\t\treturn []int{}\n\t}\n\tstack, res := []*TreeNode{}, []int{}\n\tstack = append(stack, root)\n\tfor len(stack) != 0 {\n\t\tnode := stack[len(stack)-1]\n\t\tstack = stack[:len(stack)-1]\n\t\tif node != nil {\n\t\t\tres = append(res, node.Val)\n\t\t}\n\t\tif node.Right != nil {\n\t\t\tstack = append(stack, node.Right)\n\t\t}\n\t\tif node.Left != nil {\n\t\t\tstack = append(stack, node.Left)\n\t\t}\n\t}\n\treturn res\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"145-binary-tree-postorder-traversal-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/binary-tree-postorder-traversal/",children:"145. Binary Tree Postorder Traversal"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/#145-binary-tree-postorder-traversalhttpsleetcodecomproblemsbinary-tree-postorder-traversal",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--37",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Given a binary tree, return the postorder traversal of its nodes\u2019 values."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: [1,null,2,3]\n   1\n    \\\n     2\n    /\n   3\n\nOutput: [3,2,1]\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Follow up"}),": Recursive solution is trivial, could you do it iteratively?"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--37",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u540e\u6839\u904d\u5386\u4e00\u9897\u6811\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--37",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u9012\u5f52\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u89c1\u4ee3\u7801\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--37",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0145.Binary-Tree-Postorder-Traversal/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for a binary tree node.\n * type TreeNode struct {\n *     Val int\n *     Left *TreeNode\n *     Right *TreeNode\n * }\n */\nfunc postorderTraversal(root *TreeNode) []int {\n\tvar result []int\n\tpostorder(root, &result)\n\treturn result\n}\n\nfunc postorder(root *TreeNode, output *[]int) {\n\tif root != nil {\n\t\tpostorder(root.Left, output)\n\t\tpostorder(root.Right, output)\n\t\t*output = append(*output, root.Val)\n\t}\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"146-lru-cache-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/lru-cache/",children:"146. LRU Cache"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0146.LRU-Cache/#146-lru-cachehttpsleetcodecomproblemslru-cache",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--38",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0146.LRU-Cache/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Design a data structure that follows the constraints of a ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU",children:"Least Recently Used (LRU) cache"})}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Implement the ",(0,i.jsx)(n.code,{children:"LRUCache"})," class:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LRUCache(int capacity)"})," Initialize the LRU cache with ",(0,i.jsx)(n.strong,{children:"positive"})," size ",(0,i.jsx)(n.code,{children:"capacity"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"int get(int key)"})," Return the value of the ",(0,i.jsx)(n.code,{children:"key"})," if the key exists, otherwise return ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"void put(int key, int value)"})," Update the value of the ",(0,i.jsx)(n.code,{children:"key"})," if the ",(0,i.jsx)(n.code,{children:"key"})," exists. Otherwise, add the ",(0,i.jsx)(n.code,{children:"key-value"})," pair to the cache. If the number of keys exceeds the ",(0,i.jsx)(n.code,{children:"capacity"})," from this operation, ",(0,i.jsx)(n.strong,{children:"evict"})," the least recently used key."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Follow up"}),":Could"," you do ",(0,i.jsx)(n.code,{children:"get"})," and ",(0,i.jsx)(n.code,{children:"put"})," in ",(0,i.jsx)(n.code,{children:"O(1)"})," time complexity?"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'Input\n["LRUCache", "put", "put", "get", "put", "get", "put", "get", "get", "get"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Constraints"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"1 <= capacity <= 3000"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 <= key <= 3000"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"0 <= value <= 104"})}),"\n",(0,i.jsxs)(n.li,{children:["At most ",(0,i.jsx)(n.code,{children:"3 * 104"})," calls will be made to ",(0,i.jsx)(n.code,{children:"get"})," and ",(0,i.jsx)(n.code,{children:"put"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--38",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0146.LRU-Cache/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u8fd0\u7528\u4f60\u6240\u638c\u63e1\u7684\u6570\u636e\u7ed3\u6784\uff0c\u8bbe\u8ba1\u548c\u5b9e\u73b0\u4e00\u4e2a LRU (\u6700\u8fd1\u6700\u5c11\u4f7f\u7528) \u7f13\u5b58\u673a\u5236 \u3002 \u5b9e\u73b0 LRUCache \u7c7b\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"LRUCache(int capacity) \u4ee5\u6b63\u6574\u6570\u4f5c\u4e3a\u5bb9\u91cf capacity \u521d\u59cb\u5316 LRU \u7f13\u5b58"}),"\n",(0,i.jsx)(n.li,{children:"int get(int key) \u5982\u679c\u5173\u952e\u5b57 key \u5b58\u5728\u4e8e\u7f13\u5b58\u4e2d\uff0c\u5219\u8fd4\u56de\u5173\u952e\u5b57\u7684\u503c\uff0c\u5426\u5219\u8fd4\u56de -1 \u3002"}),"\n",(0,i.jsx)(n.li,{children:"void put(int key, int value) \u5982\u679c\u5173\u952e\u5b57\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u53d8\u66f4\u5176\u6570\u636e\u503c\uff1b\u5982\u679c\u5173\u952e\u5b57\u4e0d\u5b58\u5728\uff0c\u5219\u63d2\u5165\u8be5\u7ec4\u300c\u5173\u952e\u5b57-\u503c\u300d\u3002\u5f53\u7f13\u5b58\u5bb9\u91cf\u8fbe\u5230\u4e0a\u9650\u65f6\uff0c\u5b83\u5e94\u8be5\u5728\u5199\u5165\u65b0\u6570\u636e\u4e4b\u524d\u5220\u9664\u6700\u4e45\u672a\u4f7f\u7528\u7684\u6570\u636e\u503c\uff0c\u4ece\u800c\u4e3a\u65b0\u7684\u6570\u636e\u503c\u7559\u51fa\u7a7a\u95f4\u3002"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"\u8fdb\u9636\uff1a\u4f60\u662f\u5426\u53ef\u4ee5\u5728 O(1) \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u5b8c\u6210\u8fd9\u4e24\u79cd\u64cd\u4f5c\uff1f"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--38",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0146.LRU-Cache/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u8fd9\u4e00\u9898\u662f LRU \u7ecf\u5178\u9762\u8bd5\u9898\uff0c\u8be6\u7ec6\u89e3\u91ca\u89c1\u7b2c\u4e09\u7ae0\u6a21\u677f\u3002"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--38",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0146.LRU-Cache/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\ntype LRUCache struct {\n\thead, tail *Node\n\tKeys       map[int]*Node\n\tCap        int\n}\n\ntype Node struct {\n\tKey, Val   int\n\tPrev, Next *Node\n}\n\nfunc Constructor(capacity int) LRUCache {\n\treturn LRUCache{Keys: make(map[int]*Node), Cap: capacity}\n}\n\nfunc (this *LRUCache) Get(key int) int {\n\tif node, ok := this.Keys[key]; ok {\n\t\tthis.Remove(node)\n\t\tthis.Add(node)\n\t\treturn node.Val\n\t}\n\treturn -1\n}\n\nfunc (this *LRUCache) Put(key int, value int) {\n\tif node, ok := this.Keys[key]; ok {\n\t\tnode.Val = value\n\t\tthis.Remove(node)\n\t\tthis.Add(node)\n\t\treturn\n\t} else {\n\t\tnode = &Node{Key: key, Val: value}\n\t\tthis.Keys[key] = node\n\t\tthis.Add(node)\n\t}\n\tif len(this.Keys) > this.Cap {\n\t\tdelete(this.Keys, this.tail.Key)\n\t\tthis.Remove(this.tail)\n\t}\n}\n\nfunc (this *LRUCache) Add(node *Node) {\n\tnode.Prev = nil\n\tnode.Next = this.head\n\tif this.head != nil {\n\t\tthis.head.Prev = node\n\t}\n\tthis.head = node\n\tif this.tail == nil {\n\t\tthis.tail = node\n\t\tthis.tail.Next = nil\n\t}\n}\n\nfunc (this *LRUCache) Remove(node *Node) {\n\tif node == this.head {\n\t\tthis.head = node.Next\n\t\tnode.Next = nil\n\t\treturn\n\t}\n\tif node == this.tail {\n\t\tthis.tail = node.Prev\n\t\tnode.Prev.Next = nil\n\t\tnode.Prev = nil\n\t\treturn\n\t}\n\tnode.Prev.Next = node.Next\n\tnode.Next.Prev = node.Prev\n}\n"})}),"\n",(0,i.jsxs)(n.h1,{id:"147-insertion-sort-list-",children:[(0,i.jsx)(n.a,{href:"https://leetcode.com/problems/insertion-sort-list/",children:"147. Insertion Sort List"})," ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/#147-insertion-sort-listhttpsleetcodecomproblemsinsertion-sort-list",children:"#"})]}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee--39",children:["\u9898\u76ee ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/#%E9%A2%98%E7%9B%AE",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Sort a linked list using insertion sort."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif",alt:"img"})}),"\n",(0,i.jsx)(n.p,{children:"A graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list. With each iteration one element (red) is removed from the input data and inserted in-place into the sorted list"}),"\n",(0,i.jsx)(n.p,{children:"Algorithm of Insertion Sort:"}),"\n",(0,i.jsx)(n.p,{children:"Insertion sort iterates, consuming one input element each repetition, and growing a sorted output list. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there. It repeats until no input elements remain."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 1"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: 4->2->1->3\nOutput: 1->2->3->4\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example 2"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Input: -1->5->3->4->0\nOutput: -1->0->3->4->5\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"\u9898\u76ee\u5927\u610f--39",children:["\u9898\u76ee\u5927\u610f ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/#%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u94fe\u8868\u7684\u63d2\u5165\u6392\u5e8f"}),"\n",(0,i.jsxs)(n.h2,{id:"\u89e3\u9898\u601d\u8def--39",children:["\u89e3\u9898\u601d\u8def ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"\u6309\u7167\u9898\u610f\u505a\u5373\u53ef\u3002"}),"\n",(0,i.jsxs)(n.h2,{id:"\u4ee3\u7801--39",children:["\u4ee3\u7801 ",(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/#%E4%BB%A3%E7%A0%81",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Go"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"package leetcode\n\n/**\n * Definition for singly-linked list.\n * type ListNode struct {\n *     Val int\n *     Next *ListNode\n * }\n */\nfunc insertionSortList(head *ListNode) *ListNode {\n\tif head == nil {\n\t\treturn head\n\t}\n\tnewHead := &ListNode{Val: 0, Next: nil} // \u8fd9\u91cc\u521d\u59cb\u5316\u4e0d\u8981\u76f4\u63a5\u6307\u5411 head\uff0c\u4e3a\u4e86\u4e0b\u9762\u5faa\u73af\u53ef\u4ee5\u7edf\u4e00\u5904\u7406\n\tcur, pre := head, newHead\n\tfor cur != nil {\n\t\tnext := cur.Next\n\t\tfor pre.Next != nil && pre.Next.Val < cur.Val {\n\t\t\tpre = pre.Next\n\t\t}\n\t\tcur.Next = pre.Next\n\t\tpre.Next = cur\n\t\tpre = newHead // \u5f52\u4f4d\uff0c\u91cd\u5934\u5f00\u59cb\n\t\tcur = next\n\t}\n\treturn newHead.Next\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/",children:"https://books.halfrost.com/leetcode/ChapterFour/0100~0199/0147.Insertion-Sort-List/"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},54247:(e,n,t)=>{t.d(n,{A:()=>o});t(58101);var r=t(63394);const i={tabItem:"tabItem_BHvI"};var s=t(25105);function o({children:e,hidden:n,className:t}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,r.A)(i.tabItem,t),hidden:n,children:e})}},69578:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var r=t(58101);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);